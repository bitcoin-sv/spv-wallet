# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar NullBool
scalar NullTime
scalar NullString
scalar Uint
scalar Uint32
scalar Uint64
scalar Int16
scalar Int32
scalar Int64
scalar Map
scalar Metadata
scalar DraftStatus
scalar ChangeStrategy
scalar QueryParams
scalar TransactionDirection

type AccessKey {
    id:         String
    xpub_id:    String
    key:        String
    metadata:   Metadata
    created_at: Time
    updated_at: Time
    deleted_at: NullTime
    revoked_at: NullTime
}

type Xpub {
    id:                String
    current_balance:   Uint64
    next_internal_num: Uint32
    next_external_num: Uint32
    metadata:          Metadata
    created_at:        Time
    updated_at:        Time
    deleted_at:        NullTime
}

type Destination {
    id:             String
    xpub_id:        String
    locking_script: String
    type:           String
    chain:          Uint32
    num:            Uint32
    address:        String
    draft_id:       String
    metadata:       Metadata
    created_at:     Time
    updated_at:     Time
    deleted_at:     NullTime
}

type Transaction {
    id:                String
    hex:               String
    block_hash:        String
    block_height:      Uint64
    fee:               Uint64
    number_of_inputs:  Uint32
    number_of_outputs: Uint32
    total_value:       Uint64
    metadata:          Metadata
    output_value:      Int64
    direction:         TransactionDirection
    created_at:        Time
    updated_at:        Time
    deleted_at:        NullTime
}

type PaymailAddress {
    id:          String
    xpub_id:     String
    alias:       String
    domain:      String
    public_name: String
    avatar:      String
    created_at:  Time
    updated_at:  Time
    deleted_at:  NullTime
}

type PaymailP4 {
    alias:            String
    domain:           String
    from_paymail:     String
    note:             String
    pub_key:          String
    receive_endpoint: String
    reference_id:     String
    resolution_type:  String
}

type OpReturnMap {
    app:  String
    type: String
    keys: Map
}

type OpReturn {
    hex:          String
    hex_parts:    [String]
    string_parts: [String]
    map:          OpReturnMap
}

type TransactionOutput {
    paymail_p4: PaymailP4
    satoshis:   Uint64
    scripts:    [ScriptOutput]
    to:         String
    op_return:  OpReturn
}

type Utxo {
    id:             String
    transaction_id: String
    xpub_id:        String
    output_index:   Uint32
    satoshis:       Uint64
    script_pub_key: String
    type:           String
    draft_id:       NullString
    reserved_at:    NullTime
    spending_tx_id: NullString
    metadata:       Metadata
    transaction:    Transaction # originating transaction, this is needed to spend the utxo
    created_at:     Time
    updated_at:     Time
    deleted_at:     NullTime
}

type DraftTransaction {
    id:            String
    xpub_id:       String
    expires_at:    Time
    configuration: TransactionConfig
    status:        DraftStatus
    hex:           String
    metadata:      Metadata
    created_at:    Time
    updated_at:    Time
    deleted_at:    NullTime
}

type TransactionInput {
    id:             String
    transaction_id: String
    xpub_id:        String
    output_index:   Uint32
    satoshis:       Uint64
    script_pub_key: String
    type:           String
    draft_id:       NullString
    reserved_at:    NullTime
    spending_tx_id: NullString
    destination:    Destination
}

type FeeUnit {
    satoshis: Int
    bytes:    Int
}

type TransactionConfig {
    change_destinations:           [Destination]
    change_satoshis:               Uint64
    change_destinations_strategy:  ChangeStrategy
    change_number_of_destinations: Int
    change_minimum_satoshis:       Uint64
    fee_unit:                      FeeUnit
    fee:                           Uint64
    inputs:                        [TransactionInput]
    outputs:                       [TransactionOutput]
    sync:                          SyncConfig
}

type SyncConfig {
    broadcast: Boolean
    broadcast_instant: Boolean
    paymail_p2p: Boolean
    sync_on_chain: Boolean
}

type ScriptOutput {
    address:  String
    satoshis: Uint64
    script:   String
}

input OpReturnMapInput {
    app:  String
    type: String
    keys: Map
}

input OpReturnInput {
    hex:          String
    hex_parts:    [String]
    string_parts: [String]
    map:          OpReturnMapInput
}

input ScriptOutputInput {
    address:  String
    satoshis: Uint64
    script:   String
}

input TransactionOutputInput {
    to:        String
    satoshis:  Uint64
    scripts:    [ScriptOutputInput]
    op_return:  OpReturnInput
}

input UtxoPointer {
    transaction_id: String
    output_index:   Uint32
}

input DestinationInput {
    id:             String
    xpub_id:        String
    locking_script: String
    type:           String
    chain:          Uint32
    num:            Uint32
    address:        String
    draft_id:       String
    metadata:       Metadata
    created_at:     Time
    updated_at:     Time
    deleted_at:     NullTime
}

input FeeUnitInput {
    satoshis: Int
    bytes:    Int
}

input SyncConfigInput {
    broadcast: Boolean
    broadcast_instant: Boolean
    paymail_p2p: Boolean
    sync_on_chain: Boolean
}

input TransactionConfigInput {
    change_satoshis:               Uint64
    change_destinations:           [DestinationInput]
    change_destinations_strategy:  ChangeStrategy
    change_number_of_destinations: Int
    change_minimum_satoshis:       Uint64
    include_utxos:                 [UtxoPointer]
    inputs:                        [Map]
    expires_in:                    Uint64
    fee:                           Uint64
    fee_unit:                      FeeUnitInput
    from_utxos:                    [UtxoPointer]
    outputs:                       [TransactionOutputInput]
    send_all_to:                   TransactionOutputInput
    sync:                          SyncConfigInput
}

type Query {
    xpub: Xpub
    access_key(
        key: String!
    ): AccessKey
    access_keys(
        metadata: Metadata,
        conditions: Map,
        params: QueryParams
    ): [AccessKey]
    access_keys_count(
        metadata: Metadata
        conditions: Map,
    ): Int64
    transaction(
        id: String!
    ): Transaction
    transactions(
        metadata: Metadata
        conditions: Map,
        params: QueryParams
    ): [Transaction]
    transactions_count(
        metadata: Metadata
        conditions: Map,
    ): Int64
    destination(
        id: String
        address: String
        locking_script: String
    ): Destination
    destinations(
        metadata: Metadata,
        conditions: Map,
        params: QueryParams
    ): [Destination]
    destinations_count(
        metadata: Metadata
        conditions: Map,
    ): Int64
    utxo (
        tx_id: String!
        output_index: Uint32!
    ): Utxo
    utxos (
        metadata: Metadata,
        conditions: Map,
        params: QueryParams
    ): [Utxo]
    utxos_count (
        metadata: Metadata
        conditions: Map,
    ): Int64
}

type Mutation {
    xpub(
        xpub: String!,
        metadata: Metadata
    ): Xpub
    xpub_metadata(
        metadata: Metadata!
    ): Xpub
    access_key(
        metadata: Metadata
    ): AccessKey
    access_key_revoke(
        id: String
    ): AccessKey
    transaction(
        hex: String!,
        draft_id: String,
        metadata: Metadata
    ): Transaction
    transaction_metadata(
        id: String!
        metadata: Metadata!
    ): Transaction
    new_transaction(
        transaction_config: TransactionConfigInput!,
        metadata: Metadata
    ): DraftTransaction
    destination(
        destination_type: String,
        metadata: Metadata
    ): Destination
    destination_metadata(
        id: String
        address: String
        locking_script: String
        metadata: Metadata!
    ): Destination
    utxos_unreserve(
        draft_id: String!,
    ): Boolean
}
