// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/BuxOrg/bux"
	"github.com/BuxOrg/bux-server/gqlgen"
	"github.com/BuxOrg/bux/utils"
	"github.com/mrz1836/go-datastore"
	customtypes "github.com/mrz1836/go-datastore/custom_types"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	TransactionConfigInput() TransactionConfigInputResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AccessKey struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Key       func(childComplexity int) int
		Metadata  func(childComplexity int) int
		RevokedAt func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		XpubID    func(childComplexity int) int
	}

	AdminStats struct {
		Balance            func(childComplexity int) int
		Destinations       func(childComplexity int) int
		PaymailAddresses   func(childComplexity int) int
		Transactions       func(childComplexity int) int
		TransactionsPerDay func(childComplexity int) int
		Utxos              func(childComplexity int) int
		UtxosPerType       func(childComplexity int) int
		XPubs              func(childComplexity int) int
	}

	Destination struct {
		Address       func(childComplexity int) int
		Chain         func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DraftID       func(childComplexity int) int
		ID            func(childComplexity int) int
		LockingScript func(childComplexity int) int
		Metadata      func(childComplexity int) int
		Num           func(childComplexity int) int
		Type          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		XpubID        func(childComplexity int) int
	}

	DraftTransaction struct {
		Configuration func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		ExpiresAt     func(childComplexity int) int
		Hex           func(childComplexity int) int
		ID            func(childComplexity int) int
		Metadata      func(childComplexity int) int
		Status        func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		XpubID        func(childComplexity int) int
	}

	FeeUnit struct {
		Bytes    func(childComplexity int) int
		Satoshis func(childComplexity int) int
	}

	Mutation struct {
		AccessKey           func(childComplexity int, metadata bux.Metadata) int
		AccessKeyRevoke     func(childComplexity int, id *string) int
		AdminPaymailCreate  func(childComplexity int, xpub string, address string, publicName *string, avatar *string, metadata bux.Metadata) int
		AdminPaymailDelete  func(childComplexity int, address string) int
		AdminTransaction    func(childComplexity int, hex string) int
		Destination         func(childComplexity int, destinationType *string, metadata bux.Metadata) int
		DestinationMetadata func(childComplexity int, id *string, address *string, lockingScript *string, metadata bux.Metadata) int
		NewTransaction      func(childComplexity int, transactionConfig bux.TransactionConfig, metadata bux.Metadata) int
		Transaction         func(childComplexity int, hex string, draftID *string, metadata bux.Metadata) int
		TransactionMetadata func(childComplexity int, id string, metadata bux.Metadata) int
		UtxosUnreserve      func(childComplexity int, draftID string) int
		Xpub                func(childComplexity int, xpub string, metadata bux.Metadata) int
		XpubMetadata        func(childComplexity int, metadata bux.Metadata) int
	}

	OpReturn struct {
		Hex         func(childComplexity int) int
		HexParts    func(childComplexity int) int
		Map         func(childComplexity int) int
		StringParts func(childComplexity int) int
	}

	OpReturnMap struct {
		App  func(childComplexity int) int
		Keys func(childComplexity int) int
		Type func(childComplexity int) int
	}

	PaymailAddress struct {
		Alias      func(childComplexity int) int
		Avatar     func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		Domain     func(childComplexity int) int
		ID         func(childComplexity int) int
		PublicName func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		XpubID     func(childComplexity int) int
	}

	PaymailP4 struct {
		Alias           func(childComplexity int) int
		Domain          func(childComplexity int) int
		FromPaymail     func(childComplexity int) int
		Note            func(childComplexity int) int
		PubKey          func(childComplexity int) int
		ReceiveEndpoint func(childComplexity int) int
		ReferenceID     func(childComplexity int) int
		ResolutionType  func(childComplexity int) int
	}

	Query struct {
		AccessKey                   func(childComplexity int, key string) int
		AccessKeys                  func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		AccessKeysCount             func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		AdminAccessKeysCount        func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		AdminAccessKeysList         func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		AdminDestinationsCount      func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		AdminDestinationsList       func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		AdminDraftTransactionsCount func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		AdminDraftTransactionsList  func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		AdminGetStats               func(childComplexity int) int
		AdminGetStatus              func(childComplexity int) int
		AdminPaymailGet             func(childComplexity int, address string) int
		AdminPaymailGetByXpubID     func(childComplexity int, xpubID string) int
		AdminPaymailsCount          func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		AdminPaymailsList           func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		AdminTransactionsCount      func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		AdminTransactionsList       func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		AdminUtxosCount             func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		AdminUtxosList              func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		AdminXpubsCount             func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		AdminXpubsList              func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		Destination                 func(childComplexity int, id *string, address *string, lockingScript *string) int
		Destinations                func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		DestinationsCount           func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		Transaction                 func(childComplexity int, id string) int
		Transactions                func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		TransactionsCount           func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		Utxo                        func(childComplexity int, txID string, outputIndex uint32) int
		Utxos                       func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) int
		UtxosCount                  func(childComplexity int, metadata bux.Metadata, conditions map[string]interface{}) int
		Xpub                        func(childComplexity int) int
	}

	ScriptOutput struct {
		Address  func(childComplexity int) int
		Satoshis func(childComplexity int) int
		Script   func(childComplexity int) int
	}

	SyncConfig struct {
		Broadcast        func(childComplexity int) int
		BroadcastInstant func(childComplexity int) int
		PaymailP2P       func(childComplexity int) int
		SyncOnChain      func(childComplexity int) int
	}

	Transaction struct {
		BlockHash       func(childComplexity int) int
		BlockHeight     func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		Direction       func(childComplexity int) int
		Fee             func(childComplexity int) int
		Hex             func(childComplexity int) int
		ID              func(childComplexity int) int
		Metadata        func(childComplexity int) int
		NumberOfInputs  func(childComplexity int) int
		NumberOfOutputs func(childComplexity int) int
		OutputValue     func(childComplexity int) int
		TotalValue      func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	TransactionConfig struct {
		ChangeDestinations         func(childComplexity int) int
		ChangeDestinationsStrategy func(childComplexity int) int
		ChangeMinimumSatoshis      func(childComplexity int) int
		ChangeNumberOfDestinations func(childComplexity int) int
		ChangeSatoshis             func(childComplexity int) int
		Fee                        func(childComplexity int) int
		FeeUnit                    func(childComplexity int) int
		Inputs                     func(childComplexity int) int
		Outputs                    func(childComplexity int) int
		Sync                       func(childComplexity int) int
	}

	TransactionInput struct {
		Destination   func(childComplexity int) int
		DraftID       func(childComplexity int) int
		ID            func(childComplexity int) int
		OutputIndex   func(childComplexity int) int
		ReservedAt    func(childComplexity int) int
		Satoshis      func(childComplexity int) int
		ScriptPubKey  func(childComplexity int) int
		SpendingTxID  func(childComplexity int) int
		TransactionID func(childComplexity int) int
		Type          func(childComplexity int) int
		XpubID        func(childComplexity int) int
	}

	TransactionOutput struct {
		OpReturn  func(childComplexity int) int
		PaymailP4 func(childComplexity int) int
		Satoshis  func(childComplexity int) int
		Scripts   func(childComplexity int) int
		To        func(childComplexity int) int
	}

	Utxo struct {
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		DraftID       func(childComplexity int) int
		ID            func(childComplexity int) int
		Metadata      func(childComplexity int) int
		OutputIndex   func(childComplexity int) int
		ReservedAt    func(childComplexity int) int
		Satoshis      func(childComplexity int) int
		ScriptPubKey  func(childComplexity int) int
		SpendingTxID  func(childComplexity int) int
		Transaction   func(childComplexity int) int
		TransactionID func(childComplexity int) int
		Type          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		XpubID        func(childComplexity int) int
	}

	Xpub struct {
		CreatedAt       func(childComplexity int) int
		CurrentBalance  func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		Metadata        func(childComplexity int) int
		NextExternalNum func(childComplexity int) int
		NextInternalNum func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}
}

type MutationResolver interface {
	Xpub(ctx context.Context, xpub string, metadata bux.Metadata) (*bux.Xpub, error)
	XpubMetadata(ctx context.Context, metadata bux.Metadata) (*bux.Xpub, error)
	AccessKey(ctx context.Context, metadata bux.Metadata) (*bux.AccessKey, error)
	AccessKeyRevoke(ctx context.Context, id *string) (*bux.AccessKey, error)
	Transaction(ctx context.Context, hex string, draftID *string, metadata bux.Metadata) (*bux.Transaction, error)
	TransactionMetadata(ctx context.Context, id string, metadata bux.Metadata) (*bux.Transaction, error)
	NewTransaction(ctx context.Context, transactionConfig bux.TransactionConfig, metadata bux.Metadata) (*bux.DraftTransaction, error)
	Destination(ctx context.Context, destinationType *string, metadata bux.Metadata) (*bux.Destination, error)
	DestinationMetadata(ctx context.Context, id *string, address *string, lockingScript *string, metadata bux.Metadata) (*bux.Destination, error)
	UtxosUnreserve(ctx context.Context, draftID string) (*bool, error)
	AdminPaymailCreate(ctx context.Context, xpub string, address string, publicName *string, avatar *string, metadata bux.Metadata) (*bux.PaymailAddress, error)
	AdminPaymailDelete(ctx context.Context, address string) (bool, error)
	AdminTransaction(ctx context.Context, hex string) (*bux.Transaction, error)
}
type QueryResolver interface {
	Xpub(ctx context.Context) (*bux.Xpub, error)
	AccessKey(ctx context.Context, key string) (*bux.AccessKey, error)
	AccessKeys(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.AccessKey, error)
	AccessKeysCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	Transaction(ctx context.Context, id string) (*bux.Transaction, error)
	Transactions(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.Transaction, error)
	TransactionsCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	Destination(ctx context.Context, id *string, address *string, lockingScript *string) (*bux.Destination, error)
	Destinations(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.Destination, error)
	DestinationsCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	Utxo(ctx context.Context, txID string, outputIndex uint32) (*bux.Utxo, error)
	Utxos(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.Utxo, error)
	UtxosCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	AdminGetStatus(ctx context.Context) (*bool, error)
	AdminGetStats(ctx context.Context) (*bux.AdminStats, error)
	AdminAccessKeysList(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.AccessKey, error)
	AdminAccessKeysCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	AdminDestinationsList(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.Destination, error)
	AdminDestinationsCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	AdminDraftTransactionsList(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.DraftTransaction, error)
	AdminDraftTransactionsCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	AdminPaymailGet(ctx context.Context, address string) (*bux.PaymailAddress, error)
	AdminPaymailGetByXpubID(ctx context.Context, xpubID string) ([]*bux.PaymailAddress, error)
	AdminPaymailsList(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.PaymailAddress, error)
	AdminPaymailsCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	AdminTransactionsList(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.Transaction, error)
	AdminTransactionsCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	AdminUtxosList(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.Utxo, error)
	AdminUtxosCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
	AdminXpubsList(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}, params *datastore.QueryParams) ([]*bux.Xpub, error)
	AdminXpubsCount(ctx context.Context, metadata bux.Metadata, conditions map[string]interface{}) (*int64, error)
}

type TransactionConfigInputResolver interface {
	Inputs(ctx context.Context, obj *bux.TransactionConfig, data []map[string]interface{}) error
	ExpiresIn(ctx context.Context, obj *bux.TransactionConfig, data *uint64) error
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AccessKey.created_at":
		if e.complexity.AccessKey.CreatedAt == nil {
			break
		}

		return e.complexity.AccessKey.CreatedAt(childComplexity), true

	case "AccessKey.deleted_at":
		if e.complexity.AccessKey.DeletedAt == nil {
			break
		}

		return e.complexity.AccessKey.DeletedAt(childComplexity), true

	case "AccessKey.id":
		if e.complexity.AccessKey.ID == nil {
			break
		}

		return e.complexity.AccessKey.ID(childComplexity), true

	case "AccessKey.key":
		if e.complexity.AccessKey.Key == nil {
			break
		}

		return e.complexity.AccessKey.Key(childComplexity), true

	case "AccessKey.metadata":
		if e.complexity.AccessKey.Metadata == nil {
			break
		}

		return e.complexity.AccessKey.Metadata(childComplexity), true

	case "AccessKey.revoked_at":
		if e.complexity.AccessKey.RevokedAt == nil {
			break
		}

		return e.complexity.AccessKey.RevokedAt(childComplexity), true

	case "AccessKey.updated_at":
		if e.complexity.AccessKey.UpdatedAt == nil {
			break
		}

		return e.complexity.AccessKey.UpdatedAt(childComplexity), true

	case "AccessKey.xpub_id":
		if e.complexity.AccessKey.XpubID == nil {
			break
		}

		return e.complexity.AccessKey.XpubID(childComplexity), true

	case "AdminStats.balance":
		if e.complexity.AdminStats.Balance == nil {
			break
		}

		return e.complexity.AdminStats.Balance(childComplexity), true

	case "AdminStats.destinations":
		if e.complexity.AdminStats.Destinations == nil {
			break
		}

		return e.complexity.AdminStats.Destinations(childComplexity), true

	case "AdminStats.paymail_addresses":
		if e.complexity.AdminStats.PaymailAddresses == nil {
			break
		}

		return e.complexity.AdminStats.PaymailAddresses(childComplexity), true

	case "AdminStats.transactions":
		if e.complexity.AdminStats.Transactions == nil {
			break
		}

		return e.complexity.AdminStats.Transactions(childComplexity), true

	case "AdminStats.transactions_per_day":
		if e.complexity.AdminStats.TransactionsPerDay == nil {
			break
		}

		return e.complexity.AdminStats.TransactionsPerDay(childComplexity), true

	case "AdminStats.utxos":
		if e.complexity.AdminStats.Utxos == nil {
			break
		}

		return e.complexity.AdminStats.Utxos(childComplexity), true

	case "AdminStats.utxos_per_type":
		if e.complexity.AdminStats.UtxosPerType == nil {
			break
		}

		return e.complexity.AdminStats.UtxosPerType(childComplexity), true

	case "AdminStats.xpubs":
		if e.complexity.AdminStats.XPubs == nil {
			break
		}

		return e.complexity.AdminStats.XPubs(childComplexity), true

	case "Destination.address":
		if e.complexity.Destination.Address == nil {
			break
		}

		return e.complexity.Destination.Address(childComplexity), true

	case "Destination.chain":
		if e.complexity.Destination.Chain == nil {
			break
		}

		return e.complexity.Destination.Chain(childComplexity), true

	case "Destination.created_at":
		if e.complexity.Destination.CreatedAt == nil {
			break
		}

		return e.complexity.Destination.CreatedAt(childComplexity), true

	case "Destination.deleted_at":
		if e.complexity.Destination.DeletedAt == nil {
			break
		}

		return e.complexity.Destination.DeletedAt(childComplexity), true

	case "Destination.draft_id":
		if e.complexity.Destination.DraftID == nil {
			break
		}

		return e.complexity.Destination.DraftID(childComplexity), true

	case "Destination.id":
		if e.complexity.Destination.ID == nil {
			break
		}

		return e.complexity.Destination.ID(childComplexity), true

	case "Destination.locking_script":
		if e.complexity.Destination.LockingScript == nil {
			break
		}

		return e.complexity.Destination.LockingScript(childComplexity), true

	case "Destination.metadata":
		if e.complexity.Destination.Metadata == nil {
			break
		}

		return e.complexity.Destination.Metadata(childComplexity), true

	case "Destination.num":
		if e.complexity.Destination.Num == nil {
			break
		}

		return e.complexity.Destination.Num(childComplexity), true

	case "Destination.type":
		if e.complexity.Destination.Type == nil {
			break
		}

		return e.complexity.Destination.Type(childComplexity), true

	case "Destination.updated_at":
		if e.complexity.Destination.UpdatedAt == nil {
			break
		}

		return e.complexity.Destination.UpdatedAt(childComplexity), true

	case "Destination.xpub_id":
		if e.complexity.Destination.XpubID == nil {
			break
		}

		return e.complexity.Destination.XpubID(childComplexity), true

	case "DraftTransaction.configuration":
		if e.complexity.DraftTransaction.Configuration == nil {
			break
		}

		return e.complexity.DraftTransaction.Configuration(childComplexity), true

	case "DraftTransaction.created_at":
		if e.complexity.DraftTransaction.CreatedAt == nil {
			break
		}

		return e.complexity.DraftTransaction.CreatedAt(childComplexity), true

	case "DraftTransaction.deleted_at":
		if e.complexity.DraftTransaction.DeletedAt == nil {
			break
		}

		return e.complexity.DraftTransaction.DeletedAt(childComplexity), true

	case "DraftTransaction.expires_at":
		if e.complexity.DraftTransaction.ExpiresAt == nil {
			break
		}

		return e.complexity.DraftTransaction.ExpiresAt(childComplexity), true

	case "DraftTransaction.hex":
		if e.complexity.DraftTransaction.Hex == nil {
			break
		}

		return e.complexity.DraftTransaction.Hex(childComplexity), true

	case "DraftTransaction.id":
		if e.complexity.DraftTransaction.ID == nil {
			break
		}

		return e.complexity.DraftTransaction.ID(childComplexity), true

	case "DraftTransaction.metadata":
		if e.complexity.DraftTransaction.Metadata == nil {
			break
		}

		return e.complexity.DraftTransaction.Metadata(childComplexity), true

	case "DraftTransaction.status":
		if e.complexity.DraftTransaction.Status == nil {
			break
		}

		return e.complexity.DraftTransaction.Status(childComplexity), true

	case "DraftTransaction.updated_at":
		if e.complexity.DraftTransaction.UpdatedAt == nil {
			break
		}

		return e.complexity.DraftTransaction.UpdatedAt(childComplexity), true

	case "DraftTransaction.xpub_id":
		if e.complexity.DraftTransaction.XpubID == nil {
			break
		}

		return e.complexity.DraftTransaction.XpubID(childComplexity), true

	case "FeeUnit.bytes":
		if e.complexity.FeeUnit.Bytes == nil {
			break
		}

		return e.complexity.FeeUnit.Bytes(childComplexity), true

	case "FeeUnit.satoshis":
		if e.complexity.FeeUnit.Satoshis == nil {
			break
		}

		return e.complexity.FeeUnit.Satoshis(childComplexity), true

	case "Mutation.access_key":
		if e.complexity.Mutation.AccessKey == nil {
			break
		}

		args, err := ec.field_Mutation_access_key_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AccessKey(childComplexity, args["metadata"].(bux.Metadata)), true

	case "Mutation.access_key_revoke":
		if e.complexity.Mutation.AccessKeyRevoke == nil {
			break
		}

		args, err := ec.field_Mutation_access_key_revoke_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AccessKeyRevoke(childComplexity, args["id"].(*string)), true

	case "Mutation.admin_paymail_create":
		if e.complexity.Mutation.AdminPaymailCreate == nil {
			break
		}

		args, err := ec.field_Mutation_admin_paymail_create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AdminPaymailCreate(childComplexity, args["xpub"].(string), args["address"].(string), args["public_name"].(*string), args["avatar"].(*string), args["metadata"].(bux.Metadata)), true

	case "Mutation.admin_paymail_delete":
		if e.complexity.Mutation.AdminPaymailDelete == nil {
			break
		}

		args, err := ec.field_Mutation_admin_paymail_delete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AdminPaymailDelete(childComplexity, args["address"].(string)), true

	case "Mutation.admin_transaction":
		if e.complexity.Mutation.AdminTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_admin_transaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AdminTransaction(childComplexity, args["hex"].(string)), true

	case "Mutation.destination":
		if e.complexity.Mutation.Destination == nil {
			break
		}

		args, err := ec.field_Mutation_destination_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Destination(childComplexity, args["destination_type"].(*string), args["metadata"].(bux.Metadata)), true

	case "Mutation.destination_metadata":
		if e.complexity.Mutation.DestinationMetadata == nil {
			break
		}

		args, err := ec.field_Mutation_destination_metadata_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DestinationMetadata(childComplexity, args["id"].(*string), args["address"].(*string), args["locking_script"].(*string), args["metadata"].(bux.Metadata)), true

	case "Mutation.new_transaction":
		if e.complexity.Mutation.NewTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_new_transaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewTransaction(childComplexity, args["transaction_config"].(bux.TransactionConfig), args["metadata"].(bux.Metadata)), true

	case "Mutation.transaction":
		if e.complexity.Mutation.Transaction == nil {
			break
		}

		args, err := ec.field_Mutation_transaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Transaction(childComplexity, args["hex"].(string), args["draft_id"].(*string), args["metadata"].(bux.Metadata)), true

	case "Mutation.transaction_metadata":
		if e.complexity.Mutation.TransactionMetadata == nil {
			break
		}

		args, err := ec.field_Mutation_transaction_metadata_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TransactionMetadata(childComplexity, args["id"].(string), args["metadata"].(bux.Metadata)), true

	case "Mutation.utxos_unreserve":
		if e.complexity.Mutation.UtxosUnreserve == nil {
			break
		}

		args, err := ec.field_Mutation_utxos_unreserve_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UtxosUnreserve(childComplexity, args["draft_id"].(string)), true

	case "Mutation.xpub":
		if e.complexity.Mutation.Xpub == nil {
			break
		}

		args, err := ec.field_Mutation_xpub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Xpub(childComplexity, args["xpub"].(string), args["metadata"].(bux.Metadata)), true

	case "Mutation.xpub_metadata":
		if e.complexity.Mutation.XpubMetadata == nil {
			break
		}

		args, err := ec.field_Mutation_xpub_metadata_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.XpubMetadata(childComplexity, args["metadata"].(bux.Metadata)), true

	case "OpReturn.hex":
		if e.complexity.OpReturn.Hex == nil {
			break
		}

		return e.complexity.OpReturn.Hex(childComplexity), true

	case "OpReturn.hex_parts":
		if e.complexity.OpReturn.HexParts == nil {
			break
		}

		return e.complexity.OpReturn.HexParts(childComplexity), true

	case "OpReturn.map":
		if e.complexity.OpReturn.Map == nil {
			break
		}

		return e.complexity.OpReturn.Map(childComplexity), true

	case "OpReturn.string_parts":
		if e.complexity.OpReturn.StringParts == nil {
			break
		}

		return e.complexity.OpReturn.StringParts(childComplexity), true

	case "OpReturnMap.app":
		if e.complexity.OpReturnMap.App == nil {
			break
		}

		return e.complexity.OpReturnMap.App(childComplexity), true

	case "OpReturnMap.keys":
		if e.complexity.OpReturnMap.Keys == nil {
			break
		}

		return e.complexity.OpReturnMap.Keys(childComplexity), true

	case "OpReturnMap.type":
		if e.complexity.OpReturnMap.Type == nil {
			break
		}

		return e.complexity.OpReturnMap.Type(childComplexity), true

	case "PaymailAddress.alias":
		if e.complexity.PaymailAddress.Alias == nil {
			break
		}

		return e.complexity.PaymailAddress.Alias(childComplexity), true

	case "PaymailAddress.avatar":
		if e.complexity.PaymailAddress.Avatar == nil {
			break
		}

		return e.complexity.PaymailAddress.Avatar(childComplexity), true

	case "PaymailAddress.created_at":
		if e.complexity.PaymailAddress.CreatedAt == nil {
			break
		}

		return e.complexity.PaymailAddress.CreatedAt(childComplexity), true

	case "PaymailAddress.deleted_at":
		if e.complexity.PaymailAddress.DeletedAt == nil {
			break
		}

		return e.complexity.PaymailAddress.DeletedAt(childComplexity), true

	case "PaymailAddress.domain":
		if e.complexity.PaymailAddress.Domain == nil {
			break
		}

		return e.complexity.PaymailAddress.Domain(childComplexity), true

	case "PaymailAddress.id":
		if e.complexity.PaymailAddress.ID == nil {
			break
		}

		return e.complexity.PaymailAddress.ID(childComplexity), true

	case "PaymailAddress.public_name":
		if e.complexity.PaymailAddress.PublicName == nil {
			break
		}

		return e.complexity.PaymailAddress.PublicName(childComplexity), true

	case "PaymailAddress.updated_at":
		if e.complexity.PaymailAddress.UpdatedAt == nil {
			break
		}

		return e.complexity.PaymailAddress.UpdatedAt(childComplexity), true

	case "PaymailAddress.xpub_id":
		if e.complexity.PaymailAddress.XpubID == nil {
			break
		}

		return e.complexity.PaymailAddress.XpubID(childComplexity), true

	case "PaymailP4.alias":
		if e.complexity.PaymailP4.Alias == nil {
			break
		}

		return e.complexity.PaymailP4.Alias(childComplexity), true

	case "PaymailP4.domain":
		if e.complexity.PaymailP4.Domain == nil {
			break
		}

		return e.complexity.PaymailP4.Domain(childComplexity), true

	case "PaymailP4.from_paymail":
		if e.complexity.PaymailP4.FromPaymail == nil {
			break
		}

		return e.complexity.PaymailP4.FromPaymail(childComplexity), true

	case "PaymailP4.note":
		if e.complexity.PaymailP4.Note == nil {
			break
		}

		return e.complexity.PaymailP4.Note(childComplexity), true

	case "PaymailP4.pub_key":
		if e.complexity.PaymailP4.PubKey == nil {
			break
		}

		return e.complexity.PaymailP4.PubKey(childComplexity), true

	case "PaymailP4.receive_endpoint":
		if e.complexity.PaymailP4.ReceiveEndpoint == nil {
			break
		}

		return e.complexity.PaymailP4.ReceiveEndpoint(childComplexity), true

	case "PaymailP4.reference_id":
		if e.complexity.PaymailP4.ReferenceID == nil {
			break
		}

		return e.complexity.PaymailP4.ReferenceID(childComplexity), true

	case "PaymailP4.resolution_type":
		if e.complexity.PaymailP4.ResolutionType == nil {
			break
		}

		return e.complexity.PaymailP4.ResolutionType(childComplexity), true

	case "Query.access_key":
		if e.complexity.Query.AccessKey == nil {
			break
		}

		args, err := ec.field_Query_access_key_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccessKey(childComplexity, args["key"].(string)), true

	case "Query.access_keys":
		if e.complexity.Query.AccessKeys == nil {
			break
		}

		args, err := ec.field_Query_access_keys_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccessKeys(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.access_keys_count":
		if e.complexity.Query.AccessKeysCount == nil {
			break
		}

		args, err := ec.field_Query_access_keys_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccessKeysCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.admin_access_keys_count":
		if e.complexity.Query.AdminAccessKeysCount == nil {
			break
		}

		args, err := ec.field_Query_admin_access_keys_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminAccessKeysCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.admin_access_keys_list":
		if e.complexity.Query.AdminAccessKeysList == nil {
			break
		}

		args, err := ec.field_Query_admin_access_keys_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminAccessKeysList(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.admin_destinations_count":
		if e.complexity.Query.AdminDestinationsCount == nil {
			break
		}

		args, err := ec.field_Query_admin_destinations_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminDestinationsCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.admin_destinations_list":
		if e.complexity.Query.AdminDestinationsList == nil {
			break
		}

		args, err := ec.field_Query_admin_destinations_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminDestinationsList(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.admin_draft_transactions_count":
		if e.complexity.Query.AdminDraftTransactionsCount == nil {
			break
		}

		args, err := ec.field_Query_admin_draft_transactions_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminDraftTransactionsCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.admin_draft_transactions_list":
		if e.complexity.Query.AdminDraftTransactionsList == nil {
			break
		}

		args, err := ec.field_Query_admin_draft_transactions_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminDraftTransactionsList(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.admin_get_stats":
		if e.complexity.Query.AdminGetStats == nil {
			break
		}

		return e.complexity.Query.AdminGetStats(childComplexity), true

	case "Query.admin_get_status":
		if e.complexity.Query.AdminGetStatus == nil {
			break
		}

		return e.complexity.Query.AdminGetStatus(childComplexity), true

	case "Query.admin_paymail_get":
		if e.complexity.Query.AdminPaymailGet == nil {
			break
		}

		args, err := ec.field_Query_admin_paymail_get_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminPaymailGet(childComplexity, args["address"].(string)), true

	case "Query.admin_paymail_get_by_xpub_id":
		if e.complexity.Query.AdminPaymailGetByXpubID == nil {
			break
		}

		args, err := ec.field_Query_admin_paymail_get_by_xpub_id_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminPaymailGetByXpubID(childComplexity, args["xpub_id"].(string)), true

	case "Query.admin_paymails_count":
		if e.complexity.Query.AdminPaymailsCount == nil {
			break
		}

		args, err := ec.field_Query_admin_paymails_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminPaymailsCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.admin_paymails_list":
		if e.complexity.Query.AdminPaymailsList == nil {
			break
		}

		args, err := ec.field_Query_admin_paymails_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminPaymailsList(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.admin_transactions_count":
		if e.complexity.Query.AdminTransactionsCount == nil {
			break
		}

		args, err := ec.field_Query_admin_transactions_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTransactionsCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.admin_transactions_list":
		if e.complexity.Query.AdminTransactionsList == nil {
			break
		}

		args, err := ec.field_Query_admin_transactions_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminTransactionsList(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.admin_utxos_count":
		if e.complexity.Query.AdminUtxosCount == nil {
			break
		}

		args, err := ec.field_Query_admin_utxos_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminUtxosCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.admin_utxos_list":
		if e.complexity.Query.AdminUtxosList == nil {
			break
		}

		args, err := ec.field_Query_admin_utxos_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminUtxosList(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.admin_xpubs_count":
		if e.complexity.Query.AdminXpubsCount == nil {
			break
		}

		args, err := ec.field_Query_admin_xpubs_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminXpubsCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.admin_xpubs_list":
		if e.complexity.Query.AdminXpubsList == nil {
			break
		}

		args, err := ec.field_Query_admin_xpubs_list_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdminXpubsList(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.destination":
		if e.complexity.Query.Destination == nil {
			break
		}

		args, err := ec.field_Query_destination_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Destination(childComplexity, args["id"].(*string), args["address"].(*string), args["locking_script"].(*string)), true

	case "Query.destinations":
		if e.complexity.Query.Destinations == nil {
			break
		}

		args, err := ec.field_Query_destinations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Destinations(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.destinations_count":
		if e.complexity.Query.DestinationsCount == nil {
			break
		}

		args, err := ec.field_Query_destinations_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DestinationsCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.transaction":
		if e.complexity.Query.Transaction == nil {
			break
		}

		args, err := ec.field_Query_transaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Transaction(childComplexity, args["id"].(string)), true

	case "Query.transactions":
		if e.complexity.Query.Transactions == nil {
			break
		}

		args, err := ec.field_Query_transactions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Transactions(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.transactions_count":
		if e.complexity.Query.TransactionsCount == nil {
			break
		}

		args, err := ec.field_Query_transactions_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TransactionsCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.utxo":
		if e.complexity.Query.Utxo == nil {
			break
		}

		args, err := ec.field_Query_utxo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Utxo(childComplexity, args["tx_id"].(string), args["output_index"].(uint32)), true

	case "Query.utxos":
		if e.complexity.Query.Utxos == nil {
			break
		}

		args, err := ec.field_Query_utxos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Utxos(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{}), args["params"].(*datastore.QueryParams)), true

	case "Query.utxos_count":
		if e.complexity.Query.UtxosCount == nil {
			break
		}

		args, err := ec.field_Query_utxos_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UtxosCount(childComplexity, args["metadata"].(bux.Metadata), args["conditions"].(map[string]interface{})), true

	case "Query.xpub":
		if e.complexity.Query.Xpub == nil {
			break
		}

		return e.complexity.Query.Xpub(childComplexity), true

	case "ScriptOutput.address":
		if e.complexity.ScriptOutput.Address == nil {
			break
		}

		return e.complexity.ScriptOutput.Address(childComplexity), true

	case "ScriptOutput.satoshis":
		if e.complexity.ScriptOutput.Satoshis == nil {
			break
		}

		return e.complexity.ScriptOutput.Satoshis(childComplexity), true

	case "ScriptOutput.script":
		if e.complexity.ScriptOutput.Script == nil {
			break
		}

		return e.complexity.ScriptOutput.Script(childComplexity), true

	case "SyncConfig.broadcast":
		if e.complexity.SyncConfig.Broadcast == nil {
			break
		}

		return e.complexity.SyncConfig.Broadcast(childComplexity), true

	case "SyncConfig.broadcast_instant":
		if e.complexity.SyncConfig.BroadcastInstant == nil {
			break
		}

		return e.complexity.SyncConfig.BroadcastInstant(childComplexity), true

	case "SyncConfig.paymail_p2p":
		if e.complexity.SyncConfig.PaymailP2P == nil {
			break
		}

		return e.complexity.SyncConfig.PaymailP2P(childComplexity), true

	case "SyncConfig.sync_on_chain":
		if e.complexity.SyncConfig.SyncOnChain == nil {
			break
		}

		return e.complexity.SyncConfig.SyncOnChain(childComplexity), true

	case "Transaction.block_hash":
		if e.complexity.Transaction.BlockHash == nil {
			break
		}

		return e.complexity.Transaction.BlockHash(childComplexity), true

	case "Transaction.block_height":
		if e.complexity.Transaction.BlockHeight == nil {
			break
		}

		return e.complexity.Transaction.BlockHeight(childComplexity), true

	case "Transaction.created_at":
		if e.complexity.Transaction.CreatedAt == nil {
			break
		}

		return e.complexity.Transaction.CreatedAt(childComplexity), true

	case "Transaction.deleted_at":
		if e.complexity.Transaction.DeletedAt == nil {
			break
		}

		return e.complexity.Transaction.DeletedAt(childComplexity), true

	case "Transaction.direction":
		if e.complexity.Transaction.Direction == nil {
			break
		}

		return e.complexity.Transaction.Direction(childComplexity), true

	case "Transaction.fee":
		if e.complexity.Transaction.Fee == nil {
			break
		}

		return e.complexity.Transaction.Fee(childComplexity), true

	case "Transaction.hex":
		if e.complexity.Transaction.Hex == nil {
			break
		}

		return e.complexity.Transaction.Hex(childComplexity), true

	case "Transaction.id":
		if e.complexity.Transaction.ID == nil {
			break
		}

		return e.complexity.Transaction.ID(childComplexity), true

	case "Transaction.metadata":
		if e.complexity.Transaction.Metadata == nil {
			break
		}

		return e.complexity.Transaction.Metadata(childComplexity), true

	case "Transaction.number_of_inputs":
		if e.complexity.Transaction.NumberOfInputs == nil {
			break
		}

		return e.complexity.Transaction.NumberOfInputs(childComplexity), true

	case "Transaction.number_of_outputs":
		if e.complexity.Transaction.NumberOfOutputs == nil {
			break
		}

		return e.complexity.Transaction.NumberOfOutputs(childComplexity), true

	case "Transaction.output_value":
		if e.complexity.Transaction.OutputValue == nil {
			break
		}

		return e.complexity.Transaction.OutputValue(childComplexity), true

	case "Transaction.total_value":
		if e.complexity.Transaction.TotalValue == nil {
			break
		}

		return e.complexity.Transaction.TotalValue(childComplexity), true

	case "Transaction.updated_at":
		if e.complexity.Transaction.UpdatedAt == nil {
			break
		}

		return e.complexity.Transaction.UpdatedAt(childComplexity), true

	case "TransactionConfig.change_destinations":
		if e.complexity.TransactionConfig.ChangeDestinations == nil {
			break
		}

		return e.complexity.TransactionConfig.ChangeDestinations(childComplexity), true

	case "TransactionConfig.change_destinations_strategy":
		if e.complexity.TransactionConfig.ChangeDestinationsStrategy == nil {
			break
		}

		return e.complexity.TransactionConfig.ChangeDestinationsStrategy(childComplexity), true

	case "TransactionConfig.change_minimum_satoshis":
		if e.complexity.TransactionConfig.ChangeMinimumSatoshis == nil {
			break
		}

		return e.complexity.TransactionConfig.ChangeMinimumSatoshis(childComplexity), true

	case "TransactionConfig.change_number_of_destinations":
		if e.complexity.TransactionConfig.ChangeNumberOfDestinations == nil {
			break
		}

		return e.complexity.TransactionConfig.ChangeNumberOfDestinations(childComplexity), true

	case "TransactionConfig.change_satoshis":
		if e.complexity.TransactionConfig.ChangeSatoshis == nil {
			break
		}

		return e.complexity.TransactionConfig.ChangeSatoshis(childComplexity), true

	case "TransactionConfig.fee":
		if e.complexity.TransactionConfig.Fee == nil {
			break
		}

		return e.complexity.TransactionConfig.Fee(childComplexity), true

	case "TransactionConfig.fee_unit":
		if e.complexity.TransactionConfig.FeeUnit == nil {
			break
		}

		return e.complexity.TransactionConfig.FeeUnit(childComplexity), true

	case "TransactionConfig.inputs":
		if e.complexity.TransactionConfig.Inputs == nil {
			break
		}

		return e.complexity.TransactionConfig.Inputs(childComplexity), true

	case "TransactionConfig.outputs":
		if e.complexity.TransactionConfig.Outputs == nil {
			break
		}

		return e.complexity.TransactionConfig.Outputs(childComplexity), true

	case "TransactionConfig.sync":
		if e.complexity.TransactionConfig.Sync == nil {
			break
		}

		return e.complexity.TransactionConfig.Sync(childComplexity), true

	case "TransactionInput.destination":
		if e.complexity.TransactionInput.Destination == nil {
			break
		}

		return e.complexity.TransactionInput.Destination(childComplexity), true

	case "TransactionInput.draft_id":
		if e.complexity.TransactionInput.DraftID == nil {
			break
		}

		return e.complexity.TransactionInput.DraftID(childComplexity), true

	case "TransactionInput.id":
		if e.complexity.TransactionInput.ID == nil {
			break
		}

		return e.complexity.TransactionInput.ID(childComplexity), true

	case "TransactionInput.output_index":
		if e.complexity.TransactionInput.OutputIndex == nil {
			break
		}

		return e.complexity.TransactionInput.OutputIndex(childComplexity), true

	case "TransactionInput.reserved_at":
		if e.complexity.TransactionInput.ReservedAt == nil {
			break
		}

		return e.complexity.TransactionInput.ReservedAt(childComplexity), true

	case "TransactionInput.satoshis":
		if e.complexity.TransactionInput.Satoshis == nil {
			break
		}

		return e.complexity.TransactionInput.Satoshis(childComplexity), true

	case "TransactionInput.script_pub_key":
		if e.complexity.TransactionInput.ScriptPubKey == nil {
			break
		}

		return e.complexity.TransactionInput.ScriptPubKey(childComplexity), true

	case "TransactionInput.spending_tx_id":
		if e.complexity.TransactionInput.SpendingTxID == nil {
			break
		}

		return e.complexity.TransactionInput.SpendingTxID(childComplexity), true

	case "TransactionInput.transaction_id":
		if e.complexity.TransactionInput.TransactionID == nil {
			break
		}

		return e.complexity.TransactionInput.TransactionID(childComplexity), true

	case "TransactionInput.type":
		if e.complexity.TransactionInput.Type == nil {
			break
		}

		return e.complexity.TransactionInput.Type(childComplexity), true

	case "TransactionInput.xpub_id":
		if e.complexity.TransactionInput.XpubID == nil {
			break
		}

		return e.complexity.TransactionInput.XpubID(childComplexity), true

	case "TransactionOutput.op_return":
		if e.complexity.TransactionOutput.OpReturn == nil {
			break
		}

		return e.complexity.TransactionOutput.OpReturn(childComplexity), true

	case "TransactionOutput.paymail_p4":
		if e.complexity.TransactionOutput.PaymailP4 == nil {
			break
		}

		return e.complexity.TransactionOutput.PaymailP4(childComplexity), true

	case "TransactionOutput.satoshis":
		if e.complexity.TransactionOutput.Satoshis == nil {
			break
		}

		return e.complexity.TransactionOutput.Satoshis(childComplexity), true

	case "TransactionOutput.scripts":
		if e.complexity.TransactionOutput.Scripts == nil {
			break
		}

		return e.complexity.TransactionOutput.Scripts(childComplexity), true

	case "TransactionOutput.to":
		if e.complexity.TransactionOutput.To == nil {
			break
		}

		return e.complexity.TransactionOutput.To(childComplexity), true

	case "Utxo.created_at":
		if e.complexity.Utxo.CreatedAt == nil {
			break
		}

		return e.complexity.Utxo.CreatedAt(childComplexity), true

	case "Utxo.deleted_at":
		if e.complexity.Utxo.DeletedAt == nil {
			break
		}

		return e.complexity.Utxo.DeletedAt(childComplexity), true

	case "Utxo.draft_id":
		if e.complexity.Utxo.DraftID == nil {
			break
		}

		return e.complexity.Utxo.DraftID(childComplexity), true

	case "Utxo.id":
		if e.complexity.Utxo.ID == nil {
			break
		}

		return e.complexity.Utxo.ID(childComplexity), true

	case "Utxo.metadata":
		if e.complexity.Utxo.Metadata == nil {
			break
		}

		return e.complexity.Utxo.Metadata(childComplexity), true

	case "Utxo.output_index":
		if e.complexity.Utxo.OutputIndex == nil {
			break
		}

		return e.complexity.Utxo.OutputIndex(childComplexity), true

	case "Utxo.reserved_at":
		if e.complexity.Utxo.ReservedAt == nil {
			break
		}

		return e.complexity.Utxo.ReservedAt(childComplexity), true

	case "Utxo.satoshis":
		if e.complexity.Utxo.Satoshis == nil {
			break
		}

		return e.complexity.Utxo.Satoshis(childComplexity), true

	case "Utxo.script_pub_key":
		if e.complexity.Utxo.ScriptPubKey == nil {
			break
		}

		return e.complexity.Utxo.ScriptPubKey(childComplexity), true

	case "Utxo.spending_tx_id":
		if e.complexity.Utxo.SpendingTxID == nil {
			break
		}

		return e.complexity.Utxo.SpendingTxID(childComplexity), true

	case "Utxo.transaction":
		if e.complexity.Utxo.Transaction == nil {
			break
		}

		return e.complexity.Utxo.Transaction(childComplexity), true

	case "Utxo.transaction_id":
		if e.complexity.Utxo.TransactionID == nil {
			break
		}

		return e.complexity.Utxo.TransactionID(childComplexity), true

	case "Utxo.type":
		if e.complexity.Utxo.Type == nil {
			break
		}

		return e.complexity.Utxo.Type(childComplexity), true

	case "Utxo.updated_at":
		if e.complexity.Utxo.UpdatedAt == nil {
			break
		}

		return e.complexity.Utxo.UpdatedAt(childComplexity), true

	case "Utxo.xpub_id":
		if e.complexity.Utxo.XpubID == nil {
			break
		}

		return e.complexity.Utxo.XpubID(childComplexity), true

	case "Xpub.created_at":
		if e.complexity.Xpub.CreatedAt == nil {
			break
		}

		return e.complexity.Xpub.CreatedAt(childComplexity), true

	case "Xpub.current_balance":
		if e.complexity.Xpub.CurrentBalance == nil {
			break
		}

		return e.complexity.Xpub.CurrentBalance(childComplexity), true

	case "Xpub.deleted_at":
		if e.complexity.Xpub.DeletedAt == nil {
			break
		}

		return e.complexity.Xpub.DeletedAt(childComplexity), true

	case "Xpub.id":
		if e.complexity.Xpub.ID == nil {
			break
		}

		return e.complexity.Xpub.ID(childComplexity), true

	case "Xpub.metadata":
		if e.complexity.Xpub.Metadata == nil {
			break
		}

		return e.complexity.Xpub.Metadata(childComplexity), true

	case "Xpub.next_external_num":
		if e.complexity.Xpub.NextExternalNum == nil {
			break
		}

		return e.complexity.Xpub.NextExternalNum(childComplexity), true

	case "Xpub.next_internal_num":
		if e.complexity.Xpub.NextInternalNum == nil {
			break
		}

		return e.complexity.Xpub.NextInternalNum(childComplexity), true

	case "Xpub.updated_at":
		if e.complexity.Xpub.UpdatedAt == nil {
			break
		}

		return e.complexity.Xpub.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputDestinationInput,
		ec.unmarshalInputFeeUnitInput,
		ec.unmarshalInputOpReturnInput,
		ec.unmarshalInputOpReturnMapInput,
		ec.unmarshalInputScriptOutputInput,
		ec.unmarshalInputSyncConfigInput,
		ec.unmarshalInputTransactionConfigInput,
		ec.unmarshalInputTransactionOutputInput,
		ec.unmarshalInputUtxoPointer,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../admin.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type AdminStats {
    balance:              Int64
    destinations:         Int64
    paymail_addresses:    Int64
    transactions:         Int64
    transactions_per_day: Map
    utxos:                Int64
    utxos_per_type:       Map
    xpubs:                Int64
}

extend type Query {
    admin_get_status: Boolean
    admin_get_stats: AdminStats
    admin_access_keys_list (
        metadata: Metadata
        conditions: Map
        params: QueryParams
    ): [AccessKey]
    admin_access_keys_count (
        metadata: Metadata
        conditions: Map
    ): Int64
    admin_destinations_list (
        metadata: Metadata
        conditions: Map
        params: QueryParams
    ): [Destination]
    admin_destinations_count (
        metadata: Metadata
        conditions: Map
    ): Int64
    admin_draft_transactions_list (
        metadata: Metadata
        conditions: Map
        params: QueryParams
    ): [DraftTransaction]
    admin_draft_transactions_count (
        metadata: Metadata
        conditions: Map
    ): Int64
    admin_paymail_get (
        address: String!
    ): PaymailAddress
    admin_paymail_get_by_xpub_id (
        xpub_id: String!
    ): [PaymailAddress]
    admin_paymails_list (
        metadata: Metadata
        conditions: Map
        params: QueryParams
    ): [PaymailAddress]
    admin_paymails_count (
        metadata: Metadata
        conditions: Map
    ): Int64
    admin_transactions_list (
        metadata: Metadata
        conditions: Map
        params: QueryParams
    ): [Transaction]
    admin_transactions_count (
        metadata: Metadata
        conditions: Map
    ): Int64
    admin_utxos_list (
        metadata: Metadata
        conditions: Map
        params: QueryParams
    ): [Utxo]
    admin_utxos_count (
        metadata: Metadata
        conditions: Map
    ): Int64
    admin_xpubs_list (
        metadata: Metadata
        conditions: Map
        params: QueryParams
    ): [Xpub]
    admin_xpubs_count (
        metadata: Metadata
        conditions: Map
    ): Int64
}

extend type Mutation {
    admin_paymail_create (
        xpub: String!
        address: String!
        public_name: String
        avatar: String
        metadata: Metadata
    ): PaymailAddress
    admin_paymail_delete (
        address: String!
    ): Boolean!
    admin_transaction(
        hex: String!,
    ): Transaction
}
`, BuiltIn: false},
	{Name: "../schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar NullBool
scalar NullTime
scalar NullString
scalar Uint
scalar Uint32
scalar Uint64
scalar Int16
scalar Int32
scalar Int64
scalar Map
scalar Metadata
scalar DraftStatus
scalar ChangeStrategy
scalar QueryParams
scalar TransactionDirection

type AccessKey {
    id:         String
    xpub_id:    String
    key:        String
    metadata:   Metadata
    created_at: Time
    updated_at: Time
    deleted_at: NullTime
    revoked_at: NullTime
}

type Xpub {
    id:                String
    current_balance:   Uint64
    next_internal_num: Uint32
    next_external_num: Uint32
    metadata:          Metadata
    created_at:        Time
    updated_at:        Time
    deleted_at:        NullTime
}

type Destination {
    id:             String
    xpub_id:        String
    locking_script: String
    type:           String
    chain:          Uint32
    num:            Uint32
    address:        String
    draft_id:       String
    metadata:       Metadata
    created_at:     Time
    updated_at:     Time
    deleted_at:     NullTime
}

type Transaction {
    id:                String
    hex:               String
    block_hash:        String
    block_height:      Uint64
    fee:               Uint64
    number_of_inputs:  Uint32
    number_of_outputs: Uint32
    total_value:       Uint64
    metadata:          Metadata
    output_value:      Int64
    direction:         TransactionDirection
    created_at:        Time
    updated_at:        Time
    deleted_at:        NullTime
}

type PaymailAddress {
    id:          String
    xpub_id:     String
    alias:       String
    domain:      String
    public_name: String
    avatar:      String
    created_at:  Time
    updated_at:  Time
    deleted_at:  NullTime
}

type PaymailP4 {
    alias:            String
    domain:           String
    from_paymail:     String
    note:             String
    pub_key:          String
    receive_endpoint: String
    reference_id:     String
    resolution_type:  String
}

type OpReturnMap {
    app:  String
    type: String
    keys: Map
}

type OpReturn {
    hex:          String
    hex_parts:    [String]
    string_parts: [String]
    map:          OpReturnMap
}

type TransactionOutput {
    paymail_p4: PaymailP4
    satoshis:   Uint64
    scripts:    [ScriptOutput]
    to:         String
    op_return:  OpReturn
}

type Utxo {
    id:             String
    transaction_id: String
    xpub_id:        String
    output_index:   Uint32
    satoshis:       Uint64
    script_pub_key: String
    type:           String
    draft_id:       NullString
    reserved_at:    NullTime
    spending_tx_id: NullString
    metadata:       Metadata
    transaction:    Transaction # originating transaction, this is needed to spend the utxo
    created_at:     Time
    updated_at:     Time
    deleted_at:     NullTime
}

type DraftTransaction {
    id:            String
    xpub_id:       String
    expires_at:    Time
    configuration: TransactionConfig
    status:        DraftStatus
    hex:           String
    metadata:      Metadata
    created_at:    Time
    updated_at:    Time
    deleted_at:    NullTime
}

type TransactionInput {
    id:             String
    transaction_id: String
    xpub_id:        String
    output_index:   Uint32
    satoshis:       Uint64
    script_pub_key: String
    type:           String
    draft_id:       NullString
    reserved_at:    NullTime
    spending_tx_id: NullString
    destination:    Destination
}

type FeeUnit {
    satoshis: Int
    bytes:    Int
}

type TransactionConfig {
    change_destinations:           [Destination]
    change_satoshis:               Uint64
    change_destinations_strategy:  ChangeStrategy
    change_number_of_destinations: Int
    change_minimum_satoshis:       Uint64
    fee_unit:                      FeeUnit
    fee:                           Uint64
    inputs:                        [TransactionInput]
    outputs:                       [TransactionOutput]
    sync:                          SyncConfig
}

type SyncConfig {
    broadcast: Boolean
    broadcast_instant: Boolean
    paymail_p2p: Boolean
    sync_on_chain: Boolean
}

type ScriptOutput {
    address:  String
    satoshis: Uint64
    script:   String
}

input OpReturnMapInput {
    app:  String
    type: String
    keys: Map
}

input OpReturnInput {
    hex:          String
    hex_parts:    [String]
    string_parts: [String]
    map:          OpReturnMapInput
}

input ScriptOutputInput {
    address:  String
    satoshis: Uint64
    script:   String
}

input TransactionOutputInput {
    to:        String
    satoshis:  Uint64
    scripts:    [ScriptOutputInput]
    op_return:  OpReturnInput
}

input UtxoPointer {
    transaction_id: String
    output_index:   Uint32
}

input DestinationInput {
    id:             String
    xpub_id:        String
    locking_script: String
    type:           String
    chain:          Uint32
    num:            Uint32
    address:        String
    draft_id:       String
    metadata:       Metadata
    created_at:     Time
    updated_at:     Time
    deleted_at:     NullTime
}

input FeeUnitInput {
    satoshis: Int
    bytes:    Int
}

input SyncConfigInput {
    broadcast: Boolean
    broadcast_instant: Boolean
    paymail_p2p: Boolean
    sync_on_chain: Boolean
}

input TransactionConfigInput {
    change_satoshis:               Uint64
    change_destinations:           [DestinationInput]
    change_destinations_strategy:  ChangeStrategy
    change_number_of_destinations: Int
    change_minimum_satoshis:       Uint64
    include_utxos:                 [UtxoPointer]
    inputs:                        [Map]
    expires_in:                    Uint64
    fee:                           Uint64
    fee_unit:                      FeeUnitInput
    from_utxos:                    [UtxoPointer]
    outputs:                       [TransactionOutputInput]
    send_all_to:                   TransactionOutputInput
    sync:                          SyncConfigInput
}

type Query {
    xpub: Xpub
    access_key(
        key: String!
    ): AccessKey
    access_keys(
        metadata: Metadata,
        conditions: Map,
        params: QueryParams
    ): [AccessKey]
    access_keys_count(
        metadata: Metadata
        conditions: Map,
    ): Int64
    transaction(
        id: String!
    ): Transaction
    transactions(
        metadata: Metadata
        conditions: Map,
        params: QueryParams
    ): [Transaction]
    transactions_count(
        metadata: Metadata
        conditions: Map,
    ): Int64
    destination(
        id: String
        address: String
        locking_script: String
    ): Destination
    destinations(
        metadata: Metadata,
        conditions: Map,
        params: QueryParams
    ): [Destination]
    destinations_count(
        metadata: Metadata
        conditions: Map,
    ): Int64
    utxo (
        tx_id: String!
        output_index: Uint32!
    ): Utxo
    utxos (
        metadata: Metadata,
        conditions: Map,
        params: QueryParams
    ): [Utxo]
    utxos_count (
        metadata: Metadata
        conditions: Map,
    ): Int64
}

type Mutation {
    xpub(
        xpub: String!,
        metadata: Metadata
    ): Xpub
    xpub_metadata(
        metadata: Metadata!
    ): Xpub
    access_key(
        metadata: Metadata
    ): AccessKey
    access_key_revoke(
        id: String
    ): AccessKey
    transaction(
        hex: String!,
        draft_id: String,
        metadata: Metadata
    ): Transaction
    transaction_metadata(
        id: String!
        metadata: Metadata!
    ): Transaction
    new_transaction(
        transaction_config: TransactionConfigInput!,
        metadata: Metadata
    ): DraftTransaction
    destination(
        destination_type: String,
        metadata: Metadata
    ): Destination
    destination_metadata(
        id: String
        address: String
        locking_script: String
        metadata: Metadata!
    ): Destination
    utxos_unreserve(
        draft_id: String!,
    ): Boolean
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_access_key_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_access_key_revoke_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_admin_paymail_create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["xpub"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xpub"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["xpub"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["public_name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("public_name"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["public_name"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["avatar"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatar"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["avatar"] = arg3
	var arg4 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg4, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_admin_paymail_delete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_admin_transaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["hex"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hex"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hex"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_destination_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["destination_type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destination_type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destination_type"] = arg0
	var arg1 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg1, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_destination_metadata_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["locking_script"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locking_script"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locking_script"] = arg2
	var arg3 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg3, err = ec.unmarshalNMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_new_transaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.TransactionConfig
	if tmp, ok := rawArgs["transaction_config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_config"))
		arg0, err = ec.unmarshalNTransactionConfigInput2githubᚗcomᚋBuxOrgᚋbuxᚐTransactionConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["transaction_config"] = arg0
	var arg1 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg1, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_transaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["hex"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hex"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hex"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["draft_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("draft_id"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["draft_id"] = arg1
	var arg2 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg2, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_transaction_metadata_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg1, err = ec.unmarshalNMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_utxos_unreserve_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["draft_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("draft_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["draft_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_xpub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["xpub"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xpub"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["xpub"] = arg0
	var arg1 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg1, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_xpub_metadata_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalNMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_access_key_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_access_keys_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_access_keys_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_admin_access_keys_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_admin_access_keys_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_admin_destinations_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_admin_destinations_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_admin_draft_transactions_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_admin_draft_transactions_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_admin_paymail_get_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_admin_paymail_get_by_xpub_id_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["xpub_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xpub_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["xpub_id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_admin_paymails_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_admin_paymails_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_admin_transactions_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_admin_transactions_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_admin_utxos_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_admin_utxos_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_admin_xpubs_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_admin_xpubs_list_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_destination_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["locking_script"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locking_script"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locking_script"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_destinations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_destinations_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_transaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_transactions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_transactions_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_utxo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["tx_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tx_id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tx_id"] = arg0
	var arg1 uint32
	if tmp, ok := rawArgs["output_index"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("output_index"))
		arg1, err = ec.unmarshalNUint322uint32(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["output_index"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_utxos_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	var arg2 *datastore.QueryParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_utxos_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bux.Metadata
	if tmp, ok := rawArgs["metadata"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
		arg0, err = ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metadata"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["conditions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditions"))
		arg1, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conditions"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AccessKey_id(ctx context.Context, field graphql.CollectedField, obj *bux.AccessKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessKey_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessKey_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessKey_xpub_id(ctx context.Context, field graphql.CollectedField, obj *bux.AccessKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessKey_xpub_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XpubID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessKey_xpub_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessKey_key(ctx context.Context, field graphql.CollectedField, obj *bux.AccessKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessKey_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessKey_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessKey_metadata(ctx context.Context, field graphql.CollectedField, obj *bux.AccessKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessKey_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.Metadata)
	fc.Result = res
	return ec.marshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessKey_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Metadata does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessKey_created_at(ctx context.Context, field graphql.CollectedField, obj *bux.AccessKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessKey_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessKey_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessKey_updated_at(ctx context.Context, field graphql.CollectedField, obj *bux.AccessKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessKey_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessKey_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessKey_deleted_at(ctx context.Context, field graphql.CollectedField, obj *bux.AccessKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessKey_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessKey_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessKey_revoked_at(ctx context.Context, field graphql.CollectedField, obj *bux.AccessKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessKey_revoked_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevokedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessKey_revoked_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminStats_balance(ctx context.Context, field graphql.CollectedField, obj *bux.AdminStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminStats_balance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminStats_balance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminStats_destinations(ctx context.Context, field graphql.CollectedField, obj *bux.AdminStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminStats_destinations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destinations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminStats_destinations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminStats_paymail_addresses(ctx context.Context, field graphql.CollectedField, obj *bux.AdminStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminStats_paymail_addresses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymailAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminStats_paymail_addresses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminStats_transactions(ctx context.Context, field graphql.CollectedField, obj *bux.AdminStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminStats_transactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transactions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminStats_transactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminStats_transactions_per_day(ctx context.Context, field graphql.CollectedField, obj *bux.AdminStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminStats_transactions_per_day(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionsPerDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminStats_transactions_per_day(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminStats_utxos(ctx context.Context, field graphql.CollectedField, obj *bux.AdminStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminStats_utxos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Utxos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminStats_utxos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminStats_utxos_per_type(ctx context.Context, field graphql.CollectedField, obj *bux.AdminStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminStats_utxos_per_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UtxosPerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminStats_utxos_per_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminStats_xpubs(ctx context.Context, field graphql.CollectedField, obj *bux.AdminStats) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminStats_xpubs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XPubs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminStats_xpubs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_id(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_xpub_id(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_xpub_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XpubID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_xpub_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_locking_script(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_locking_script(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LockingScript, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_locking_script(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_type(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_chain(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_chain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalOUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_chain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_num(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_num(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Num, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalOUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_num(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_address(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_draft_id(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_draft_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DraftID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_draft_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_metadata(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.Metadata)
	fc.Result = res
	return ec.marshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Metadata does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_created_at(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_updated_at(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Destination_deleted_at(ctx context.Context, field graphql.CollectedField, obj *bux.Destination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Destination_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Destination_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Destination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_id(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_xpub_id(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_xpub_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XpubID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_xpub_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_expires_at(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_expires_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_expires_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_configuration(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_configuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Configuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.TransactionConfig)
	fc.Result = res
	return ec.marshalOTransactionConfig2githubᚗcomᚋBuxOrgᚋbuxᚐTransactionConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_configuration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "change_destinations":
				return ec.fieldContext_TransactionConfig_change_destinations(ctx, field)
			case "change_satoshis":
				return ec.fieldContext_TransactionConfig_change_satoshis(ctx, field)
			case "change_destinations_strategy":
				return ec.fieldContext_TransactionConfig_change_destinations_strategy(ctx, field)
			case "change_number_of_destinations":
				return ec.fieldContext_TransactionConfig_change_number_of_destinations(ctx, field)
			case "change_minimum_satoshis":
				return ec.fieldContext_TransactionConfig_change_minimum_satoshis(ctx, field)
			case "fee_unit":
				return ec.fieldContext_TransactionConfig_fee_unit(ctx, field)
			case "fee":
				return ec.fieldContext_TransactionConfig_fee(ctx, field)
			case "inputs":
				return ec.fieldContext_TransactionConfig_inputs(ctx, field)
			case "outputs":
				return ec.fieldContext_TransactionConfig_outputs(ctx, field)
			case "sync":
				return ec.fieldContext_TransactionConfig_sync(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_status(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.DraftStatus)
	fc.Result = res
	return ec.marshalODraftStatus2githubᚗcomᚋBuxOrgᚋbuxᚐDraftStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DraftStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_hex(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_hex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_hex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_metadata(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.Metadata)
	fc.Result = res
	return ec.marshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Metadata does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_created_at(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_updated_at(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DraftTransaction_deleted_at(ctx context.Context, field graphql.CollectedField, obj *bux.DraftTransaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DraftTransaction_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DraftTransaction_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DraftTransaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeeUnit_satoshis(ctx context.Context, field graphql.CollectedField, obj *utils.FeeUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeeUnit_satoshis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Satoshis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeeUnit_satoshis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeeUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeeUnit_bytes(ctx context.Context, field graphql.CollectedField, obj *utils.FeeUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeeUnit_bytes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bytes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeeUnit_bytes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeeUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_xpub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_xpub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Xpub(rctx, fc.Args["xpub"].(string), fc.Args["metadata"].(bux.Metadata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Xpub)
	fc.Result = res
	return ec.marshalOXpub2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐXpub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_xpub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Xpub_id(ctx, field)
			case "current_balance":
				return ec.fieldContext_Xpub_current_balance(ctx, field)
			case "next_internal_num":
				return ec.fieldContext_Xpub_next_internal_num(ctx, field)
			case "next_external_num":
				return ec.fieldContext_Xpub_next_external_num(ctx, field)
			case "metadata":
				return ec.fieldContext_Xpub_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Xpub_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Xpub_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Xpub_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Xpub", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_xpub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_xpub_metadata(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_xpub_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().XpubMetadata(rctx, fc.Args["metadata"].(bux.Metadata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Xpub)
	fc.Result = res
	return ec.marshalOXpub2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐXpub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_xpub_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Xpub_id(ctx, field)
			case "current_balance":
				return ec.fieldContext_Xpub_current_balance(ctx, field)
			case "next_internal_num":
				return ec.fieldContext_Xpub_next_internal_num(ctx, field)
			case "next_external_num":
				return ec.fieldContext_Xpub_next_external_num(ctx, field)
			case "metadata":
				return ec.fieldContext_Xpub_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Xpub_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Xpub_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Xpub_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Xpub", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_xpub_metadata_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_access_key(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_access_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AccessKey(rctx, fc.Args["metadata"].(bux.Metadata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.AccessKey)
	fc.Result = res
	return ec.marshalOAccessKey2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAccessKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_access_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccessKey_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_AccessKey_xpub_id(ctx, field)
			case "key":
				return ec.fieldContext_AccessKey_key(ctx, field)
			case "metadata":
				return ec.fieldContext_AccessKey_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_AccessKey_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_AccessKey_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_AccessKey_deleted_at(ctx, field)
			case "revoked_at":
				return ec.fieldContext_AccessKey_revoked_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccessKey", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_access_key_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_access_key_revoke(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_access_key_revoke(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AccessKeyRevoke(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.AccessKey)
	fc.Result = res
	return ec.marshalOAccessKey2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAccessKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_access_key_revoke(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccessKey_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_AccessKey_xpub_id(ctx, field)
			case "key":
				return ec.fieldContext_AccessKey_key(ctx, field)
			case "metadata":
				return ec.fieldContext_AccessKey_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_AccessKey_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_AccessKey_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_AccessKey_deleted_at(ctx, field)
			case "revoked_at":
				return ec.fieldContext_AccessKey_revoked_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccessKey", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_access_key_revoke_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_transaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_transaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Transaction(rctx, fc.Args["hex"].(string), fc.Args["draft_id"].(*string), fc.Args["metadata"].(bux.Metadata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Transaction)
	fc.Result = res
	return ec.marshalOTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_transaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transaction_id(ctx, field)
			case "hex":
				return ec.fieldContext_Transaction_hex(ctx, field)
			case "block_hash":
				return ec.fieldContext_Transaction_block_hash(ctx, field)
			case "block_height":
				return ec.fieldContext_Transaction_block_height(ctx, field)
			case "fee":
				return ec.fieldContext_Transaction_fee(ctx, field)
			case "number_of_inputs":
				return ec.fieldContext_Transaction_number_of_inputs(ctx, field)
			case "number_of_outputs":
				return ec.fieldContext_Transaction_number_of_outputs(ctx, field)
			case "total_value":
				return ec.fieldContext_Transaction_total_value(ctx, field)
			case "metadata":
				return ec.fieldContext_Transaction_metadata(ctx, field)
			case "output_value":
				return ec.fieldContext_Transaction_output_value(ctx, field)
			case "direction":
				return ec.fieldContext_Transaction_direction(ctx, field)
			case "created_at":
				return ec.fieldContext_Transaction_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Transaction_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Transaction_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_transaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_transaction_metadata(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_transaction_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TransactionMetadata(rctx, fc.Args["id"].(string), fc.Args["metadata"].(bux.Metadata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Transaction)
	fc.Result = res
	return ec.marshalOTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_transaction_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transaction_id(ctx, field)
			case "hex":
				return ec.fieldContext_Transaction_hex(ctx, field)
			case "block_hash":
				return ec.fieldContext_Transaction_block_hash(ctx, field)
			case "block_height":
				return ec.fieldContext_Transaction_block_height(ctx, field)
			case "fee":
				return ec.fieldContext_Transaction_fee(ctx, field)
			case "number_of_inputs":
				return ec.fieldContext_Transaction_number_of_inputs(ctx, field)
			case "number_of_outputs":
				return ec.fieldContext_Transaction_number_of_outputs(ctx, field)
			case "total_value":
				return ec.fieldContext_Transaction_total_value(ctx, field)
			case "metadata":
				return ec.fieldContext_Transaction_metadata(ctx, field)
			case "output_value":
				return ec.fieldContext_Transaction_output_value(ctx, field)
			case "direction":
				return ec.fieldContext_Transaction_direction(ctx, field)
			case "created_at":
				return ec.fieldContext_Transaction_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Transaction_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Transaction_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_transaction_metadata_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_new_transaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_new_transaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewTransaction(rctx, fc.Args["transaction_config"].(bux.TransactionConfig), fc.Args["metadata"].(bux.Metadata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.DraftTransaction)
	fc.Result = res
	return ec.marshalODraftTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDraftTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_new_transaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DraftTransaction_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_DraftTransaction_xpub_id(ctx, field)
			case "expires_at":
				return ec.fieldContext_DraftTransaction_expires_at(ctx, field)
			case "configuration":
				return ec.fieldContext_DraftTransaction_configuration(ctx, field)
			case "status":
				return ec.fieldContext_DraftTransaction_status(ctx, field)
			case "hex":
				return ec.fieldContext_DraftTransaction_hex(ctx, field)
			case "metadata":
				return ec.fieldContext_DraftTransaction_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_DraftTransaction_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_DraftTransaction_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_DraftTransaction_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DraftTransaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_new_transaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_destination(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_destination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Destination(rctx, fc.Args["destination_type"].(*string), fc.Args["metadata"].(bux.Metadata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_destination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Destination_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Destination_xpub_id(ctx, field)
			case "locking_script":
				return ec.fieldContext_Destination_locking_script(ctx, field)
			case "type":
				return ec.fieldContext_Destination_type(ctx, field)
			case "chain":
				return ec.fieldContext_Destination_chain(ctx, field)
			case "num":
				return ec.fieldContext_Destination_num(ctx, field)
			case "address":
				return ec.fieldContext_Destination_address(ctx, field)
			case "draft_id":
				return ec.fieldContext_Destination_draft_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Destination_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Destination_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Destination_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Destination_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Destination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_destination_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_destination_metadata(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_destination_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DestinationMetadata(rctx, fc.Args["id"].(*string), fc.Args["address"].(*string), fc.Args["locking_script"].(*string), fc.Args["metadata"].(bux.Metadata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_destination_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Destination_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Destination_xpub_id(ctx, field)
			case "locking_script":
				return ec.fieldContext_Destination_locking_script(ctx, field)
			case "type":
				return ec.fieldContext_Destination_type(ctx, field)
			case "chain":
				return ec.fieldContext_Destination_chain(ctx, field)
			case "num":
				return ec.fieldContext_Destination_num(ctx, field)
			case "address":
				return ec.fieldContext_Destination_address(ctx, field)
			case "draft_id":
				return ec.fieldContext_Destination_draft_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Destination_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Destination_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Destination_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Destination_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Destination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_destination_metadata_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_utxos_unreserve(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_utxos_unreserve(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UtxosUnreserve(rctx, fc.Args["draft_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_utxos_unreserve(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_utxos_unreserve_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_admin_paymail_create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_admin_paymail_create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AdminPaymailCreate(rctx, fc.Args["xpub"].(string), fc.Args["address"].(string), fc.Args["public_name"].(*string), fc.Args["avatar"].(*string), fc.Args["metadata"].(bux.Metadata))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.PaymailAddress)
	fc.Result = res
	return ec.marshalOPaymailAddress2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐPaymailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_admin_paymail_create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PaymailAddress_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_PaymailAddress_xpub_id(ctx, field)
			case "alias":
				return ec.fieldContext_PaymailAddress_alias(ctx, field)
			case "domain":
				return ec.fieldContext_PaymailAddress_domain(ctx, field)
			case "public_name":
				return ec.fieldContext_PaymailAddress_public_name(ctx, field)
			case "avatar":
				return ec.fieldContext_PaymailAddress_avatar(ctx, field)
			case "created_at":
				return ec.fieldContext_PaymailAddress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_PaymailAddress_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_PaymailAddress_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymailAddress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_admin_paymail_create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_admin_paymail_delete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_admin_paymail_delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AdminPaymailDelete(rctx, fc.Args["address"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_admin_paymail_delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_admin_paymail_delete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_admin_transaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_admin_transaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AdminTransaction(rctx, fc.Args["hex"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Transaction)
	fc.Result = res
	return ec.marshalOTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_admin_transaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transaction_id(ctx, field)
			case "hex":
				return ec.fieldContext_Transaction_hex(ctx, field)
			case "block_hash":
				return ec.fieldContext_Transaction_block_hash(ctx, field)
			case "block_height":
				return ec.fieldContext_Transaction_block_height(ctx, field)
			case "fee":
				return ec.fieldContext_Transaction_fee(ctx, field)
			case "number_of_inputs":
				return ec.fieldContext_Transaction_number_of_inputs(ctx, field)
			case "number_of_outputs":
				return ec.fieldContext_Transaction_number_of_outputs(ctx, field)
			case "total_value":
				return ec.fieldContext_Transaction_total_value(ctx, field)
			case "metadata":
				return ec.fieldContext_Transaction_metadata(ctx, field)
			case "output_value":
				return ec.fieldContext_Transaction_output_value(ctx, field)
			case "direction":
				return ec.fieldContext_Transaction_direction(ctx, field)
			case "created_at":
				return ec.fieldContext_Transaction_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Transaction_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Transaction_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_admin_transaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OpReturn_hex(ctx context.Context, field graphql.CollectedField, obj *bux.OpReturn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OpReturn_hex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OpReturn_hex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpReturn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpReturn_hex_parts(ctx context.Context, field graphql.CollectedField, obj *bux.OpReturn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OpReturn_hex_parts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HexParts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OpReturn_hex_parts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpReturn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpReturn_string_parts(ctx context.Context, field graphql.CollectedField, obj *bux.OpReturn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OpReturn_string_parts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringParts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OpReturn_string_parts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpReturn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpReturn_map(ctx context.Context, field graphql.CollectedField, obj *bux.OpReturn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OpReturn_map(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Map, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.MapProtocol)
	fc.Result = res
	return ec.marshalOOpReturnMap2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐMapProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OpReturn_map(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpReturn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "app":
				return ec.fieldContext_OpReturnMap_app(ctx, field)
			case "type":
				return ec.fieldContext_OpReturnMap_type(ctx, field)
			case "keys":
				return ec.fieldContext_OpReturnMap_keys(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OpReturnMap", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpReturnMap_app(ctx context.Context, field graphql.CollectedField, obj *bux.MapProtocol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OpReturnMap_app(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.App, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OpReturnMap_app(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpReturnMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpReturnMap_type(ctx context.Context, field graphql.CollectedField, obj *bux.MapProtocol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OpReturnMap_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OpReturnMap_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpReturnMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpReturnMap_keys(ctx context.Context, field graphql.CollectedField, obj *bux.MapProtocol) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OpReturnMap_keys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keys, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OpReturnMap_keys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpReturnMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailAddress_id(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailAddress_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailAddress_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailAddress_xpub_id(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailAddress_xpub_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XpubID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailAddress_xpub_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailAddress_alias(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailAddress_alias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alias, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailAddress_alias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailAddress_domain(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailAddress_domain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailAddress_domain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailAddress_public_name(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailAddress_public_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailAddress_public_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailAddress_avatar(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailAddress_avatar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailAddress_avatar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailAddress_created_at(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailAddress_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailAddress_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailAddress_updated_at(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailAddress_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailAddress_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailAddress_deleted_at(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailAddress_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailAddress_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailP4_alias(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailP4) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailP4_alias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alias, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailP4_alias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailP4",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailP4_domain(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailP4) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailP4_domain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailP4_domain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailP4",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailP4_from_paymail(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailP4) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailP4_from_paymail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FromPaymail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailP4_from_paymail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailP4",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailP4_note(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailP4) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailP4_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailP4_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailP4",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailP4_pub_key(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailP4) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailP4_pub_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PubKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailP4_pub_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailP4",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailP4_receive_endpoint(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailP4) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailP4_receive_endpoint(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceiveEndpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailP4_receive_endpoint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailP4",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailP4_reference_id(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailP4) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailP4_reference_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailP4_reference_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailP4",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PaymailP4_resolution_type(ctx context.Context, field graphql.CollectedField, obj *bux.PaymailP4) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PaymailP4_resolution_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResolutionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PaymailP4_resolution_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PaymailP4",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_xpub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_xpub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Xpub(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Xpub)
	fc.Result = res
	return ec.marshalOXpub2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐXpub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_xpub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Xpub_id(ctx, field)
			case "current_balance":
				return ec.fieldContext_Xpub_current_balance(ctx, field)
			case "next_internal_num":
				return ec.fieldContext_Xpub_next_internal_num(ctx, field)
			case "next_external_num":
				return ec.fieldContext_Xpub_next_external_num(ctx, field)
			case "metadata":
				return ec.fieldContext_Xpub_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Xpub_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Xpub_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Xpub_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Xpub", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_access_key(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_access_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccessKey(rctx, fc.Args["key"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.AccessKey)
	fc.Result = res
	return ec.marshalOAccessKey2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAccessKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_access_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccessKey_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_AccessKey_xpub_id(ctx, field)
			case "key":
				return ec.fieldContext_AccessKey_key(ctx, field)
			case "metadata":
				return ec.fieldContext_AccessKey_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_AccessKey_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_AccessKey_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_AccessKey_deleted_at(ctx, field)
			case "revoked_at":
				return ec.fieldContext_AccessKey_revoked_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccessKey", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_access_key_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_access_keys(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_access_keys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccessKeys(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.AccessKey)
	fc.Result = res
	return ec.marshalOAccessKey2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAccessKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_access_keys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccessKey_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_AccessKey_xpub_id(ctx, field)
			case "key":
				return ec.fieldContext_AccessKey_key(ctx, field)
			case "metadata":
				return ec.fieldContext_AccessKey_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_AccessKey_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_AccessKey_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_AccessKey_deleted_at(ctx, field)
			case "revoked_at":
				return ec.fieldContext_AccessKey_revoked_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccessKey", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_access_keys_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_access_keys_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_access_keys_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccessKeysCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_access_keys_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_access_keys_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_transaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_transaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Transaction(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Transaction)
	fc.Result = res
	return ec.marshalOTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_transaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transaction_id(ctx, field)
			case "hex":
				return ec.fieldContext_Transaction_hex(ctx, field)
			case "block_hash":
				return ec.fieldContext_Transaction_block_hash(ctx, field)
			case "block_height":
				return ec.fieldContext_Transaction_block_height(ctx, field)
			case "fee":
				return ec.fieldContext_Transaction_fee(ctx, field)
			case "number_of_inputs":
				return ec.fieldContext_Transaction_number_of_inputs(ctx, field)
			case "number_of_outputs":
				return ec.fieldContext_Transaction_number_of_outputs(ctx, field)
			case "total_value":
				return ec.fieldContext_Transaction_total_value(ctx, field)
			case "metadata":
				return ec.fieldContext_Transaction_metadata(ctx, field)
			case "output_value":
				return ec.fieldContext_Transaction_output_value(ctx, field)
			case "direction":
				return ec.fieldContext_Transaction_direction(ctx, field)
			case "created_at":
				return ec.fieldContext_Transaction_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Transaction_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Transaction_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_transaction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_transactions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_transactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Transactions(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.Transaction)
	fc.Result = res
	return ec.marshalOTransaction2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_transactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transaction_id(ctx, field)
			case "hex":
				return ec.fieldContext_Transaction_hex(ctx, field)
			case "block_hash":
				return ec.fieldContext_Transaction_block_hash(ctx, field)
			case "block_height":
				return ec.fieldContext_Transaction_block_height(ctx, field)
			case "fee":
				return ec.fieldContext_Transaction_fee(ctx, field)
			case "number_of_inputs":
				return ec.fieldContext_Transaction_number_of_inputs(ctx, field)
			case "number_of_outputs":
				return ec.fieldContext_Transaction_number_of_outputs(ctx, field)
			case "total_value":
				return ec.fieldContext_Transaction_total_value(ctx, field)
			case "metadata":
				return ec.fieldContext_Transaction_metadata(ctx, field)
			case "output_value":
				return ec.fieldContext_Transaction_output_value(ctx, field)
			case "direction":
				return ec.fieldContext_Transaction_direction(ctx, field)
			case "created_at":
				return ec.fieldContext_Transaction_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Transaction_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Transaction_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_transactions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_transactions_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_transactions_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TransactionsCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_transactions_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_transactions_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_destination(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_destination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Destination(rctx, fc.Args["id"].(*string), fc.Args["address"].(*string), fc.Args["locking_script"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_destination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Destination_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Destination_xpub_id(ctx, field)
			case "locking_script":
				return ec.fieldContext_Destination_locking_script(ctx, field)
			case "type":
				return ec.fieldContext_Destination_type(ctx, field)
			case "chain":
				return ec.fieldContext_Destination_chain(ctx, field)
			case "num":
				return ec.fieldContext_Destination_num(ctx, field)
			case "address":
				return ec.fieldContext_Destination_address(ctx, field)
			case "draft_id":
				return ec.fieldContext_Destination_draft_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Destination_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Destination_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Destination_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Destination_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Destination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_destination_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_destinations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_destinations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Destinations(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_destinations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Destination_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Destination_xpub_id(ctx, field)
			case "locking_script":
				return ec.fieldContext_Destination_locking_script(ctx, field)
			case "type":
				return ec.fieldContext_Destination_type(ctx, field)
			case "chain":
				return ec.fieldContext_Destination_chain(ctx, field)
			case "num":
				return ec.fieldContext_Destination_num(ctx, field)
			case "address":
				return ec.fieldContext_Destination_address(ctx, field)
			case "draft_id":
				return ec.fieldContext_Destination_draft_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Destination_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Destination_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Destination_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Destination_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Destination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_destinations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_destinations_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_destinations_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DestinationsCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_destinations_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_destinations_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_utxo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_utxo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Utxo(rctx, fc.Args["tx_id"].(string), fc.Args["output_index"].(uint32))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Utxo)
	fc.Result = res
	return ec.marshalOUtxo2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_utxo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Utxo_id(ctx, field)
			case "transaction_id":
				return ec.fieldContext_Utxo_transaction_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Utxo_xpub_id(ctx, field)
			case "output_index":
				return ec.fieldContext_Utxo_output_index(ctx, field)
			case "satoshis":
				return ec.fieldContext_Utxo_satoshis(ctx, field)
			case "script_pub_key":
				return ec.fieldContext_Utxo_script_pub_key(ctx, field)
			case "type":
				return ec.fieldContext_Utxo_type(ctx, field)
			case "draft_id":
				return ec.fieldContext_Utxo_draft_id(ctx, field)
			case "reserved_at":
				return ec.fieldContext_Utxo_reserved_at(ctx, field)
			case "spending_tx_id":
				return ec.fieldContext_Utxo_spending_tx_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Utxo_metadata(ctx, field)
			case "transaction":
				return ec.fieldContext_Utxo_transaction(ctx, field)
			case "created_at":
				return ec.fieldContext_Utxo_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Utxo_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Utxo_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Utxo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_utxo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_utxos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_utxos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Utxos(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.Utxo)
	fc.Result = res
	return ec.marshalOUtxo2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_utxos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Utxo_id(ctx, field)
			case "transaction_id":
				return ec.fieldContext_Utxo_transaction_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Utxo_xpub_id(ctx, field)
			case "output_index":
				return ec.fieldContext_Utxo_output_index(ctx, field)
			case "satoshis":
				return ec.fieldContext_Utxo_satoshis(ctx, field)
			case "script_pub_key":
				return ec.fieldContext_Utxo_script_pub_key(ctx, field)
			case "type":
				return ec.fieldContext_Utxo_type(ctx, field)
			case "draft_id":
				return ec.fieldContext_Utxo_draft_id(ctx, field)
			case "reserved_at":
				return ec.fieldContext_Utxo_reserved_at(ctx, field)
			case "spending_tx_id":
				return ec.fieldContext_Utxo_spending_tx_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Utxo_metadata(ctx, field)
			case "transaction":
				return ec.fieldContext_Utxo_transaction(ctx, field)
			case "created_at":
				return ec.fieldContext_Utxo_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Utxo_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Utxo_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Utxo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_utxos_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_utxos_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_utxos_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UtxosCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_utxos_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_utxos_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_get_status(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_get_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminGetStatus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_get_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_get_stats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_get_stats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminGetStats(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.AdminStats)
	fc.Result = res
	return ec.marshalOAdminStats2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAdminStats(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_get_stats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "balance":
				return ec.fieldContext_AdminStats_balance(ctx, field)
			case "destinations":
				return ec.fieldContext_AdminStats_destinations(ctx, field)
			case "paymail_addresses":
				return ec.fieldContext_AdminStats_paymail_addresses(ctx, field)
			case "transactions":
				return ec.fieldContext_AdminStats_transactions(ctx, field)
			case "transactions_per_day":
				return ec.fieldContext_AdminStats_transactions_per_day(ctx, field)
			case "utxos":
				return ec.fieldContext_AdminStats_utxos(ctx, field)
			case "utxos_per_type":
				return ec.fieldContext_AdminStats_utxos_per_type(ctx, field)
			case "xpubs":
				return ec.fieldContext_AdminStats_xpubs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_access_keys_list(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_access_keys_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminAccessKeysList(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.AccessKey)
	fc.Result = res
	return ec.marshalOAccessKey2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAccessKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_access_keys_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccessKey_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_AccessKey_xpub_id(ctx, field)
			case "key":
				return ec.fieldContext_AccessKey_key(ctx, field)
			case "metadata":
				return ec.fieldContext_AccessKey_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_AccessKey_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_AccessKey_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_AccessKey_deleted_at(ctx, field)
			case "revoked_at":
				return ec.fieldContext_AccessKey_revoked_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccessKey", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_access_keys_list_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_access_keys_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_access_keys_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminAccessKeysCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_access_keys_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_access_keys_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_destinations_list(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_destinations_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminDestinationsList(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_destinations_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Destination_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Destination_xpub_id(ctx, field)
			case "locking_script":
				return ec.fieldContext_Destination_locking_script(ctx, field)
			case "type":
				return ec.fieldContext_Destination_type(ctx, field)
			case "chain":
				return ec.fieldContext_Destination_chain(ctx, field)
			case "num":
				return ec.fieldContext_Destination_num(ctx, field)
			case "address":
				return ec.fieldContext_Destination_address(ctx, field)
			case "draft_id":
				return ec.fieldContext_Destination_draft_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Destination_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Destination_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Destination_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Destination_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Destination", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_destinations_list_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_destinations_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_destinations_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminDestinationsCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_destinations_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_destinations_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_draft_transactions_list(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_draft_transactions_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminDraftTransactionsList(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.DraftTransaction)
	fc.Result = res
	return ec.marshalODraftTransaction2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDraftTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_draft_transactions_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DraftTransaction_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_DraftTransaction_xpub_id(ctx, field)
			case "expires_at":
				return ec.fieldContext_DraftTransaction_expires_at(ctx, field)
			case "configuration":
				return ec.fieldContext_DraftTransaction_configuration(ctx, field)
			case "status":
				return ec.fieldContext_DraftTransaction_status(ctx, field)
			case "hex":
				return ec.fieldContext_DraftTransaction_hex(ctx, field)
			case "metadata":
				return ec.fieldContext_DraftTransaction_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_DraftTransaction_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_DraftTransaction_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_DraftTransaction_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DraftTransaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_draft_transactions_list_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_draft_transactions_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_draft_transactions_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminDraftTransactionsCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_draft_transactions_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_draft_transactions_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_paymail_get(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_paymail_get(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminPaymailGet(rctx, fc.Args["address"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.PaymailAddress)
	fc.Result = res
	return ec.marshalOPaymailAddress2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐPaymailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_paymail_get(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PaymailAddress_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_PaymailAddress_xpub_id(ctx, field)
			case "alias":
				return ec.fieldContext_PaymailAddress_alias(ctx, field)
			case "domain":
				return ec.fieldContext_PaymailAddress_domain(ctx, field)
			case "public_name":
				return ec.fieldContext_PaymailAddress_public_name(ctx, field)
			case "avatar":
				return ec.fieldContext_PaymailAddress_avatar(ctx, field)
			case "created_at":
				return ec.fieldContext_PaymailAddress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_PaymailAddress_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_PaymailAddress_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymailAddress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_paymail_get_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_paymail_get_by_xpub_id(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_paymail_get_by_xpub_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminPaymailGetByXpubID(rctx, fc.Args["xpub_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.PaymailAddress)
	fc.Result = res
	return ec.marshalOPaymailAddress2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐPaymailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_paymail_get_by_xpub_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PaymailAddress_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_PaymailAddress_xpub_id(ctx, field)
			case "alias":
				return ec.fieldContext_PaymailAddress_alias(ctx, field)
			case "domain":
				return ec.fieldContext_PaymailAddress_domain(ctx, field)
			case "public_name":
				return ec.fieldContext_PaymailAddress_public_name(ctx, field)
			case "avatar":
				return ec.fieldContext_PaymailAddress_avatar(ctx, field)
			case "created_at":
				return ec.fieldContext_PaymailAddress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_PaymailAddress_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_PaymailAddress_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymailAddress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_paymail_get_by_xpub_id_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_paymails_list(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_paymails_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminPaymailsList(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.PaymailAddress)
	fc.Result = res
	return ec.marshalOPaymailAddress2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐPaymailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_paymails_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PaymailAddress_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_PaymailAddress_xpub_id(ctx, field)
			case "alias":
				return ec.fieldContext_PaymailAddress_alias(ctx, field)
			case "domain":
				return ec.fieldContext_PaymailAddress_domain(ctx, field)
			case "public_name":
				return ec.fieldContext_PaymailAddress_public_name(ctx, field)
			case "avatar":
				return ec.fieldContext_PaymailAddress_avatar(ctx, field)
			case "created_at":
				return ec.fieldContext_PaymailAddress_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_PaymailAddress_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_PaymailAddress_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymailAddress", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_paymails_list_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_paymails_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_paymails_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminPaymailsCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_paymails_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_paymails_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_transactions_list(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_transactions_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminTransactionsList(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.Transaction)
	fc.Result = res
	return ec.marshalOTransaction2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_transactions_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transaction_id(ctx, field)
			case "hex":
				return ec.fieldContext_Transaction_hex(ctx, field)
			case "block_hash":
				return ec.fieldContext_Transaction_block_hash(ctx, field)
			case "block_height":
				return ec.fieldContext_Transaction_block_height(ctx, field)
			case "fee":
				return ec.fieldContext_Transaction_fee(ctx, field)
			case "number_of_inputs":
				return ec.fieldContext_Transaction_number_of_inputs(ctx, field)
			case "number_of_outputs":
				return ec.fieldContext_Transaction_number_of_outputs(ctx, field)
			case "total_value":
				return ec.fieldContext_Transaction_total_value(ctx, field)
			case "metadata":
				return ec.fieldContext_Transaction_metadata(ctx, field)
			case "output_value":
				return ec.fieldContext_Transaction_output_value(ctx, field)
			case "direction":
				return ec.fieldContext_Transaction_direction(ctx, field)
			case "created_at":
				return ec.fieldContext_Transaction_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Transaction_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Transaction_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transaction", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_transactions_list_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_transactions_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_transactions_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminTransactionsCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_transactions_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_transactions_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_utxos_list(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_utxos_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminUtxosList(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.Utxo)
	fc.Result = res
	return ec.marshalOUtxo2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_utxos_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Utxo_id(ctx, field)
			case "transaction_id":
				return ec.fieldContext_Utxo_transaction_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Utxo_xpub_id(ctx, field)
			case "output_index":
				return ec.fieldContext_Utxo_output_index(ctx, field)
			case "satoshis":
				return ec.fieldContext_Utxo_satoshis(ctx, field)
			case "script_pub_key":
				return ec.fieldContext_Utxo_script_pub_key(ctx, field)
			case "type":
				return ec.fieldContext_Utxo_type(ctx, field)
			case "draft_id":
				return ec.fieldContext_Utxo_draft_id(ctx, field)
			case "reserved_at":
				return ec.fieldContext_Utxo_reserved_at(ctx, field)
			case "spending_tx_id":
				return ec.fieldContext_Utxo_spending_tx_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Utxo_metadata(ctx, field)
			case "transaction":
				return ec.fieldContext_Utxo_transaction(ctx, field)
			case "created_at":
				return ec.fieldContext_Utxo_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Utxo_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Utxo_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Utxo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_utxos_list_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_utxos_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_utxos_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminUtxosCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_utxos_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_utxos_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_xpubs_list(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_xpubs_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminXpubsList(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}), fc.Args["params"].(*datastore.QueryParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.Xpub)
	fc.Result = res
	return ec.marshalOXpub2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐXpub(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_xpubs_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Xpub_id(ctx, field)
			case "current_balance":
				return ec.fieldContext_Xpub_current_balance(ctx, field)
			case "next_internal_num":
				return ec.fieldContext_Xpub_next_internal_num(ctx, field)
			case "next_external_num":
				return ec.fieldContext_Xpub_next_external_num(ctx, field)
			case "metadata":
				return ec.fieldContext_Xpub_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Xpub_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Xpub_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Xpub_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Xpub", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_xpubs_list_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_admin_xpubs_count(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_admin_xpubs_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdminXpubsCount(rctx, fc.Args["metadata"].(bux.Metadata), fc.Args["conditions"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_admin_xpubs_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_admin_xpubs_count_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScriptOutput_address(ctx context.Context, field graphql.CollectedField, obj *bux.ScriptOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScriptOutput_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScriptOutput_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScriptOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScriptOutput_satoshis(ctx context.Context, field graphql.CollectedField, obj *bux.ScriptOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScriptOutput_satoshis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Satoshis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScriptOutput_satoshis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScriptOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScriptOutput_script(ctx context.Context, field graphql.CollectedField, obj *bux.ScriptOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScriptOutput_script(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Script, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScriptOutput_script(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScriptOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SyncConfig_broadcast(ctx context.Context, field graphql.CollectedField, obj *bux.SyncConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SyncConfig_broadcast(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Broadcast, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SyncConfig_broadcast(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SyncConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SyncConfig_broadcast_instant(ctx context.Context, field graphql.CollectedField, obj *bux.SyncConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SyncConfig_broadcast_instant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BroadcastInstant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SyncConfig_broadcast_instant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SyncConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SyncConfig_paymail_p2p(ctx context.Context, field graphql.CollectedField, obj *bux.SyncConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SyncConfig_paymail_p2p(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymailP2P, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SyncConfig_paymail_p2p(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SyncConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SyncConfig_sync_on_chain(ctx context.Context, field graphql.CollectedField, obj *bux.SyncConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SyncConfig_sync_on_chain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncOnChain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SyncConfig_sync_on_chain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SyncConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_id(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_hex(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_hex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_hex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_block_hash(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_block_hash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_block_hash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_block_height(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_block_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_block_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_fee(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_fee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_fee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_number_of_inputs(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_number_of_inputs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfInputs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalOUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_number_of_inputs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_number_of_outputs(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_number_of_outputs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfOutputs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalOUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_number_of_outputs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_total_value(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_total_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_total_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_metadata(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.Metadata)
	fc.Result = res
	return ec.marshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Metadata does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_output_value(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_output_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_output_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_direction(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_direction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.TransactionDirection)
	fc.Result = res
	return ec.marshalOTransactionDirection2githubᚗcomᚋBuxOrgᚋbuxᚐTransactionDirection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_direction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TransactionDirection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_created_at(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_updated_at(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Transaction_deleted_at(ctx context.Context, field graphql.CollectedField, obj *bux.Transaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Transaction_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Transaction_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Transaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_change_destinations(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_change_destinations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeDestinations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.Destination)
	fc.Result = res
	return ec.marshalODestination2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_change_destinations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Destination_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Destination_xpub_id(ctx, field)
			case "locking_script":
				return ec.fieldContext_Destination_locking_script(ctx, field)
			case "type":
				return ec.fieldContext_Destination_type(ctx, field)
			case "chain":
				return ec.fieldContext_Destination_chain(ctx, field)
			case "num":
				return ec.fieldContext_Destination_num(ctx, field)
			case "address":
				return ec.fieldContext_Destination_address(ctx, field)
			case "draft_id":
				return ec.fieldContext_Destination_draft_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Destination_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Destination_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Destination_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Destination_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Destination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_change_satoshis(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_change_satoshis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeSatoshis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_change_satoshis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_change_destinations_strategy(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_change_destinations_strategy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeDestinationsStrategy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.ChangeStrategy)
	fc.Result = res
	return ec.marshalOChangeStrategy2githubᚗcomᚋBuxOrgᚋbuxᚐChangeStrategy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_change_destinations_strategy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChangeStrategy does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_change_number_of_destinations(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_change_number_of_destinations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeNumberOfDestinations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_change_number_of_destinations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_change_minimum_satoshis(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_change_minimum_satoshis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeMinimumSatoshis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_change_minimum_satoshis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_fee_unit(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_fee_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeeUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*utils.FeeUnit)
	fc.Result = res
	return ec.marshalOFeeUnit2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚋutilsᚐFeeUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_fee_unit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "satoshis":
				return ec.fieldContext_FeeUnit_satoshis(ctx, field)
			case "bytes":
				return ec.fieldContext_FeeUnit_bytes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FeeUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_fee(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_fee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_fee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_inputs(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_inputs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inputs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.TransactionInput)
	fc.Result = res
	return ec.marshalOTransactionInput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionInput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_inputs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TransactionInput_id(ctx, field)
			case "transaction_id":
				return ec.fieldContext_TransactionInput_transaction_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_TransactionInput_xpub_id(ctx, field)
			case "output_index":
				return ec.fieldContext_TransactionInput_output_index(ctx, field)
			case "satoshis":
				return ec.fieldContext_TransactionInput_satoshis(ctx, field)
			case "script_pub_key":
				return ec.fieldContext_TransactionInput_script_pub_key(ctx, field)
			case "type":
				return ec.fieldContext_TransactionInput_type(ctx, field)
			case "draft_id":
				return ec.fieldContext_TransactionInput_draft_id(ctx, field)
			case "reserved_at":
				return ec.fieldContext_TransactionInput_reserved_at(ctx, field)
			case "spending_tx_id":
				return ec.fieldContext_TransactionInput_spending_tx_id(ctx, field)
			case "destination":
				return ec.fieldContext_TransactionInput_destination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionInput", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_outputs(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_outputs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Outputs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.TransactionOutput)
	fc.Result = res
	return ec.marshalOTransactionOutput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_outputs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymail_p4":
				return ec.fieldContext_TransactionOutput_paymail_p4(ctx, field)
			case "satoshis":
				return ec.fieldContext_TransactionOutput_satoshis(ctx, field)
			case "scripts":
				return ec.fieldContext_TransactionOutput_scripts(ctx, field)
			case "to":
				return ec.fieldContext_TransactionOutput_to(ctx, field)
			case "op_return":
				return ec.fieldContext_TransactionOutput_op_return(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TransactionOutput", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionConfig_sync(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionConfig_sync(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sync, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.SyncConfig)
	fc.Result = res
	return ec.marshalOSyncConfig2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐSyncConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionConfig_sync(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "broadcast":
				return ec.fieldContext_SyncConfig_broadcast(ctx, field)
			case "broadcast_instant":
				return ec.fieldContext_SyncConfig_broadcast_instant(ctx, field)
			case "paymail_p2p":
				return ec.fieldContext_SyncConfig_paymail_p2p(ctx, field)
			case "sync_on_chain":
				return ec.fieldContext_SyncConfig_sync_on_chain(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SyncConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_id(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_transaction_id(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_transaction_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_transaction_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_xpub_id(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_xpub_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XpubID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_xpub_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_output_index(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_output_index(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalOUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_output_index(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_satoshis(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_satoshis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Satoshis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_satoshis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_script_pub_key(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_script_pub_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScriptPubKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_script_pub_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_type(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_draft_id(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_draft_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DraftID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullString)
	fc.Result = res
	return ec.marshalONullString2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_draft_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullString does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_reserved_at(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_reserved_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_reserved_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_spending_tx_id(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_spending_tx_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpendingTxID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullString)
	fc.Result = res
	return ec.marshalONullString2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_spending_tx_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullString does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionInput_destination(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionInput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionInput_destination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.Destination)
	fc.Result = res
	return ec.marshalODestination2githubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionInput_destination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionInput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Destination_id(ctx, field)
			case "xpub_id":
				return ec.fieldContext_Destination_xpub_id(ctx, field)
			case "locking_script":
				return ec.fieldContext_Destination_locking_script(ctx, field)
			case "type":
				return ec.fieldContext_Destination_type(ctx, field)
			case "chain":
				return ec.fieldContext_Destination_chain(ctx, field)
			case "num":
				return ec.fieldContext_Destination_num(ctx, field)
			case "address":
				return ec.fieldContext_Destination_address(ctx, field)
			case "draft_id":
				return ec.fieldContext_Destination_draft_id(ctx, field)
			case "metadata":
				return ec.fieldContext_Destination_metadata(ctx, field)
			case "created_at":
				return ec.fieldContext_Destination_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Destination_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Destination_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Destination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionOutput_paymail_p4(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionOutput_paymail_p4(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymailP4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.PaymailP4)
	fc.Result = res
	return ec.marshalOPaymailP42ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐPaymailP4(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionOutput_paymail_p4(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alias":
				return ec.fieldContext_PaymailP4_alias(ctx, field)
			case "domain":
				return ec.fieldContext_PaymailP4_domain(ctx, field)
			case "from_paymail":
				return ec.fieldContext_PaymailP4_from_paymail(ctx, field)
			case "note":
				return ec.fieldContext_PaymailP4_note(ctx, field)
			case "pub_key":
				return ec.fieldContext_PaymailP4_pub_key(ctx, field)
			case "receive_endpoint":
				return ec.fieldContext_PaymailP4_receive_endpoint(ctx, field)
			case "reference_id":
				return ec.fieldContext_PaymailP4_reference_id(ctx, field)
			case "resolution_type":
				return ec.fieldContext_PaymailP4_resolution_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PaymailP4", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionOutput_satoshis(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionOutput_satoshis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Satoshis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionOutput_satoshis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionOutput_scripts(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionOutput_scripts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scripts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bux.ScriptOutput)
	fc.Result = res
	return ec.marshalOScriptOutput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐScriptOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionOutput_scripts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_ScriptOutput_address(ctx, field)
			case "satoshis":
				return ec.fieldContext_ScriptOutput_satoshis(ctx, field)
			case "script":
				return ec.fieldContext_ScriptOutput_script(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScriptOutput", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionOutput_to(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionOutput_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionOutput_to(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TransactionOutput_op_return(ctx context.Context, field graphql.CollectedField, obj *bux.TransactionOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TransactionOutput_op_return(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpReturn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.OpReturn)
	fc.Result = res
	return ec.marshalOOpReturn2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐOpReturn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TransactionOutput_op_return(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TransactionOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hex":
				return ec.fieldContext_OpReturn_hex(ctx, field)
			case "hex_parts":
				return ec.fieldContext_OpReturn_hex_parts(ctx, field)
			case "string_parts":
				return ec.fieldContext_OpReturn_string_parts(ctx, field)
			case "map":
				return ec.fieldContext_OpReturn_map(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OpReturn", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_id(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_transaction_id(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_transaction_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransactionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_transaction_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_xpub_id(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_xpub_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XpubID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_xpub_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_output_index(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_output_index(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalOUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_output_index(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_satoshis(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_satoshis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Satoshis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_satoshis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_script_pub_key(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_script_pub_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScriptPubKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_script_pub_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_type(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_draft_id(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_draft_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DraftID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullString)
	fc.Result = res
	return ec.marshalONullString2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_draft_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullString does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_reserved_at(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_reserved_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_reserved_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_spending_tx_id(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_spending_tx_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpendingTxID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullString)
	fc.Result = res
	return ec.marshalONullString2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_spending_tx_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullString does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_metadata(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.Metadata)
	fc.Result = res
	return ec.marshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Metadata does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_transaction(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_transaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bux.Transaction)
	fc.Result = res
	return ec.marshalOTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_transaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Transaction_id(ctx, field)
			case "hex":
				return ec.fieldContext_Transaction_hex(ctx, field)
			case "block_hash":
				return ec.fieldContext_Transaction_block_hash(ctx, field)
			case "block_height":
				return ec.fieldContext_Transaction_block_height(ctx, field)
			case "fee":
				return ec.fieldContext_Transaction_fee(ctx, field)
			case "number_of_inputs":
				return ec.fieldContext_Transaction_number_of_inputs(ctx, field)
			case "number_of_outputs":
				return ec.fieldContext_Transaction_number_of_outputs(ctx, field)
			case "total_value":
				return ec.fieldContext_Transaction_total_value(ctx, field)
			case "metadata":
				return ec.fieldContext_Transaction_metadata(ctx, field)
			case "output_value":
				return ec.fieldContext_Transaction_output_value(ctx, field)
			case "direction":
				return ec.fieldContext_Transaction_direction(ctx, field)
			case "created_at":
				return ec.fieldContext_Transaction_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Transaction_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_Transaction_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Transaction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_created_at(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_updated_at(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Utxo_deleted_at(ctx context.Context, field graphql.CollectedField, obj *bux.Utxo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Utxo_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Utxo_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Utxo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Xpub_id(ctx context.Context, field graphql.CollectedField, obj *bux.Xpub) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Xpub_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Xpub_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Xpub",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Xpub_current_balance(ctx context.Context, field graphql.CollectedField, obj *bux.Xpub) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Xpub_current_balance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentBalance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalOUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Xpub_current_balance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Xpub",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Xpub_next_internal_num(ctx context.Context, field graphql.CollectedField, obj *bux.Xpub) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Xpub_next_internal_num(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextInternalNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalOUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Xpub_next_internal_num(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Xpub",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Xpub_next_external_num(ctx context.Context, field graphql.CollectedField, obj *bux.Xpub) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Xpub_next_external_num(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextExternalNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(uint32)
	fc.Result = res
	return ec.marshalOUint322uint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Xpub_next_external_num(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Xpub",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint32 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Xpub_metadata(ctx context.Context, field graphql.CollectedField, obj *bux.Xpub) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Xpub_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bux.Metadata)
	fc.Result = res
	return ec.marshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Xpub_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Xpub",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Metadata does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Xpub_created_at(ctx context.Context, field graphql.CollectedField, obj *bux.Xpub) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Xpub_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Xpub_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Xpub",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Xpub_updated_at(ctx context.Context, field graphql.CollectedField, obj *bux.Xpub) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Xpub_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Xpub_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Xpub",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Xpub_deleted_at(ctx context.Context, field graphql.CollectedField, obj *bux.Xpub) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Xpub_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(customtypes.NullTime)
	fc.Result = res
	return ec.marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Xpub_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Xpub",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputDestinationInput(ctx context.Context, obj interface{}) (bux.Destination, error) {
	var it bux.Destination
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "xpub_id", "locking_script", "type", "chain", "num", "address", "draft_id", "metadata", "created_at", "updated_at", "deleted_at"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "xpub_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xpub_id"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.XpubID = data
		case "locking_script":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locking_script"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockingScript = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "chain":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
			data, err := ec.unmarshalOUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Chain = data
		case "num":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("num"))
			data, err := ec.unmarshalOUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Num = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "draft_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("draft_id"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DraftID = data
		case "metadata":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metadata"))
			data, err := ec.unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx, v)
			if err != nil {
				return it, err
			}
			it.Metadata = data
		case "created_at":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			data, err := ec.unmarshalOTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updated_at":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			data, err := ec.unmarshalOTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "deleted_at":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			data, err := ec.unmarshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeletedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFeeUnitInput(ctx context.Context, obj interface{}) (utils.FeeUnit, error) {
	var it utils.FeeUnit
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"satoshis", "bytes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "satoshis":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("satoshis"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Satoshis = data
		case "bytes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bytes"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Bytes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOpReturnInput(ctx context.Context, obj interface{}) (bux.OpReturn, error) {
	var it bux.OpReturn
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"hex", "hex_parts", "string_parts", "map"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "hex":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hex"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hex = data
		case "hex_parts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hex_parts"))
			data, err := ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HexParts = data
		case "string_parts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("string_parts"))
			data, err := ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StringParts = data
		case "map":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("map"))
			data, err := ec.unmarshalOOpReturnMapInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐMapProtocol(ctx, v)
			if err != nil {
				return it, err
			}
			it.Map = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOpReturnMapInput(ctx context.Context, obj interface{}) (bux.MapProtocol, error) {
	var it bux.MapProtocol
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"app", "type", "keys"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "app":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.App = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "keys":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keys"))
			data, err := ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keys = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScriptOutputInput(ctx context.Context, obj interface{}) (bux.ScriptOutput, error) {
	var it bux.ScriptOutput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"address", "satoshis", "script"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "satoshis":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("satoshis"))
			data, err := ec.unmarshalOUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Satoshis = data
		case "script":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("script"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Script = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSyncConfigInput(ctx context.Context, obj interface{}) (bux.SyncConfig, error) {
	var it bux.SyncConfig
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"broadcast", "broadcast_instant", "paymail_p2p", "sync_on_chain"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "broadcast":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("broadcast"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Broadcast = data
		case "broadcast_instant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("broadcast_instant"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BroadcastInstant = data
		case "paymail_p2p":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymail_p2p"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymailP2P = data
		case "sync_on_chain":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sync_on_chain"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SyncOnChain = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTransactionConfigInput(ctx context.Context, obj interface{}) (bux.TransactionConfig, error) {
	var it bux.TransactionConfig
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"change_satoshis", "change_destinations", "change_destinations_strategy", "change_number_of_destinations", "change_minimum_satoshis", "include_utxos", "inputs", "expires_in", "fee", "fee_unit", "from_utxos", "outputs", "send_all_to", "sync"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "change_satoshis":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("change_satoshis"))
			data, err := ec.unmarshalOUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeSatoshis = data
		case "change_destinations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("change_destinations"))
			data, err := ec.unmarshalODestinationInput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeDestinations = data
		case "change_destinations_strategy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("change_destinations_strategy"))
			data, err := ec.unmarshalOChangeStrategy2githubᚗcomᚋBuxOrgᚋbuxᚐChangeStrategy(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeDestinationsStrategy = data
		case "change_number_of_destinations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("change_number_of_destinations"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeNumberOfDestinations = data
		case "change_minimum_satoshis":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("change_minimum_satoshis"))
			data, err := ec.unmarshalOUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChangeMinimumSatoshis = data
		case "include_utxos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("include_utxos"))
			data, err := ec.unmarshalOUtxoPointer2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxoPointer(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncludeUtxos = data
		case "inputs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputs"))
			data, err := ec.unmarshalOMap2ᚕmap(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TransactionConfigInput().Inputs(ctx, &it, data); err != nil {
				return it, err
			}
		case "expires_in":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expires_in"))
			data, err := ec.unmarshalOUint642ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			if err = ec.resolvers.TransactionConfigInput().ExpiresIn(ctx, &it, data); err != nil {
				return it, err
			}
		case "fee":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fee"))
			data, err := ec.unmarshalOUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Fee = data
		case "fee_unit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fee_unit"))
			data, err := ec.unmarshalOFeeUnitInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚋutilsᚐFeeUnit(ctx, v)
			if err != nil {
				return it, err
			}
			it.FeeUnit = data
		case "from_utxos":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from_utxos"))
			data, err := ec.unmarshalOUtxoPointer2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxoPointer(ctx, v)
			if err != nil {
				return it, err
			}
			it.FromUtxos = data
		case "outputs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outputs"))
			data, err := ec.unmarshalOTransactionOutputInput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionOutput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Outputs = data
		case "send_all_to":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_all_to"))
			data, err := ec.unmarshalOTransactionOutputInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionOutput(ctx, v)
			if err != nil {
				return it, err
			}
			it.SendAllTo = data
		case "sync":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sync"))
			data, err := ec.unmarshalOSyncConfigInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐSyncConfig(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sync = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTransactionOutputInput(ctx context.Context, obj interface{}) (bux.TransactionOutput, error) {
	var it bux.TransactionOutput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"to", "satoshis", "scripts", "op_return"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "to":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.To = data
		case "satoshis":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("satoshis"))
			data, err := ec.unmarshalOUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Satoshis = data
		case "scripts":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scripts"))
			data, err := ec.unmarshalOScriptOutputInput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐScriptOutput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scripts = data
		case "op_return":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("op_return"))
			data, err := ec.unmarshalOOpReturnInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐOpReturn(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpReturn = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUtxoPointer(ctx context.Context, obj interface{}) (bux.UtxoPointer, error) {
	var it bux.UtxoPointer
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"transaction_id", "output_index"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "transaction_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transaction_id"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TransactionID = data
		case "output_index":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("output_index"))
			data, err := ec.unmarshalOUint322uint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.OutputIndex = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accessKeyImplementors = []string{"AccessKey"}

func (ec *executionContext) _AccessKey(ctx context.Context, sel ast.SelectionSet, obj *bux.AccessKey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessKeyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessKey")
		case "id":
			out.Values[i] = ec._AccessKey_id(ctx, field, obj)
		case "xpub_id":
			out.Values[i] = ec._AccessKey_xpub_id(ctx, field, obj)
		case "key":
			out.Values[i] = ec._AccessKey_key(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._AccessKey_metadata(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._AccessKey_created_at(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._AccessKey_updated_at(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._AccessKey_deleted_at(ctx, field, obj)
		case "revoked_at":
			out.Values[i] = ec._AccessKey_revoked_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adminStatsImplementors = []string{"AdminStats"}

func (ec *executionContext) _AdminStats(ctx context.Context, sel ast.SelectionSet, obj *bux.AdminStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminStats")
		case "balance":
			out.Values[i] = ec._AdminStats_balance(ctx, field, obj)
		case "destinations":
			out.Values[i] = ec._AdminStats_destinations(ctx, field, obj)
		case "paymail_addresses":
			out.Values[i] = ec._AdminStats_paymail_addresses(ctx, field, obj)
		case "transactions":
			out.Values[i] = ec._AdminStats_transactions(ctx, field, obj)
		case "transactions_per_day":
			out.Values[i] = ec._AdminStats_transactions_per_day(ctx, field, obj)
		case "utxos":
			out.Values[i] = ec._AdminStats_utxos(ctx, field, obj)
		case "utxos_per_type":
			out.Values[i] = ec._AdminStats_utxos_per_type(ctx, field, obj)
		case "xpubs":
			out.Values[i] = ec._AdminStats_xpubs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var destinationImplementors = []string{"Destination"}

func (ec *executionContext) _Destination(ctx context.Context, sel ast.SelectionSet, obj *bux.Destination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, destinationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Destination")
		case "id":
			out.Values[i] = ec._Destination_id(ctx, field, obj)
		case "xpub_id":
			out.Values[i] = ec._Destination_xpub_id(ctx, field, obj)
		case "locking_script":
			out.Values[i] = ec._Destination_locking_script(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Destination_type(ctx, field, obj)
		case "chain":
			out.Values[i] = ec._Destination_chain(ctx, field, obj)
		case "num":
			out.Values[i] = ec._Destination_num(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Destination_address(ctx, field, obj)
		case "draft_id":
			out.Values[i] = ec._Destination_draft_id(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Destination_metadata(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._Destination_created_at(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._Destination_updated_at(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._Destination_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var draftTransactionImplementors = []string{"DraftTransaction"}

func (ec *executionContext) _DraftTransaction(ctx context.Context, sel ast.SelectionSet, obj *bux.DraftTransaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, draftTransactionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DraftTransaction")
		case "id":
			out.Values[i] = ec._DraftTransaction_id(ctx, field, obj)
		case "xpub_id":
			out.Values[i] = ec._DraftTransaction_xpub_id(ctx, field, obj)
		case "expires_at":
			out.Values[i] = ec._DraftTransaction_expires_at(ctx, field, obj)
		case "configuration":
			out.Values[i] = ec._DraftTransaction_configuration(ctx, field, obj)
		case "status":
			out.Values[i] = ec._DraftTransaction_status(ctx, field, obj)
		case "hex":
			out.Values[i] = ec._DraftTransaction_hex(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._DraftTransaction_metadata(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DraftTransaction_created_at(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DraftTransaction_updated_at(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DraftTransaction_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var feeUnitImplementors = []string{"FeeUnit"}

func (ec *executionContext) _FeeUnit(ctx context.Context, sel ast.SelectionSet, obj *utils.FeeUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feeUnitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeeUnit")
		case "satoshis":
			out.Values[i] = ec._FeeUnit_satoshis(ctx, field, obj)
		case "bytes":
			out.Values[i] = ec._FeeUnit_bytes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "xpub":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_xpub(ctx, field)
			})
		case "xpub_metadata":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_xpub_metadata(ctx, field)
			})
		case "access_key":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_access_key(ctx, field)
			})
		case "access_key_revoke":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_access_key_revoke(ctx, field)
			})
		case "transaction":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_transaction(ctx, field)
			})
		case "transaction_metadata":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_transaction_metadata(ctx, field)
			})
		case "new_transaction":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_new_transaction(ctx, field)
			})
		case "destination":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_destination(ctx, field)
			})
		case "destination_metadata":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_destination_metadata(ctx, field)
			})
		case "utxos_unreserve":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_utxos_unreserve(ctx, field)
			})
		case "admin_paymail_create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_admin_paymail_create(ctx, field)
			})
		case "admin_paymail_delete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_admin_paymail_delete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "admin_transaction":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_admin_transaction(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var opReturnImplementors = []string{"OpReturn"}

func (ec *executionContext) _OpReturn(ctx context.Context, sel ast.SelectionSet, obj *bux.OpReturn) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, opReturnImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpReturn")
		case "hex":
			out.Values[i] = ec._OpReturn_hex(ctx, field, obj)
		case "hex_parts":
			out.Values[i] = ec._OpReturn_hex_parts(ctx, field, obj)
		case "string_parts":
			out.Values[i] = ec._OpReturn_string_parts(ctx, field, obj)
		case "map":
			out.Values[i] = ec._OpReturn_map(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var opReturnMapImplementors = []string{"OpReturnMap"}

func (ec *executionContext) _OpReturnMap(ctx context.Context, sel ast.SelectionSet, obj *bux.MapProtocol) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, opReturnMapImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpReturnMap")
		case "app":
			out.Values[i] = ec._OpReturnMap_app(ctx, field, obj)
		case "type":
			out.Values[i] = ec._OpReturnMap_type(ctx, field, obj)
		case "keys":
			out.Values[i] = ec._OpReturnMap_keys(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var paymailAddressImplementors = []string{"PaymailAddress"}

func (ec *executionContext) _PaymailAddress(ctx context.Context, sel ast.SelectionSet, obj *bux.PaymailAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymailAddressImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymailAddress")
		case "id":
			out.Values[i] = ec._PaymailAddress_id(ctx, field, obj)
		case "xpub_id":
			out.Values[i] = ec._PaymailAddress_xpub_id(ctx, field, obj)
		case "alias":
			out.Values[i] = ec._PaymailAddress_alias(ctx, field, obj)
		case "domain":
			out.Values[i] = ec._PaymailAddress_domain(ctx, field, obj)
		case "public_name":
			out.Values[i] = ec._PaymailAddress_public_name(ctx, field, obj)
		case "avatar":
			out.Values[i] = ec._PaymailAddress_avatar(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._PaymailAddress_created_at(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._PaymailAddress_updated_at(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._PaymailAddress_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var paymailP4Implementors = []string{"PaymailP4"}

func (ec *executionContext) _PaymailP4(ctx context.Context, sel ast.SelectionSet, obj *bux.PaymailP4) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymailP4Implementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PaymailP4")
		case "alias":
			out.Values[i] = ec._PaymailP4_alias(ctx, field, obj)
		case "domain":
			out.Values[i] = ec._PaymailP4_domain(ctx, field, obj)
		case "from_paymail":
			out.Values[i] = ec._PaymailP4_from_paymail(ctx, field, obj)
		case "note":
			out.Values[i] = ec._PaymailP4_note(ctx, field, obj)
		case "pub_key":
			out.Values[i] = ec._PaymailP4_pub_key(ctx, field, obj)
		case "receive_endpoint":
			out.Values[i] = ec._PaymailP4_receive_endpoint(ctx, field, obj)
		case "reference_id":
			out.Values[i] = ec._PaymailP4_reference_id(ctx, field, obj)
		case "resolution_type":
			out.Values[i] = ec._PaymailP4_resolution_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "xpub":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_xpub(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "access_key":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_access_key(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "access_keys":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_access_keys(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "access_keys_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_access_keys_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "transaction":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_transaction(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "transactions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_transactions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "transactions_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_transactions_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "destination":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_destination(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "destinations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_destinations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "destinations_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_destinations_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "utxo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_utxo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "utxos":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_utxos(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "utxos_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_utxos_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_get_status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_get_status(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_get_stats":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_get_stats(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_access_keys_list":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_access_keys_list(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_access_keys_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_access_keys_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_destinations_list":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_destinations_list(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_destinations_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_destinations_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_draft_transactions_list":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_draft_transactions_list(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_draft_transactions_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_draft_transactions_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_paymail_get":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_paymail_get(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_paymail_get_by_xpub_id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_paymail_get_by_xpub_id(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_paymails_list":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_paymails_list(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_paymails_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_paymails_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_transactions_list":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_transactions_list(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_transactions_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_transactions_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_utxos_list":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_utxos_list(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_utxos_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_utxos_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_xpubs_list":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_xpubs_list(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "admin_xpubs_count":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_admin_xpubs_count(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var scriptOutputImplementors = []string{"ScriptOutput"}

func (ec *executionContext) _ScriptOutput(ctx context.Context, sel ast.SelectionSet, obj *bux.ScriptOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scriptOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScriptOutput")
		case "address":
			out.Values[i] = ec._ScriptOutput_address(ctx, field, obj)
		case "satoshis":
			out.Values[i] = ec._ScriptOutput_satoshis(ctx, field, obj)
		case "script":
			out.Values[i] = ec._ScriptOutput_script(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var syncConfigImplementors = []string{"SyncConfig"}

func (ec *executionContext) _SyncConfig(ctx context.Context, sel ast.SelectionSet, obj *bux.SyncConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, syncConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SyncConfig")
		case "broadcast":
			out.Values[i] = ec._SyncConfig_broadcast(ctx, field, obj)
		case "broadcast_instant":
			out.Values[i] = ec._SyncConfig_broadcast_instant(ctx, field, obj)
		case "paymail_p2p":
			out.Values[i] = ec._SyncConfig_paymail_p2p(ctx, field, obj)
		case "sync_on_chain":
			out.Values[i] = ec._SyncConfig_sync_on_chain(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionImplementors = []string{"Transaction"}

func (ec *executionContext) _Transaction(ctx context.Context, sel ast.SelectionSet, obj *bux.Transaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Transaction")
		case "id":
			out.Values[i] = ec._Transaction_id(ctx, field, obj)
		case "hex":
			out.Values[i] = ec._Transaction_hex(ctx, field, obj)
		case "block_hash":
			out.Values[i] = ec._Transaction_block_hash(ctx, field, obj)
		case "block_height":
			out.Values[i] = ec._Transaction_block_height(ctx, field, obj)
		case "fee":
			out.Values[i] = ec._Transaction_fee(ctx, field, obj)
		case "number_of_inputs":
			out.Values[i] = ec._Transaction_number_of_inputs(ctx, field, obj)
		case "number_of_outputs":
			out.Values[i] = ec._Transaction_number_of_outputs(ctx, field, obj)
		case "total_value":
			out.Values[i] = ec._Transaction_total_value(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Transaction_metadata(ctx, field, obj)
		case "output_value":
			out.Values[i] = ec._Transaction_output_value(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._Transaction_direction(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._Transaction_created_at(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._Transaction_updated_at(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._Transaction_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionConfigImplementors = []string{"TransactionConfig"}

func (ec *executionContext) _TransactionConfig(ctx context.Context, sel ast.SelectionSet, obj *bux.TransactionConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionConfig")
		case "change_destinations":
			out.Values[i] = ec._TransactionConfig_change_destinations(ctx, field, obj)
		case "change_satoshis":
			out.Values[i] = ec._TransactionConfig_change_satoshis(ctx, field, obj)
		case "change_destinations_strategy":
			out.Values[i] = ec._TransactionConfig_change_destinations_strategy(ctx, field, obj)
		case "change_number_of_destinations":
			out.Values[i] = ec._TransactionConfig_change_number_of_destinations(ctx, field, obj)
		case "change_minimum_satoshis":
			out.Values[i] = ec._TransactionConfig_change_minimum_satoshis(ctx, field, obj)
		case "fee_unit":
			out.Values[i] = ec._TransactionConfig_fee_unit(ctx, field, obj)
		case "fee":
			out.Values[i] = ec._TransactionConfig_fee(ctx, field, obj)
		case "inputs":
			out.Values[i] = ec._TransactionConfig_inputs(ctx, field, obj)
		case "outputs":
			out.Values[i] = ec._TransactionConfig_outputs(ctx, field, obj)
		case "sync":
			out.Values[i] = ec._TransactionConfig_sync(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionInputImplementors = []string{"TransactionInput"}

func (ec *executionContext) _TransactionInput(ctx context.Context, sel ast.SelectionSet, obj *bux.TransactionInput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionInputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionInput")
		case "id":
			out.Values[i] = ec._TransactionInput_id(ctx, field, obj)
		case "transaction_id":
			out.Values[i] = ec._TransactionInput_transaction_id(ctx, field, obj)
		case "xpub_id":
			out.Values[i] = ec._TransactionInput_xpub_id(ctx, field, obj)
		case "output_index":
			out.Values[i] = ec._TransactionInput_output_index(ctx, field, obj)
		case "satoshis":
			out.Values[i] = ec._TransactionInput_satoshis(ctx, field, obj)
		case "script_pub_key":
			out.Values[i] = ec._TransactionInput_script_pub_key(ctx, field, obj)
		case "type":
			out.Values[i] = ec._TransactionInput_type(ctx, field, obj)
		case "draft_id":
			out.Values[i] = ec._TransactionInput_draft_id(ctx, field, obj)
		case "reserved_at":
			out.Values[i] = ec._TransactionInput_reserved_at(ctx, field, obj)
		case "spending_tx_id":
			out.Values[i] = ec._TransactionInput_spending_tx_id(ctx, field, obj)
		case "destination":
			out.Values[i] = ec._TransactionInput_destination(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var transactionOutputImplementors = []string{"TransactionOutput"}

func (ec *executionContext) _TransactionOutput(ctx context.Context, sel ast.SelectionSet, obj *bux.TransactionOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, transactionOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransactionOutput")
		case "paymail_p4":
			out.Values[i] = ec._TransactionOutput_paymail_p4(ctx, field, obj)
		case "satoshis":
			out.Values[i] = ec._TransactionOutput_satoshis(ctx, field, obj)
		case "scripts":
			out.Values[i] = ec._TransactionOutput_scripts(ctx, field, obj)
		case "to":
			out.Values[i] = ec._TransactionOutput_to(ctx, field, obj)
		case "op_return":
			out.Values[i] = ec._TransactionOutput_op_return(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var utxoImplementors = []string{"Utxo"}

func (ec *executionContext) _Utxo(ctx context.Context, sel ast.SelectionSet, obj *bux.Utxo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, utxoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Utxo")
		case "id":
			out.Values[i] = ec._Utxo_id(ctx, field, obj)
		case "transaction_id":
			out.Values[i] = ec._Utxo_transaction_id(ctx, field, obj)
		case "xpub_id":
			out.Values[i] = ec._Utxo_xpub_id(ctx, field, obj)
		case "output_index":
			out.Values[i] = ec._Utxo_output_index(ctx, field, obj)
		case "satoshis":
			out.Values[i] = ec._Utxo_satoshis(ctx, field, obj)
		case "script_pub_key":
			out.Values[i] = ec._Utxo_script_pub_key(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Utxo_type(ctx, field, obj)
		case "draft_id":
			out.Values[i] = ec._Utxo_draft_id(ctx, field, obj)
		case "reserved_at":
			out.Values[i] = ec._Utxo_reserved_at(ctx, field, obj)
		case "spending_tx_id":
			out.Values[i] = ec._Utxo_spending_tx_id(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Utxo_metadata(ctx, field, obj)
		case "transaction":
			out.Values[i] = ec._Utxo_transaction(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._Utxo_created_at(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._Utxo_updated_at(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._Utxo_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var xpubImplementors = []string{"Xpub"}

func (ec *executionContext) _Xpub(ctx context.Context, sel ast.SelectionSet, obj *bux.Xpub) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, xpubImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Xpub")
		case "id":
			out.Values[i] = ec._Xpub_id(ctx, field, obj)
		case "current_balance":
			out.Values[i] = ec._Xpub_current_balance(ctx, field, obj)
		case "next_internal_num":
			out.Values[i] = ec._Xpub_next_internal_num(ctx, field, obj)
		case "next_external_num":
			out.Values[i] = ec._Xpub_next_external_num(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Xpub_metadata(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._Xpub_created_at(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._Xpub_updated_at(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._Xpub_deleted_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx context.Context, v interface{}) (bux.Metadata, error) {
	res, err := bux.UnmarshalMetadata(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx context.Context, sel ast.SelectionSet, v bux.Metadata) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := bux.MarshalMetadata(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTransactionConfigInput2githubᚗcomᚋBuxOrgᚋbuxᚐTransactionConfig(ctx context.Context, v interface{}) (bux.TransactionConfig, error) {
	res, err := ec.unmarshalInputTransactionConfigInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUint322uint32(ctx context.Context, v interface{}) (uint32, error) {
	res, err := gqlgen.UnmarshalUint32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUint322uint32(ctx context.Context, sel ast.SelectionSet, v uint32) graphql.Marshaler {
	res := gqlgen.MarshalUint32(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccessKey2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAccessKey(ctx context.Context, sel ast.SelectionSet, v []*bux.AccessKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccessKey2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAccessKey(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAccessKey2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAccessKey(ctx context.Context, sel ast.SelectionSet, v *bux.AccessKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccessKey(ctx, sel, v)
}

func (ec *executionContext) marshalOAdminStats2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐAdminStats(ctx context.Context, sel ast.SelectionSet, v *bux.AdminStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdminStats(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOChangeStrategy2githubᚗcomᚋBuxOrgᚋbuxᚐChangeStrategy(ctx context.Context, v interface{}) (bux.ChangeStrategy, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := bux.ChangeStrategy(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChangeStrategy2githubᚗcomᚋBuxOrgᚋbuxᚐChangeStrategy(ctx context.Context, sel ast.SelectionSet, v bux.ChangeStrategy) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalODestination2githubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx context.Context, sel ast.SelectionSet, v bux.Destination) graphql.Marshaler {
	return ec._Destination(ctx, sel, &v)
}

func (ec *executionContext) marshalODestination2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx context.Context, sel ast.SelectionSet, v []*bux.Destination) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODestination2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODestination2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx context.Context, sel ast.SelectionSet, v *bux.Destination) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Destination(ctx, sel, v)
}

func (ec *executionContext) unmarshalODestinationInput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx context.Context, v interface{}) ([]*bux.Destination, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*bux.Destination, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODestinationInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODestinationInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDestination(ctx context.Context, v interface{}) (*bux.Destination, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDestinationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODraftStatus2githubᚗcomᚋBuxOrgᚋbuxᚐDraftStatus(ctx context.Context, v interface{}) (bux.DraftStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := bux.DraftStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODraftStatus2githubᚗcomᚋBuxOrgᚋbuxᚐDraftStatus(ctx context.Context, sel ast.SelectionSet, v bux.DraftStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalODraftTransaction2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDraftTransaction(ctx context.Context, sel ast.SelectionSet, v []*bux.DraftTransaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODraftTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDraftTransaction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODraftTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐDraftTransaction(ctx context.Context, sel ast.SelectionSet, v *bux.DraftTransaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DraftTransaction(ctx, sel, v)
}

func (ec *executionContext) marshalOFeeUnit2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚋutilsᚐFeeUnit(ctx context.Context, sel ast.SelectionSet, v *utils.FeeUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FeeUnit(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFeeUnitInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚋutilsᚐFeeUnit(ctx context.Context, v interface{}) (*utils.FeeUnit, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFeeUnitInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOInt642int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	return res
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	return res
}

func (ec *executionContext) unmarshalOMap2ᚕmap(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMap2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMap2ᚕmap(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOMap2map(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx context.Context, v interface{}) (bux.Metadata, error) {
	if v == nil {
		return nil, nil
	}
	res, err := bux.UnmarshalMetadata(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMetadata2githubᚗcomᚋBuxOrgᚋbuxᚐMetadata(ctx context.Context, sel ast.SelectionSet, v bux.Metadata) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := bux.MarshalMetadata(v)
	return res
}

func (ec *executionContext) unmarshalONullString2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullString(ctx context.Context, v interface{}) (customtypes.NullString, error) {
	res, err := customtypes.UnmarshalNullString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullString2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullString(ctx context.Context, sel ast.SelectionSet, v customtypes.NullString) graphql.Marshaler {
	res := customtypes.MarshalNullString(v)
	return res
}

func (ec *executionContext) unmarshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx context.Context, v interface{}) (customtypes.NullTime, error) {
	res, err := customtypes.UnmarshalNullTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullTime2githubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚋcustom_typesᚐNullTime(ctx context.Context, sel ast.SelectionSet, v customtypes.NullTime) graphql.Marshaler {
	res := customtypes.MarshalNullTime(v)
	return res
}

func (ec *executionContext) marshalOOpReturn2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐOpReturn(ctx context.Context, sel ast.SelectionSet, v *bux.OpReturn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OpReturn(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOpReturnInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐOpReturn(ctx context.Context, v interface{}) (*bux.OpReturn, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOpReturnInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOpReturnMap2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐMapProtocol(ctx context.Context, sel ast.SelectionSet, v *bux.MapProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OpReturnMap(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOpReturnMapInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐMapProtocol(ctx context.Context, v interface{}) (*bux.MapProtocol, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOpReturnMapInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPaymailAddress2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐPaymailAddress(ctx context.Context, sel ast.SelectionSet, v []*bux.PaymailAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPaymailAddress2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐPaymailAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPaymailAddress2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐPaymailAddress(ctx context.Context, sel ast.SelectionSet, v *bux.PaymailAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymailAddress(ctx, sel, v)
}

func (ec *executionContext) marshalOPaymailP42ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐPaymailP4(ctx context.Context, sel ast.SelectionSet, v *bux.PaymailP4) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PaymailP4(ctx, sel, v)
}

func (ec *executionContext) unmarshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx context.Context, v interface{}) (*datastore.QueryParams, error) {
	if v == nil {
		return nil, nil
	}
	res, err := datastore.UnmarshalQueryParams(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQueryParams2ᚖgithubᚗcomᚋmrz1836ᚋgoᚑdatastoreᚐQueryParams(ctx context.Context, sel ast.SelectionSet, v *datastore.QueryParams) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := datastore.MarshalQueryParams(*v)
	return res
}

func (ec *executionContext) marshalOScriptOutput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐScriptOutput(ctx context.Context, sel ast.SelectionSet, v []*bux.ScriptOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOScriptOutput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐScriptOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOScriptOutput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐScriptOutput(ctx context.Context, sel ast.SelectionSet, v *bux.ScriptOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScriptOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalOScriptOutputInput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐScriptOutput(ctx context.Context, v interface{}) ([]*bux.ScriptOutput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*bux.ScriptOutput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOScriptOutputInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐScriptOutput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOScriptOutputInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐScriptOutput(ctx context.Context, v interface{}) (*bux.ScriptOutput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputScriptOutputInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSyncConfig2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐSyncConfig(ctx context.Context, sel ast.SelectionSet, v *bux.SyncConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SyncConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSyncConfigInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐSyncConfig(ctx context.Context, v interface{}) (*bux.SyncConfig, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSyncConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) marshalOTransaction2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx context.Context, sel ast.SelectionSet, v []*bux.Transaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTransaction2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransaction(ctx context.Context, sel ast.SelectionSet, v *bux.Transaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Transaction(ctx, sel, v)
}

func (ec *executionContext) marshalOTransactionConfig2githubᚗcomᚋBuxOrgᚋbuxᚐTransactionConfig(ctx context.Context, sel ast.SelectionSet, v bux.TransactionConfig) graphql.Marshaler {
	return ec._TransactionConfig(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOTransactionDirection2githubᚗcomᚋBuxOrgᚋbuxᚐTransactionDirection(ctx context.Context, v interface{}) (bux.TransactionDirection, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := bux.TransactionDirection(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTransactionDirection2githubᚗcomᚋBuxOrgᚋbuxᚐTransactionDirection(ctx context.Context, sel ast.SelectionSet, v bux.TransactionDirection) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalOTransactionInput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionInput(ctx context.Context, sel ast.SelectionSet, v []*bux.TransactionInput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTransactionInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionInput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTransactionInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionInput(ctx context.Context, sel ast.SelectionSet, v *bux.TransactionInput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransactionInput(ctx, sel, v)
}

func (ec *executionContext) marshalOTransactionOutput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionOutput(ctx context.Context, sel ast.SelectionSet, v []*bux.TransactionOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTransactionOutput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTransactionOutput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionOutput(ctx context.Context, sel ast.SelectionSet, v *bux.TransactionOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TransactionOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTransactionOutputInput2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionOutput(ctx context.Context, v interface{}) ([]*bux.TransactionOutput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*bux.TransactionOutput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTransactionOutputInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionOutput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTransactionOutputInput2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐTransactionOutput(ctx context.Context, v interface{}) (*bux.TransactionOutput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTransactionOutputInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUint322uint32(ctx context.Context, v interface{}) (uint32, error) {
	res, err := gqlgen.UnmarshalUint32(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUint322uint32(ctx context.Context, sel ast.SelectionSet, v uint32) graphql.Marshaler {
	res := gqlgen.MarshalUint32(v)
	return res
}

func (ec *executionContext) unmarshalOUint642uint64(ctx context.Context, v interface{}) (uint64, error) {
	res, err := gqlgen.UnmarshalUint64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUint642uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	res := gqlgen.MarshalUint64(v)
	return res
}

func (ec *executionContext) unmarshalOUint642ᚖuint64(ctx context.Context, v interface{}) (*uint64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := gqlgen.UnmarshalUint64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUint642ᚖuint64(ctx context.Context, sel ast.SelectionSet, v *uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := gqlgen.MarshalUint64(*v)
	return res
}

func (ec *executionContext) marshalOUtxo2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxo(ctx context.Context, sel ast.SelectionSet, v []*bux.Utxo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUtxo2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUtxo2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxo(ctx context.Context, sel ast.SelectionSet, v *bux.Utxo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Utxo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUtxoPointer2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxoPointer(ctx context.Context, v interface{}) ([]*bux.UtxoPointer, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*bux.UtxoPointer, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUtxoPointer2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxoPointer(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUtxoPointer2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐUtxoPointer(ctx context.Context, v interface{}) (*bux.UtxoPointer, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUtxoPointer(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOXpub2ᚕᚖgithubᚗcomᚋBuxOrgᚋbuxᚐXpub(ctx context.Context, sel ast.SelectionSet, v []*bux.Xpub) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOXpub2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐXpub(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOXpub2ᚖgithubᚗcomᚋBuxOrgᚋbuxᚐXpub(ctx context.Context, sel ast.SelectionSet, v *bux.Xpub) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Xpub(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
