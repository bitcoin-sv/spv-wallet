// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/transaction/broadcast/callback": {
            "post": {
                "security": [
                    {
                        "callback-auth": []
                    }
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Broadcast Callback",
                "parameters": [
                    {
                        "description": "Transaction",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/broadcast.SubmittedTx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request - Error while parsing transaction from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while updating transaction"
                    }
                }
            }
        },
        "/v1/access-key": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get access key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Get access key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the access key",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AccessKey with given id",
                        "schema": {
                            "$ref": "#/definitions/models.AccessKey"
                        }
                    },
                    "400": {
                        "description": "Bad request - Missing required field: id"
                    },
                    "403": {
                        "description": "Forbidden - Access key is not owned by the user"
                    },
                    "500": {
                        "description": "Internal server error - Error while getting access key"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Create access key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Create access key",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreateAccessKey",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accesskeys.CreateAccessKey"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created AccessKey",
                        "schema": {
                            "$ref": "#/definitions/models.AccessKey"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CreateAccessKey from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while creating new access key"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Revoke access key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Revoke access key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the access key",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created AccessKey",
                        "schema": {
                            "$ref": "#/definitions/models.AccessKey"
                        }
                    },
                    "400": {
                        "description": "Bad request - Missing required field: id"
                    },
                    "500": {
                        "description": "Internal server error - Error while revoking access key"
                    }
                }
            }
        },
        "/v1/access-key/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count of access keys",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Count of access keys",
                "parameters": [
                    {
                        "description": "Enables precise filtering of resource counts using custom conditions or metadata, catering to specific business or analysis needs",
                        "name": "CountRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.CountRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of access keys",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of access keys"
                    }
                }
            }
        },
        "/v1/access-key/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search access key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Search access key",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of access keys",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.AccessKey"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for access keys"
                    }
                }
            }
        },
        "/v1/admin/access-keys/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Access Keys Count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Access Keys Count",
                "parameters": [
                    {
                        "description": "Enables precise filtering of resource counts using custom conditions or metadata, catering to specific business or analysis needs",
                        "name": "CountRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.CountRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of access keys",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of access keys"
                    }
                }
            }
        },
        "/v1/admin/access-keys/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Access Keys Search",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Access Keys Search",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of access keys",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.AccessKey"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for access keys"
                    }
                }
            }
        },
        "/v1/admin/destinations/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for destinations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search for destinations",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of destinations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Destination"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for destinations"
                    }
                }
            }
        },
        "/v1/admin/paymail/create": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Create paymail",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create paymail",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreatePaymail",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.CreatePaymail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created PaymailAddress",
                        "schema": {
                            "$ref": "#/definitions/engine.PaymailAddress"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CreatePaymail from request body or if xpub or address are missing"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while creating new paymail address"
                    }
                }
            }
        },
        "/v1/admin/paymail/delete": {
            "delete": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Delete paymail",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete paymail",
                "parameters": [
                    {
                        "description": "PaymailAddress model containing paymail address to delete",
                        "name": "PaymailAddress",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.PaymailAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request - Error while parsing PaymailAddress from request body or if address is missing"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while deleting paymail address"
                    }
                }
            }
        },
        "/v1/admin/paymail/get": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get paymail",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get paymail",
                "parameters": [
                    {
                        "description": "PaymailAddress model containing paymail address to get",
                        "name": "PaymailAddress",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.PaymailAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaymailAddress with given address",
                        "schema": {
                            "$ref": "#/definitions/engine.PaymailAddress"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing PaymailAddress from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while getting paymail address"
                    }
                }
            }
        },
        "/v1/admin/paymails/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Paymail addresses count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Paymail addresses count",
                "parameters": [
                    {
                        "description": "Enables precise filtering of resource counts using custom conditions or metadata, catering to specific business or analysis needs",
                        "name": "CountRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.CountRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of paymail addresses",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of paymail addresses"
                    }
                }
            }
        },
        "/v1/admin/paymails/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Paymail addresses search",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Paymail addresses search",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of paymail addresses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/engine.PaymailAddress"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for paymail addresses"
                    }
                }
            }
        },
        "/v1/admin/stats": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get stats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get stats",
                "responses": {
                    "200": {
                        "description": "Stats for the admin",
                        "schema": {
                            "$ref": "#/definitions/models.AdminStats"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching admin stats"
                    }
                }
            }
        },
        "/v1/admin/status": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get status",
                "responses": {
                    "200": {
                        "description": "Status response",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/v1/admin/transactions/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Count transactions",
                "parameters": [
                    {
                        "description": "Enables precise filtering of resource counts using custom conditions or metadata, catering to specific business or analysis needs",
                        "name": "CountRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.CountRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of transactions",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of transactions"
                    }
                }
            }
        },
        "/v1/admin/transactions/record": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Record transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Record transactions",
                "parameters": [
                    {
                        "description": "RecordTransaction model containing hex of the transaction to record",
                        "name": "RecordTransaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.RecordTransaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Recorded transaction",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing RecordTransaction from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of access keys"
                    }
                }
            }
        },
        "/v1/admin/transactions/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search for transactions",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Transaction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for transactions"
                    }
                }
            }
        },
        "/v1/admin/utxos/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count utxos",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Count utxos",
                "parameters": [
                    {
                        "description": "Enables precise filtering of resource counts using custom conditions or metadata, catering to specific business or analysis needs",
                        "name": "CountRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.CountRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of utxos",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of utxos"
                    }
                }
            }
        },
        "/v1/admin/utxos/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for utxos",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search for utxos",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of utxos",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/engine.Utxo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for utxos"
                    }
                }
            }
        },
        "/v1/admin/xpub": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Create xPub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create xPub",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreateXpub",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.CreateXpub"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Xpub",
                        "schema": {
                            "$ref": "#/definitions/models.Xpub"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CreateXpub from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while creating xpub"
                    }
                }
            }
        },
        "/v1/admin/xpubs/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count xpubs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Count xpubs",
                "parameters": [
                    {
                        "description": "Enables precise filtering of resource counts using custom conditions or metadata, catering to specific business or analysis needs",
                        "name": "CountRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.CountRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of access keys",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of xpubs"
                    }
                }
            }
        },
        "/v1/admin/xpubs/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for xpubs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search for xpubs",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of xpubs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/engine.Xpub"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for xpubs"
                    }
                }
            }
        },
        "/v1/contact": {
            "post": {
                "security": [
                    {
                        "bux-auth-xpub": []
                    }
                ],
                "description": "Create contact",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Create contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "fullName",
                        "name": "fullName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "paymail",
                        "name": "paymail",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "pubKey",
                        "name": "pubKey",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "metadata",
                        "name": "metadata",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Contact created",
                        "schema": {
                            "$ref": "#/definitions/models.Contact"
                        }
                    },
                    "500": {
                        "description": "Internal server error - Error while creating contact"
                    }
                }
            }
        },
        "/v1/destination": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get a destination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Get a destination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Destination ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destination address",
                        "name": "address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destination locking script",
                        "name": "locking_script",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Destination with given id",
                        "schema": {
                            "$ref": "#/definitions/models.Destination"
                        }
                    },
                    "400": {
                        "description": "Bad request - All parameters are missing (id, address, locking_script)"
                    },
                    "500": {
                        "description": "Internal server error - Error while getting destination"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Create a new destination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Create a new destination",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreateDestination",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/destinations.CreateDestination"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Destination",
                        "schema": {
                            "$ref": "#/definitions/models.Destination"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CreateDestination from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while creating destination"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Update destination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Update destination",
                "parameters": [
                    {
                        "description": " ",
                        "name": "UpdateDestination",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/destinations.UpdateDestination"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Destination",
                        "schema": {
                            "$ref": "#/definitions/models.Destination"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing UpdateDestination from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while updating destination"
                    }
                }
            }
        },
        "/v1/destination/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count Destinations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Count Destinations",
                "parameters": [
                    {
                        "description": "Enables precise filtering of resource counts using custom conditions or metadata, catering to specific business or analysis needs",
                        "name": "CountRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.CountRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of destinations",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of destinations"
                    }
                }
            }
        },
        "/v1/destination/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for a destination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Search for a destination",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of destinations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Destination"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for destinations"
                    }
                }
            }
        },
        "/v1/transaction": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get transaction by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get transaction by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Transaction not found or associated with another xpub"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching transaction"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "New transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "New transaction",
                "parameters": [
                    {
                        "description": "NewTransaction model containing the transaction config and metadata",
                        "name": "NewTransaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transactions.NewTransaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created transaction",
                        "schema": {
                            "$ref": "#/definitions/models.DraftTransaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing NewTransaction from request body or xpub not found"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while creating transaction"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Update transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Update transaction",
                "parameters": [
                    {
                        "description": " ",
                        "name": "UpdateTransaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transactions.UpdateTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated transaction",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing UpdateTransaction from request body, tx not found or tx is not associated with the xpub"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while updating transaction"
                    }
                }
            }
        },
        "/v1/transaction/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count of transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Count of transactions",
                "parameters": [
                    {
                        "description": "Enables precise filtering of resource counts using custom conditions or metadata, catering to specific business or analysis needs",
                        "name": "CountRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.CountRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of access keys",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of transactions"
                    }
                }
            }
        },
        "/v1/transaction/record": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Record transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Record transaction",
                "parameters": [
                    {
                        "description": "Transaction to be recorded",
                        "name": "RecordTransaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transactions.RecordTransaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created transaction",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing RecordTransaction from request body or xpub not found"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while recording transaction"
                    }
                }
            }
        },
        "/v1/transaction/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Search transaction",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Transaction"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for transactions"
                    }
                }
            }
        },
        "/v1/utxo": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get UTXO",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UTXO"
                ],
                "summary": "Get UTXO",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of the transaction",
                        "name": "tx_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Output index",
                        "name": "output_index",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UTXO with given Id and output index",
                        "schema": {
                            "$ref": "#/definitions/models.Utxo"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing output_index"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching utxo"
                    }
                }
            }
        },
        "/v1/utxo/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count of UTXOs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UTXO"
                ],
                "summary": "Count of UTXOs",
                "parameters": [
                    {
                        "description": "Enables precise filtering of resource counts using custom conditions or metadata, catering to specific business or analysis needs",
                        "name": "CountRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.CountRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of utxos",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of utxos"
                    }
                }
            }
        },
        "/v1/utxo/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search UTXO",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UTXO"
                ],
                "summary": "Search UTXO",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters for metadata and custom conditions, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchRequestParameters",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/actions.SearchRequestParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of utxos",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Utxo"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchRequestParameters from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for utxos"
                    }
                }
            }
        },
        "/v1/xpub": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get xPub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "xPub"
                ],
                "summary": "Get xPub",
                "responses": {
                    "200": {
                        "description": "xPub associated with the given xPub from auth header",
                        "schema": {
                            "$ref": "#/definitions/models.Xpub"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching xPub"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    },
                    {
                        "bux-auth-xpub": []
                    }
                ],
                "description": "Update xPub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "xPub"
                ],
                "summary": "Update xPub",
                "parameters": [
                    {
                        "description": " ",
                        "name": "Metadata",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/engine.Metadata"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated xPub",
                        "schema": {
                            "$ref": "#/definitions/models.Xpub"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing Metadata from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while updating xPub"
                    }
                }
            }
        }
    },
    "definitions": {
        "accesskeys.CreateAccessKey": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "actions.CountRequestParameters": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "testColumn": "testValue"
                    }
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "actions.SearchRequestParameters": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "testColumn": "testValue"
                    }
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "admin.CreatePaymail": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The paymail address",
                    "type": "string",
                    "example": "test@spv-wallet.com"
                },
                "avatar": {
                    "description": "The avatar of the paymail (url address)",
                    "type": "string",
                    "example": "https://example.com/avatar.png"
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "public_name": {
                    "description": "The public name of the paymail",
                    "type": "string",
                    "example": "Test"
                },
                "xpub_id": {
                    "description": "The xpub with which the paymail is associated",
                    "type": "string",
                    "example": "xpub661MyMwAqRbcGpZVrSHU..."
                }
            }
        },
        "admin.CreateXpub": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The xpub key",
                    "type": "string",
                    "example": "xpub661MyMwAqRbcGpZVrSHU..."
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "admin.PaymailAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The paymail address",
                    "type": "string",
                    "example": "test@spv-wallet.com"
                }
            }
        },
        "admin.RecordTransaction": {
            "type": "object",
            "properties": {
                "hex": {
                    "description": "The transaction hex",
                    "type": "string",
                    "example": "0100000002..."
                }
            }
        },
        "broadcast.SubmittedTx": {
            "type": "object",
            "properties": {
                "blockHash": {
                    "description": "BlockHash is the hash of the block where the transaction was included.",
                    "type": "string"
                },
                "blockHeight": {
                    "description": "BlockHeight is the height of the block where the transaction was included.",
                    "type": "integer"
                },
                "extraInfo": {
                    "description": "ExtraInfo provides extra information for given transaction.",
                    "type": "string"
                },
                "merklePath": {
                    "description": "MerklePath is the Merkle path used to calculate Merkle root of the block in which the transaction was included.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the response.",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "Timestamp is the timestamp of the block where the transaction was included.",
                    "type": "string"
                },
                "title": {
                    "description": "Title is the title of the response.",
                    "type": "string"
                },
                "txStatus": {
                    "description": "TxStatus is the status of the transaction.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/broadcast.TxStatus"
                        }
                    ]
                },
                "txid": {
                    "description": "TxID is the transaction id.",
                    "type": "string"
                }
            }
        },
        "broadcast.TxStatus": {
            "type": "string",
            "enum": [
                "UNKNOWN",
                "QUEUED",
                "RECEIVED",
                "STORED",
                "ANNOUNCED_TO_NETWORK",
                "REQUESTED_BY_NETWORK",
                "SENT_TO_NETWORK",
                "ACCEPTED_BY_NETWORK",
                "SEEN_ON_NETWORK",
                "MINED",
                "SEEN_IN_ORPHAN_MEMPOOL",
                "CONFIRMED",
                "REJECTED"
            ],
            "x-enum-comments": {
                "AcceptedByNetwork": "7",
                "AnnouncedToNetwork": "4",
                "Confirmed": "108",
                "Mined": "9",
                "Queued": "1",
                "Received": "2",
                "Rejected": "109",
                "RequestedByNetwork": "5",
                "SeenInOrphanMempool": "10",
                "SeenOnNetwork": "8",
                "SentToNetwork": "6",
                "Stored": "3",
                "Unknown": "0"
            },
            "x-enum-varnames": [
                "Unknown",
                "Queued",
                "Received",
                "Stored",
                "AnnouncedToNetwork",
                "RequestedByNetwork",
                "SentToNetwork",
                "AcceptedByNetwork",
                "SeenOnNetwork",
                "Mined",
                "SeenInOrphanMempool",
                "Confirmed",
                "Rejected"
            ]
        },
        "customtypes.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        },
        "customtypes.NullTime": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "destinations.CreateDestination": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "destinations.UpdateDestination": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the destination",
                    "type": "string",
                    "example": "1CDUf7CKu8ocTTkhcYUbq75t14Ft168K65"
                },
                "id": {
                    "description": "ID of the destination which is the hash of the LockingScript",
                    "type": "string",
                    "example": "82a5d848f997819a478b05fb713208d7f3aa66da5ba00953b9845fb1701f9b98"
                },
                "locking_script": {
                    "description": "LockingScript of the destination",
                    "type": "string",
                    "example": "76a9147b05764a97f3b4b981471492aa703b188e45979b88ac"
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "engine.BUMP": {
            "type": "object",
            "properties": {
                "blockHeight": {
                    "type": "string",
                    "example": "0"
                },
                "path": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/engine.BUMPLeaf"
                        }
                    }
                }
            }
        },
        "engine.BUMPLeaf": {
            "type": "object",
            "properties": {
                "duplicate": {
                    "type": "boolean"
                },
                "hash": {
                    "type": "string"
                },
                "offset": {
                    "type": "string",
                    "example": "0"
                },
                "txid": {
                    "type": "boolean"
                }
            }
        },
        "engine.Metadata": {
            "type": "object",
            "additionalProperties": true
        },
        "engine.PaymailAddress": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Alias part of the paymail",
                    "type": "string"
                },
                "avatar": {
                    "description": "This is the url of the user (public profile)",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "description": "https://gorm.io/docs/indexes.html\nDeletedAt gorm.DeletedAt ` + "`" + `json:\"deleted_at\" toml:\"deleted_at\" yaml:\"deleted_at\" (@mrz: this was the original type)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/customtypes.NullTime"
                        }
                    ]
                },
                "domain": {
                    "description": "Domain of the paymail",
                    "type": "string"
                },
                "external_xpub_key": {
                    "description": "PublicKey hex encoded",
                    "type": "string"
                },
                "id": {
                    "description": "Model specific fields",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/engine.Metadata"
                },
                "public_name": {
                    "description": "Full username",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "xpub_id": {
                    "description": "Related xPub ID",
                    "type": "string"
                }
            }
        },
        "engine.SyncStatus": {
            "type": "string",
            "enum": [
                "pending",
                "ready",
                "processing",
                "canceled",
                "skipped",
                "error",
                "complete"
            ],
            "x-enum-varnames": [
                "SyncStatusPending",
                "SyncStatusReady",
                "SyncStatusProcessing",
                "SyncStatusCanceled",
                "SyncStatusSkipped",
                "SyncStatusError",
                "SyncStatusComplete"
            ]
        },
        "engine.Transaction": {
            "type": "object",
            "properties": {
                "block_hash": {
                    "type": "string"
                },
                "block_height": {
                    "type": "integer"
                },
                "bump": {
                    "$ref": "#/definitions/engine.BUMP"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "description": "https://gorm.io/docs/indexes.html\nDeletedAt gorm.DeletedAt ` + "`" + `json:\"deleted_at\" toml:\"deleted_at\" yaml:\"deleted_at\" (@mrz: this was the original type)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/customtypes.NullTime"
                        }
                    ]
                },
                "direction": {
                    "$ref": "#/definitions/engine.TransactionDirection"
                },
                "draft_id": {
                    "type": "string"
                },
                "fee": {
                    "type": "integer"
                },
                "hex": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/engine.Metadata"
                },
                "number_of_inputs": {
                    "type": "integer"
                },
                "number_of_outputs": {
                    "type": "integer"
                },
                "output_value": {
                    "description": "Virtual Fields",
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/engine.SyncStatus"
                },
                "total_value": {
                    "type": "integer"
                },
                "txStatus": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "xpubID": {
                    "description": "XPub of the user registering this transaction",
                    "type": "string"
                },
                "xpub_in_ids": {
                    "description": "Model specific fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "xpub_out_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "engine.TransactionDirection": {
            "type": "string",
            "enum": [
                "incoming",
                "outgoing",
                "reconcile"
            ],
            "x-enum-varnames": [
                "TransactionDirectionIn",
                "TransactionDirectionOut",
                "TransactionDirectionReconcile"
            ]
        },
        "engine.Utxo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "description": "https://gorm.io/docs/indexes.html\nDeletedAt gorm.DeletedAt ` + "`" + `json:\"deleted_at\" toml:\"deleted_at\" yaml:\"deleted_at\" (@mrz: this was the original type)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/customtypes.NullTime"
                        }
                    ]
                },
                "draft_id": {
                    "$ref": "#/definitions/customtypes.NullString"
                },
                "id": {
                    "description": "Model specific fields",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/engine.Metadata"
                },
                "output_index": {
                    "type": "integer"
                },
                "reserved_at": {
                    "$ref": "#/definitions/customtypes.NullTime"
                },
                "satoshis": {
                    "type": "integer"
                },
                "script_pub_key": {
                    "type": "string"
                },
                "spending_tx_id": {
                    "$ref": "#/definitions/customtypes.NullString"
                },
                "transaction": {
                    "description": "Virtual field holding the original transaction the utxo originated from\nThis is needed when signing a new transaction that spends the utxo",
                    "allOf": [
                        {
                            "$ref": "#/definitions/engine.Transaction"
                        }
                    ]
                },
                "transaction_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "xpub_id": {
                    "type": "string"
                }
            }
        },
        "engine.Xpub": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "current_balance": {
                    "type": "integer"
                },
                "deleted_at": {
                    "description": "https://gorm.io/docs/indexes.html\nDeletedAt gorm.DeletedAt ` + "`" + `json:\"deleted_at\" toml:\"deleted_at\" yaml:\"deleted_at\" (@mrz: this was the original type)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/customtypes.NullTime"
                        }
                    ]
                },
                "id": {
                    "description": "Model specific fields",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/engine.Metadata"
                },
                "next_external_num": {
                    "type": "integer"
                },
                "next_internal_num": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.AccessKey": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is an access key id.",
                    "type": "string"
                },
                "key": {
                    "description": "Key is a string representation of an access key.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": true
                },
                "revoked_at": {
                    "description": "RevokedAt is a time when access key was revoked.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string"
                },
                "xpub_id": {
                    "description": "XpubID is an access key's xpub related id.",
                    "type": "string"
                }
            }
        },
        "models.AdminStats": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Balance is a total balance of all xpubs.",
                    "type": "integer"
                },
                "destinations": {
                    "description": "Destinations is a total number of destinations.",
                    "type": "integer"
                },
                "paymail_addresses": {
                    "description": "PaymailAddresses is a total number of paymail addresses.",
                    "type": "integer"
                },
                "transactions": {
                    "description": "Transactions is a total number of committed transactions.",
                    "type": "integer"
                },
                "transactions_per_day": {
                    "description": "TransactionsPerDay is a total number of committed transactions per day.",
                    "type": "object",
                    "additionalProperties": true
                },
                "utxos": {
                    "description": "Utxos is a total number of utxos.",
                    "type": "integer"
                },
                "utxos_per_type": {
                    "description": "UtxosPerType are utxos grouped by type.",
                    "type": "object",
                    "additionalProperties": true
                },
                "xpubs": {
                    "description": "Xpubs is a total number of xpubs.",
                    "type": "integer"
                }
            }
        },
        "models.Contact": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": true
                },
                "paymail": {
                    "type": "string"
                },
                "pubKey": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string"
                },
                "xpubID": {
                    "type": "string"
                }
            }
        },
        "models.Destination": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is a destination's address.",
                    "type": "string"
                },
                "chain": {
                    "description": "Chain is a destination's chain representation.",
                    "type": "integer"
                },
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string"
                },
                "draft_id": {
                    "description": "DraftID is a destination's draft id.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a destination id.",
                    "type": "string"
                },
                "locking_script": {
                    "description": "LockingScript is a destination's locking script.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": true
                },
                "monitor": {
                    "description": "Monitor is a time when destination was monitored.",
                    "type": "string"
                },
                "num": {
                    "description": "Num is a destination's num representation.",
                    "type": "integer"
                },
                "type": {
                    "description": "Type is a destination's type.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string"
                },
                "xpub_id": {
                    "description": "XpubID is a destination's xpub related id used to register destination.",
                    "type": "string"
                }
            }
        },
        "models.DraftTransaction": {
            "type": "object",
            "properties": {
                "configuration": {
                    "description": "Configuration contains draft transaction configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransactionConfig"
                        }
                    ]
                },
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string"
                },
                "expires_at": {
                    "description": "ExpiresAt is a time when draft transaction expired.",
                    "type": "string"
                },
                "final_tx_id": {
                    "description": "FinalTxID is a final transaction id.",
                    "type": "string"
                },
                "hex": {
                    "description": "Hex is a draft transaction hex.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a draft transaction id.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "description": "Status is a draft transaction lastly monitored status.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string"
                },
                "xpub_id": {
                    "description": "XpubID is a draft transaction's xpub used to sign transaction.",
                    "type": "string"
                }
            }
        },
        "models.FeeUnit": {
            "type": "object",
            "properties": {
                "bytes": {
                    "description": "Bytes is a fee unit bytes representation.",
                    "type": "integer"
                },
                "satoshis": {
                    "description": "Satoshis is a fee unit satoshis amount.",
                    "type": "integer"
                }
            }
        },
        "models.MapProtocol": {
            "type": "object",
            "properties": {
                "app": {
                    "description": "App is a map protocol app.",
                    "type": "string"
                },
                "keys": {
                    "description": "Keys is a map protocol keys.",
                    "type": "object",
                    "additionalProperties": true
                },
                "type": {
                    "description": "Type is a map protocol type.",
                    "type": "string"
                }
            }
        },
        "models.OpReturn": {
            "type": "object",
            "properties": {
                "hex": {
                    "description": "Hex is a full hex of op return.",
                    "type": "string"
                },
                "hex_parts": {
                    "description": "HexParts is a slice of splitted hex parts.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "map": {
                    "description": "Map is a pointer to a map protocol object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MapProtocol"
                        }
                    ]
                },
                "string_parts": {
                    "description": "StringParts is a slice of string parts.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.PaymailP4": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Alias is a paymail p4 alias.",
                    "type": "string"
                },
                "domain": {
                    "description": "Domain is a paymail p4 domain.",
                    "type": "string"
                },
                "from_paymail": {
                    "description": "FromPaymail is a paymail p4 from paymail.",
                    "type": "string"
                },
                "note": {
                    "description": "Note is a paymail p4 note.",
                    "type": "string"
                },
                "pub_key": {
                    "description": "PubKey is a paymail p4 pub key.",
                    "type": "string"
                },
                "receive_endpoint": {
                    "description": "ReceiveEndpoint is a paymail p4 receive endpoint.",
                    "type": "string"
                },
                "reference_id": {
                    "description": "ReferenceID is a paymail p4 reference id.",
                    "type": "string"
                },
                "resolution_type": {
                    "description": "ResolutionType is a paymail p4 resolution type.",
                    "type": "string"
                }
            }
        },
        "models.ScriptOutput": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is a script output address.",
                    "type": "string"
                },
                "satoshis": {
                    "description": "Satoshis is a script output satoshis.",
                    "type": "integer"
                },
                "script": {
                    "description": "Script is a script output script.",
                    "type": "string"
                },
                "script_type": {
                    "description": "ScriptType is a script output script type.",
                    "type": "string"
                }
            }
        },
        "models.SyncConfig": {
            "type": "object",
            "properties": {
                "broadcast": {
                    "description": "Broadcast is a flag that indicates whether to broadcast transaction or not.",
                    "type": "boolean"
                },
                "broadcast_instant": {
                    "description": "BroadcastInstant is a flag that indicates whether to broadcast transaction instantly or not.",
                    "type": "boolean"
                },
                "paymail_p2p": {
                    "description": "PaymailP2P is a flag that indicates whether to use paymail p2p or not.",
                    "type": "boolean"
                },
                "sync_on_chain": {
                    "description": "SyncOnChain is a flag that indicates whether to sync transaction on chain or not.",
                    "type": "boolean"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "block_hash": {
                    "description": "BlockHash is a block hash that transaction is in.",
                    "type": "string"
                },
                "block_height": {
                    "description": "BlockHeight is a block height that transaction is in.",
                    "type": "integer"
                },
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string"
                },
                "direction": {
                    "description": "TransactionDirection is a transaction direction (inbound/outbound).",
                    "type": "string"
                },
                "draft_id": {
                    "description": "DraftID is a transaction related draft id.",
                    "type": "string"
                },
                "fee": {
                    "description": "Fee is a transaction fee.",
                    "type": "integer"
                },
                "hex": {
                    "description": "Hex is a transaction hex.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a transaction id.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": true
                },
                "number_of_inputs": {
                    "description": "NumberOfInputs is a number of transaction inputs.",
                    "type": "integer"
                },
                "number_of_outputs": {
                    "description": "NumberOfOutputs is a number of transaction outputs.",
                    "type": "integer"
                },
                "output_value": {
                    "description": "OutputValue is a total output value.",
                    "type": "integer"
                },
                "outputs": {
                    "description": "Outputs represents all spv-wallet-transaction outputs. Will be shown only for admin.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "status": {
                    "description": "Status is a transaction status.",
                    "type": "string"
                },
                "total_value": {
                    "description": "TotalValue is a total input value.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string"
                },
                "xpub_in_ids": {
                    "description": "XpubInIDs is a slice of xpub input ids.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "xpub_out_ids": {
                    "description": "XpubOutIDs is a slice of xpub output ids.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.TransactionConfig": {
            "type": "object",
            "properties": {
                "change_destinations": {
                    "description": "ChangeDestinations is a slice of change destinations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Destination"
                    }
                },
                "change_destinations_strategy": {
                    "description": "ChangeStrategy is a change strategy.",
                    "type": "string"
                },
                "change_minimum_satoshis": {
                    "description": "ChangeMinimumSatoshis is a minimum satoshis for change.",
                    "type": "integer"
                },
                "change_number_of_destinations": {
                    "description": "ChangeNumberOfDestinations is a number of change destinations.",
                    "type": "integer"
                },
                "change_satoshis": {
                    "description": "ChangeSatoshis is a change satoshis.",
                    "type": "integer"
                },
                "expires_in": {
                    "description": "ExpiresAt is a time when transaction expires.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "fee": {
                    "description": "Fee is a fee amount.",
                    "type": "integer"
                },
                "fee_unit": {
                    "description": "FeeUnit is a pointer to a fee unit object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.FeeUnit"
                        }
                    ]
                },
                "from_utxos": {
                    "description": "FromUtxos is a slice of from utxos used to build transaction.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UtxoPointer"
                    }
                },
                "include_utxos": {
                    "description": "IncludeUtxos is a slice of utxos to include in transaction.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UtxoPointer"
                    }
                },
                "inputs": {
                    "description": "Inputs is a slice of transaction inputs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TransactionInput"
                    }
                },
                "outputs": {
                    "description": "Outputs is a slice of transaction outputs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TransactionOutput"
                    }
                },
                "send_all_to": {
                    "description": "SendAllTo is a pointer to a transaction output object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransactionOutput"
                        }
                    ]
                },
                "sync": {
                    "description": "Sync contains sync configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SyncConfig"
                        }
                    ]
                }
            }
        },
        "models.TransactionInput": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string"
                },
                "destination": {
                    "description": "Destination is a pointer to a destination object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Destination"
                        }
                    ]
                },
                "draft_id": {
                    "description": "DraftID is a utxo transaction related draft id.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a utxo id.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": true
                },
                "output_index": {
                    "description": "OutputIndex is a output index that utxo points to.",
                    "type": "integer"
                },
                "reserved_at": {
                    "description": "ReservedAt is a time utxo was reserved at.",
                    "type": "string"
                },
                "satoshis": {
                    "description": "Satoshis is a utxo satoshis amount.",
                    "type": "integer"
                },
                "script_pub_key": {
                    "description": "ScriptPubKey is a utxo script pub key.",
                    "type": "string"
                },
                "spending_tx_id": {
                    "description": "SpendingTxID is a spending transaction id - null if not spent yet.",
                    "type": "string"
                },
                "transaction": {
                    "description": "Transaction is a transaction pointer that utxo points to.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    ]
                },
                "transaction_id": {
                    "description": "TransactionID is a transaction id that utxo points to.",
                    "type": "string"
                },
                "type": {
                    "description": "Type is a utxo type.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string"
                },
                "xpub_id": {
                    "description": "XpubID is a utxo related xpub id.",
                    "type": "string"
                }
            }
        },
        "models.TransactionOutput": {
            "type": "object",
            "properties": {
                "op_return": {
                    "description": "OpReturn is a pointer to a op return object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.OpReturn"
                        }
                    ]
                },
                "paymail_p4": {
                    "description": "PaymailP4 is a pointer to a paymail p4 object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PaymailP4"
                        }
                    ]
                },
                "satoshis": {
                    "description": "Satoshis is a satoshis amount.",
                    "type": "integer"
                },
                "script": {
                    "description": "Script is a transaction output string representation of script.",
                    "type": "string"
                },
                "scripts": {
                    "description": "ScriptType is a transaction output script type.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ScriptOutput"
                    }
                },
                "to": {
                    "description": "To is a transaction output destination address.",
                    "type": "string"
                },
                "use_for_change": {
                    "description": "UseForChange is a flag that indicates if this output should be used for change.",
                    "type": "boolean"
                }
            }
        },
        "models.Utxo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string"
                },
                "draft_id": {
                    "description": "DraftID is a utxo transaction related draft id.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a utxo id.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": true
                },
                "output_index": {
                    "description": "OutputIndex is a output index that utxo points to.",
                    "type": "integer"
                },
                "reserved_at": {
                    "description": "ReservedAt is a time utxo was reserved at.",
                    "type": "string"
                },
                "satoshis": {
                    "description": "Satoshis is a utxo satoshis amount.",
                    "type": "integer"
                },
                "script_pub_key": {
                    "description": "ScriptPubKey is a utxo script pub key.",
                    "type": "string"
                },
                "spending_tx_id": {
                    "description": "SpendingTxID is a spending transaction id - null if not spent yet.",
                    "type": "string"
                },
                "transaction": {
                    "description": "Transaction is a transaction pointer that utxo points to.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    ]
                },
                "transaction_id": {
                    "description": "TransactionID is a transaction id that utxo points to.",
                    "type": "string"
                },
                "type": {
                    "description": "Type is a utxo type.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string"
                },
                "xpub_id": {
                    "description": "XpubID is a utxo related xpub id.",
                    "type": "string"
                }
            }
        },
        "models.UtxoPointer": {
            "type": "object",
            "properties": {
                "output_index": {
                    "description": "OutputIndex is a output index that utxo points to.",
                    "type": "integer"
                },
                "transaction_id": {
                    "description": "TransactionID is a transaction id that utxo points to.",
                    "type": "string"
                }
            }
        },
        "models.Xpub": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string"
                },
                "current_balance": {
                    "description": "CurrentBalance is a xpub's current balance.",
                    "type": "integer"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is a xpub id.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": true
                },
                "next_external_num": {
                    "description": "NextExternalNum is a next external num.",
                    "type": "integer"
                },
                "next_internal_num": {
                    "description": "NextInternalNum is a next internal num.",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "transactions.NewTransaction": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Configuration of the transaction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransactionConfig"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "transactions.RecordTransaction": {
            "type": "object",
            "properties": {
                "hex": {
                    "description": "Hex of the transaction",
                    "type": "string",
                    "example": "0100000002..."
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "reference_id": {
                    "description": "ReferenceID which is a ID of the draft transaction",
                    "type": "string",
                    "example": "b356f7fa00cd3f20cce6c21d704cd13e871d28d714a5ebd0532f5a0e0cde63f7"
                }
            }
        },
        "transactions.UpdateTransaction": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Id of the transaction which is a hash of the transaction",
                    "type": "string",
                    "example": "01d0d0067652f684c6acb3683763f353fce55f6496521c7d99e71e1d27e53f5c"
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "callback-auth": {
            "type": "apiKey",
            "name": "authorization",
            "in": "header"
        },
        "x-auth-xpub": {
            "type": "apiKey",
            "name": "x-auth-xpub",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v0.12.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "SPV Wallet",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
