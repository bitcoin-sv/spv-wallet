// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/transaction/broadcast/callback": {
            "post": {
                "security": [
                    {
                        "callback-auth": []
                    }
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Endpoint designed for receiving callbacks from Arc (service responsible for submitting transactions to the BSV network)",
                "parameters": [
                    {
                        "description": "Transaction",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/broadcast.SubmittedTx"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request - Error while parsing transaction from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while updating transaction"
                    }
                }
            }
        },
        "/v1/access-key": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get access key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Get access key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the access key",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AccessKey with given id",
                        "schema": {
                            "$ref": "#/definitions/models.AccessKey"
                        }
                    },
                    "400": {
                        "description": "Bad request - Missing required field: id"
                    },
                    "403": {
                        "description": "Forbidden - Access key is not owned by the user"
                    },
                    "500": {
                        "description": "Internal server error - Error while getting access key"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Create access key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Create access key",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreateAccessKey",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accesskeys.CreateAccessKey"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created AccessKey",
                        "schema": {
                            "$ref": "#/definitions/models.AccessKey"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CreateAccessKey from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while creating new access key"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Revoke access key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Revoke access key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the access key",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Revoked AccessKey",
                        "schema": {
                            "$ref": "#/definitions/models.AccessKey"
                        }
                    },
                    "400": {
                        "description": "Bad request - Missing required field: id"
                    },
                    "500": {
                        "description": "Internal server error - Error while revoking access key"
                    }
                }
            }
        },
        "/v1/access-key/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count of access keys",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Count of access keys",
                "parameters": [
                    {
                        "description": "Enables filtering of elements to be counted",
                        "name": "CountAccessKeys",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/accesskeys.CountAccessKeys"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of access keys",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountAccessKeys from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of access keys"
                    }
                }
            }
        },
        "/v1/access-key/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search access key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Access-key"
                ],
                "summary": "Search access key",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchAccessKeys",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/accesskeys.SearchAccessKeys"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of access keys",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AccessKey"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while SearchAccessKeys from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for access keys"
                    }
                }
            }
        },
        "/v1/admin/access-keys/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Access Keys Count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Access Keys Count",
                "parameters": [
                    {
                        "description": "Enables filtering of elements to be counted",
                        "name": "CountAccessKeys",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.CountAccessKeys"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of access keys",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountAccessKeys from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of access keys"
                    }
                }
            }
        },
        "/v1/admin/access-keys/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Access Keys Search",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Access Keys Search",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchAccessKeys",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.SearchAccessKeys"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of access keys",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AccessKey"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchAccessKeys from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for access keys"
                    }
                }
            }
        },
        "/v1/admin/contact/accepted/{id}": {
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Accept contact",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Accept contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact id",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Changed contact",
                        "schema": {
                            "$ref": "#/definitions/models.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while getting id from path"
                    },
                    "404": {
                        "description": "Not found - Error while getting contact by id"
                    },
                    "422": {
                        "description": "Unprocessable entity - Incorrect status of contact"
                    },
                    "500": {
                        "description": "Internal server error - Error while changing contact status"
                    }
                }
            }
        },
        "/v1/admin/contact/rejected/{id}": {
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Reject contact",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Reject contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact id",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rejected contact",
                        "schema": {
                            "$ref": "#/definitions/models.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while getting id from path"
                    },
                    "404": {
                        "description": "Not found - Error while getting contact by id"
                    },
                    "422": {
                        "description": "Unprocessable entity - Incorrect status of contact"
                    },
                    "500": {
                        "description": "Internal server error - Error while changing contact status"
                    }
                }
            }
        },
        "/v1/admin/contact/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for contacts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search for contacts",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchContacts",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.SearchContacts"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contacts",
                        "schema": {
                            "$ref": "#/definitions/models.SearchContactsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchContacts from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for contacts"
                    }
                }
            }
        },
        "/v1/admin/contact/{id}": {
            "delete": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Delete contact",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact id",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request - Error while parsing UpdateContact from request body or getting id from path"
                    },
                    "404": {
                        "description": "Not found - Error while getting contact by id"
                    },
                    "422": {
                        "description": "Unprocessable entity - Incorrect status of contact"
                    },
                    "500": {
                        "description": "Internal server error - Error while updating contact"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Update contact FullName or Metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update contact FullName or Metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contact id",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "description": "FullName and metadata to update",
                        "name": "UpdateContact",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.UpdateContact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated contact",
                        "schema": {
                            "$ref": "#/definitions/models.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing UpdateContact from request body or getting id from path"
                    },
                    "404": {
                        "description": "Not found - Error while getting contact by id"
                    },
                    "422": {
                        "description": "Unprocessable entity - Incorrect status of contact"
                    },
                    "500": {
                        "description": "Internal server error - Error while updating contact"
                    }
                }
            }
        },
        "/v1/admin/destinations/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for destinations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search for destinations",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchDestinations",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.SearchDestinations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of destinations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Destination"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchDestinations from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for destinations"
                    }
                }
            }
        },
        "/v1/admin/paymail/create": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Create paymail",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create paymail",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreatePaymail",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.CreatePaymail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created PaymailAddress",
                        "schema": {
                            "$ref": "#/definitions/models.PaymailAddress"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CreatePaymail from request body or if xpub or address are missing"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while creating new paymail address"
                    }
                }
            }
        },
        "/v1/admin/paymail/delete": {
            "delete": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Delete paymail",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete paymail",
                "parameters": [
                    {
                        "description": "PaymailAddress model containing paymail address to delete",
                        "name": "PaymailAddress",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.PaymailAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request - Error while parsing PaymailAddress from request body or if address is missing"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while deleting paymail address"
                    }
                }
            }
        },
        "/v1/admin/paymail/get": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get paymail",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get paymail",
                "parameters": [
                    {
                        "description": "PaymailAddress model containing paymail address to get",
                        "name": "PaymailAddress",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.PaymailAddress"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaymailAddress with given address",
                        "schema": {
                            "$ref": "#/definitions/models.PaymailAddress"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing PaymailAddress from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while getting paymail address"
                    }
                }
            }
        },
        "/v1/admin/paymails/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Paymail addresses count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Paymail addresses count",
                "parameters": [
                    {
                        "description": "Enables filtering of elements to be counted",
                        "name": "CountPaymails",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.CountPaymails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of paymail addresses",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountPaymails from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of paymail addresses"
                    }
                }
            }
        },
        "/v1/admin/paymails/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Paymail addresses search",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Paymail addresses search",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchPaymails",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.SearchPaymails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of paymail addresses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PaymailAddress"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchPaymails from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for paymail addresses"
                    }
                }
            }
        },
        "/v1/admin/shared-config": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get shared config",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get shared config",
                "responses": {
                    "200": {
                        "description": "Shared configuration",
                        "schema": {
                            "$ref": "#/definitions/models.SharedConfig"
                        }
                    }
                }
            }
        },
        "/v1/admin/stats": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get stats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get stats",
                "responses": {
                    "200": {
                        "description": "Stats for the admin",
                        "schema": {
                            "$ref": "#/definitions/models.AdminStats"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching admin stats"
                    }
                }
            }
        },
        "/v1/admin/status": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get status",
                "responses": {
                    "200": {
                        "description": "Status response",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/v1/admin/transactions/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Count transactions",
                "parameters": [
                    {
                        "description": "Enables filtering of elements to be counted",
                        "name": "CountTransactions",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.CountTransactions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of transactions",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountTransactions from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of transactions"
                    }
                }
            }
        },
        "/v1/admin/transactions/record": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Record transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Record transactions",
                "parameters": [
                    {
                        "description": "RecordTransaction model containing hex of the transaction to record",
                        "name": "RecordTransaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.RecordTransaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Recorded transaction",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing RecordTransaction from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of access keys"
                    }
                }
            }
        },
        "/v1/admin/transactions/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search for transactions",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchTransactions",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.SearchTransactions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchTransactions from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for transactions"
                    }
                }
            }
        },
        "/v1/admin/utxos/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count utxos",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Count utxos",
                "parameters": [
                    {
                        "description": "Enables filtering of elements to be counted",
                        "name": "CountUtxos",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.CountUtxos"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of utxos",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountUtxos from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of utxos"
                    }
                }
            }
        },
        "/v1/admin/utxos/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for utxos",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search for utxos",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchUtxos",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.SearchUtxos"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of utxos",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Utxo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchUtxos from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for utxos"
                    }
                }
            }
        },
        "/v1/admin/xpub": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Create xPub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create xPub",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreateXpub",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.CreateXpub"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Xpub",
                        "schema": {
                            "$ref": "#/definitions/models.Xpub"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CreateXpub from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while creating xpub"
                    }
                }
            }
        },
        "/v1/admin/xpubs/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count xpubs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Count xpubs",
                "parameters": [
                    {
                        "description": "Enables filtering of elements to be counted",
                        "name": "CountXpubs",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.CountXpubs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of access keys",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountXpubs from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of xpubs"
                    }
                }
            }
        },
        "/v1/admin/xpubs/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for xpubs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Search for xpubs",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchXpubs",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/admin.SearchXpubs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of xpubs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Xpub"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchXpubs from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for xpubs"
                    }
                }
            }
        },
        "/v1/contact/accepted/{paymail}": {
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Accept contact. For contact with status \"awaiting\" change status to \"unconfirmed\"",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Accept contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Paymail address of the contact the user wants to accept",
                        "name": "paymail",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Contact not found"
                    },
                    "422": {
                        "description": "Contact status not awaiting"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/contact/confirmed/{paymail}": {
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Confirm contact. For contact with status \"unconfirmed\" change status to \"confirmed\"",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Confirm contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Paymail address of the contact the user wants to confirm",
                        "name": "paymail",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Contact not found"
                    },
                    "422": {
                        "description": "Contact status not unconfirmed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/contact/rejected/{paymail}": {
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Reject contact. For contact with status \"awaiting\" delete contact",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Reject contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Paymail address of the contact the user wants to reject",
                        "name": "paymail",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Contact not found"
                    },
                    "422": {
                        "description": "Contact status not awaiting"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/contact/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search contacts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Search contacts",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchContacts",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/contacts.SearchContacts"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contacts",
                        "schema": {
                            "$ref": "#/definitions/models.SearchContactsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchContacts from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for contacts"
                    }
                }
            }
        },
        "/v1/contact/unconfirmed/{paymail}": {
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Unconfirm contact. For contact with status \"confirmed\" change status to \"unconfirmed\"",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Unconfirm contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Paymail address of the contact the user wants to unconfirm",
                        "name": "paymail",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Contact not found"
                    },
                    "422": {
                        "description": "Contact status not confirmed"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/contact/{paymail}": {
            "put": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Add or update contact. When adding a new contact, the system utilizes Paymail's PIKE capability to dispatch an invitation request, asking the counterparty to include the current user in their contacts.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Upsert contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Paymail address of the contact the user wants to add/modify",
                        "name": "paymail",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Full name and metadata needed to add/modify contact",
                        "name": "UpsertContact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contacts.UpsertContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/v1/destination": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get a destination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Get a destination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Destination ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destination address",
                        "name": "address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destination locking script",
                        "name": "locking_script",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Destination with given id",
                        "schema": {
                            "$ref": "#/definitions/models.Destination"
                        }
                    },
                    "400": {
                        "description": "Bad request - All parameters are missing (id, address, locking_script)"
                    },
                    "500": {
                        "description": "Internal server error - Error while getting destination"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Create a new destination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Create a new destination",
                "parameters": [
                    {
                        "description": " ",
                        "name": "CreateDestination",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/destinations.CreateDestination"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Destination",
                        "schema": {
                            "$ref": "#/definitions/models.Destination"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CreateDestination from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while creating destination"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Update destination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Update destination",
                "parameters": [
                    {
                        "description": " ",
                        "name": "UpdateDestination",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/destinations.UpdateDestination"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Destination",
                        "schema": {
                            "$ref": "#/definitions/models.Destination"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing UpdateDestination from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while updating destination"
                    }
                }
            }
        },
        "/v1/destination/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count Destinations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Count Destinations",
                "parameters": [
                    {
                        "description": "Enables filtering of elements to be counted",
                        "name": "CountDestinations",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/destinations.CountDestinations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of destinations",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountDestinations from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of destinations"
                    }
                }
            }
        },
        "/v1/destination/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search for a destination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Destinations"
                ],
                "summary": "Search for a destination",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchDestinations",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/destinations.SearchDestinations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of destinations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Destination"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchDestinations from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for destinations"
                    }
                }
            }
        },
        "/v1/transaction": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get transaction by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get transaction by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Transaction not found or associated with another xpub"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching transaction"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "New transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "New transaction",
                "parameters": [
                    {
                        "description": "NewTransaction model containing the transaction config and metadata",
                        "name": "NewTransaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transactions.NewTransaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created transaction",
                        "schema": {
                            "$ref": "#/definitions/models.DraftTransaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing NewTransaction from request body or xpub not found"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while creating transaction"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Update transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Update transaction",
                "parameters": [
                    {
                        "description": " ",
                        "name": "UpdateTransaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transactions.UpdateTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated transaction",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing UpdateTransaction from request body, tx not found or tx is not associated with the xpub"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while updating transaction"
                    }
                }
            }
        },
        "/v1/transaction/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count of transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Count of transactions",
                "parameters": [
                    {
                        "description": "Enables filtering of elements to be counted",
                        "name": "CountTransactions",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/transactions.CountTransactions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of access keys",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountTransactions from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of transactions"
                    }
                }
            }
        },
        "/v1/transaction/record": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Record transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Record transaction",
                "parameters": [
                    {
                        "description": "Transaction to be recorded",
                        "name": "RecordTransaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transactions.RecordTransaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created transaction",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing RecordTransaction from request body or xpub not found"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while recording transaction"
                    }
                }
            }
        },
        "/v1/transaction/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Search transaction",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchTransactions",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/transactions.SearchTransactions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchTransactions from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for transactions"
                    }
                }
            }
        },
        "/v1/utxo": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get UTXO",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UTXO"
                ],
                "summary": "Get UTXO",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of the transaction",
                        "name": "tx_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Output index",
                        "name": "output_index",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UTXO with given Id and output index",
                        "schema": {
                            "$ref": "#/definitions/models.Utxo"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing output_index"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching utxo"
                    }
                }
            }
        },
        "/v1/utxo/count": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Count of UTXOs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UTXO"
                ],
                "summary": "Count of UTXOs",
                "parameters": [
                    {
                        "description": "Enables filtering of elements to be counted",
                        "name": "CountUtxos",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/utxos.CountUtxos"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of utxos",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing CountUtxos from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching count of utxos"
                    }
                }
            }
        },
        "/v1/utxo/search": {
            "post": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Search UTXO",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UTXO"
                ],
                "summary": "Search UTXO",
                "parameters": [
                    {
                        "description": "Supports targeted resource searches with filters and metadata, plus options for pagination and sorting to streamline data exploration and analysis",
                        "name": "SearchUtxos",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/utxos.SearchUtxos"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of utxos",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Utxo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing SearchUtxos from request body"
                    },
                    "500": {
                        "description": "Internal server error - Error while searching for utxos"
                    }
                }
            }
        },
        "/v1/xpub": {
            "get": {
                "security": [
                    {
                        "x-auth-xpub": []
                    }
                ],
                "description": "Get xPub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "xPub"
                ],
                "summary": "Get xPub",
                "responses": {
                    "200": {
                        "description": "xPub associated with the given xPub from auth header",
                        "schema": {
                            "$ref": "#/definitions/models.Xpub"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Error while fetching xPub"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "x-auth-xpub": []
                    },
                    {
                        "bux-auth-xpub": []
                    }
                ],
                "description": "Update xPub",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "xPub"
                ],
                "summary": "Update xPub",
                "parameters": [
                    {
                        "description": " ",
                        "name": "Metadata",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/engine.Metadata"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated xPub",
                        "schema": {
                            "$ref": "#/definitions/models.Xpub"
                        }
                    },
                    "400": {
                        "description": "Bad request - Error while parsing Metadata from request body"
                    },
                    "500": {
                        "description": "Internal Server Error - Error while updating xPub"
                    }
                }
            }
        }
    },
    "definitions": {
        "accesskeys.CountAccessKeys": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.AccessKeyFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "accesskeys.CreateAccessKey": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "accesskeys.SearchAccessKeys": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.AccessKeyFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "admin.CountAccessKeys": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.AdminAccessKeyFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "admin.CountDestinations": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.DestinationFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "admin.CountPaymails": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.AdminPaymailFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "admin.CountTransactions": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TransactionFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "admin.CountUtxos": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.AdminUtxoFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "admin.CountXpubs": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.XpubFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "admin.CreatePaymail": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The paymail address",
                    "type": "string",
                    "example": "test@spv-wallet.com"
                },
                "avatar": {
                    "description": "The avatar of the paymail (url address)",
                    "type": "string",
                    "example": "https://example.com/avatar.png"
                },
                "key": {
                    "description": "The xpub with which the paymail is associated",
                    "type": "string",
                    "example": "xpub661MyMwAqRbcGpZVrSHU..."
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "public_name": {
                    "description": "The public name of the paymail",
                    "type": "string",
                    "example": "Test"
                }
            }
        },
        "admin.CreateXpub": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The xpub key",
                    "type": "string",
                    "example": "xpub661MyMwAqRbcGpZVrSHU..."
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "admin.PaymailAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "The paymail address",
                    "type": "string",
                    "example": "test@spv-wallet.com"
                }
            }
        },
        "admin.RecordTransaction": {
            "type": "object",
            "properties": {
                "hex": {
                    "description": "The transaction hex",
                    "type": "string",
                    "example": "0100000002..."
                }
            }
        },
        "admin.SearchAccessKeys": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.AdminAccessKeyFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "admin.SearchContacts": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.ContactFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "admin.SearchDestinations": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.DestinationFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "admin.SearchPaymails": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.AdminPaymailFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "admin.SearchTransactions": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TransactionFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "admin.SearchUtxos": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.AdminUtxoFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "admin.SearchXpubs": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.XpubFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "admin.UpdateContact": {
            "type": "object",
            "properties": {
                "fullName": {
                    "description": "New name for the contact",
                    "type": "string",
                    "example": "John Doe"
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "broadcast.SubmittedTx": {
            "type": "object",
            "properties": {
                "blockHash": {
                    "description": "BlockHash is the hash of the block where the transaction was included.",
                    "type": "string"
                },
                "blockHeight": {
                    "description": "BlockHeight is the height of the block where the transaction was included.",
                    "type": "integer"
                },
                "extraInfo": {
                    "description": "ExtraInfo provides extra information for given transaction.",
                    "type": "string"
                },
                "merklePath": {
                    "description": "MerklePath is the Merkle path used to calculate Merkle root of the block in which the transaction was included.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the response.",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "Timestamp is the timestamp of the block where the transaction was included.",
                    "type": "string"
                },
                "title": {
                    "description": "Title is the title of the response.",
                    "type": "string"
                },
                "txStatus": {
                    "description": "TxStatus is the status of the transaction.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/broadcast.TxStatus"
                        }
                    ]
                },
                "txid": {
                    "description": "TxID is the transaction id.",
                    "type": "string"
                }
            }
        },
        "broadcast.TxStatus": {
            "type": "string",
            "enum": [
                "UNKNOWN",
                "QUEUED",
                "RECEIVED",
                "STORED",
                "ANNOUNCED_TO_NETWORK",
                "REQUESTED_BY_NETWORK",
                "SENT_TO_NETWORK",
                "ACCEPTED_BY_NETWORK",
                "SEEN_ON_NETWORK",
                "MINED",
                "SEEN_IN_ORPHAN_MEMPOOL",
                "CONFIRMED",
                "REJECTED"
            ],
            "x-enum-comments": {
                "AcceptedByNetwork": "7",
                "AnnouncedToNetwork": "4",
                "Confirmed": "108",
                "Mined": "9",
                "Queued": "1",
                "Received": "2",
                "Rejected": "109",
                "RequestedByNetwork": "5",
                "SeenInOrphanMempool": "10",
                "SeenOnNetwork": "8",
                "SentToNetwork": "6",
                "Stored": "3",
                "Unknown": "0"
            },
            "x-enum-varnames": [
                "Unknown",
                "Queued",
                "Received",
                "Stored",
                "AnnouncedToNetwork",
                "RequestedByNetwork",
                "SentToNetwork",
                "AcceptedByNetwork",
                "SeenOnNetwork",
                "Mined",
                "SeenInOrphanMempool",
                "Confirmed",
                "Rejected"
            ]
        },
        "contacts.SearchContacts": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.ContactFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "contacts.UpsertContact": {
            "type": "object",
            "properties": {
                "fullName": {
                    "description": "The complete name of the contact, including first name, middle name (if applicable), and last name.",
                    "type": "string"
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "requesterPaymail": {
                    "description": "Optional paymail address owned by the user to bind the contact to. It is required in case if user has multiple paymail addresses",
                    "type": "string"
                }
            }
        },
        "destinations.CountDestinations": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.DestinationFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "destinations.CreateDestination": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "destinations.SearchDestinations": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.DestinationFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "destinations.UpdateDestination": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the destination",
                    "type": "string",
                    "example": "1CDUf7CKu8ocTTkhcYUbq75t14Ft168K65"
                },
                "id": {
                    "description": "ID of the destination which is the hash of the LockingScript",
                    "type": "string",
                    "example": "82a5d848f997819a478b05fb713208d7f3aa66da5ba00953b9845fb1701f9b98"
                },
                "locking_script": {
                    "description": "LockingScript of the destination",
                    "type": "string",
                    "example": "76a9147b05764a97f3b4b981471492aa703b188e45979b88ac"
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "engine.Metadata": {
            "type": "object",
            "additionalProperties": true
        },
        "filter.AccessKeyFilter": {
            "type": "object",
            "properties": {
                "createdRange": {
                    "description": "CreatedRange specifies the time range when a record was created.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "includeDeleted": {
                    "description": "IncludeDeleted is a flag whether or not to include deleted items in the search results",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "revokedRange": {
                    "description": "RevokedRange specifies the time range when a record was revoked.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "updatedRange": {
                    "description": "UpdatedRange specifies the time range when a record was updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                }
            }
        },
        "filter.AdminAccessKeyFilter": {
            "type": "object",
            "properties": {
                "createdRange": {
                    "description": "CreatedRange specifies the time range when a record was created.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "includeDeleted": {
                    "description": "IncludeDeleted is a flag whether or not to include deleted items in the search results",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "revokedRange": {
                    "description": "RevokedRange specifies the time range when a record was revoked.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "updatedRange": {
                    "description": "UpdatedRange specifies the time range when a record was updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "xpubId": {
                    "type": "string"
                }
            }
        },
        "filter.AdminPaymailFilter": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string",
                    "example": "alice"
                },
                "createdRange": {
                    "description": "CreatedRange specifies the time range when a record was created.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "domain": {
                    "type": "string",
                    "example": "example.com"
                },
                "id": {
                    "type": "string",
                    "example": "ffb86c103d17d87c15aaf080aab6be5415c9fa885309a79b04c9910e39f2b542"
                },
                "includeDeleted": {
                    "description": "IncludeDeleted is a flag whether or not to include deleted items in the search results",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "publicName": {
                    "type": "string",
                    "example": "Alice"
                },
                "updatedRange": {
                    "description": "UpdatedRange specifies the time range when a record was updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "xpubId": {
                    "type": "string",
                    "example": "79f90a6bab0a44402fc64828af820e9465645658aea2d138c5205b88e6dabd00"
                }
            }
        },
        "filter.AdminUtxoFilter": {
            "type": "object",
            "properties": {
                "createdRange": {
                    "description": "CreatedRange specifies the time range when a record was created.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "draftId": {
                    "type": "string",
                    "example": "89419d4c7c50810bfe5ff9df9ad5074b749959423782dc91a30f1058b9ad7ef7"
                },
                "id": {
                    "type": "string",
                    "example": "fe4cbfee0258aa589cbc79963f7c204061fd67d987e32ee5049aa90ce14658ee"
                },
                "includeDeleted": {
                    "description": "IncludeDeleted is a flag whether or not to include deleted items in the search results",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "outputIndex": {
                    "type": "integer",
                    "example": 0
                },
                "reservedRange": {
                    "description": "ReservedRange specifies the time range when a UTXO was reserved.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "satoshis": {
                    "type": "integer",
                    "example": 1
                },
                "scriptPubKey": {
                    "type": "string",
                    "example": "76a914a5f271385e75f57bcd9092592dede812f8c466d088ac"
                },
                "spendingTxId": {
                    "type": "string",
                    "example": "11a7746489a70e9c0170601c2be65558455317a984194eb2791b637f59f8cd6e"
                },
                "transactionId": {
                    "type": "string",
                    "example": "5e17858ea0ca4155827754ba82bdcfcce108d5bb5b47fbb3aa54bd14540683c6"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "pubkey",
                        "pubkeyhash",
                        "nulldata",
                        "multisig",
                        "nonstandard",
                        "scripthash",
                        "metanet",
                        "token_stas",
                        "token_sensible"
                    ]
                },
                "updatedRange": {
                    "description": "UpdatedRange specifies the time range when a record was updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "xpubId": {
                    "type": "string"
                }
            }
        },
        "filter.ContactFilter": {
            "type": "object",
            "properties": {
                "createdRange": {
                    "description": "CreatedRange specifies the time range when a record was created.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "fullName": {
                    "type": "string",
                    "example": "Alice"
                },
                "id": {
                    "type": "string",
                    "example": "ffdbe74e-0700-4710-aac5-611a1f877c7f"
                },
                "includeDeleted": {
                    "description": "IncludeDeleted is a flag whether or not to include deleted items in the search results",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "paymail": {
                    "type": "string",
                    "example": "alice@example.com"
                },
                "pubKey": {
                    "type": "string",
                    "example": "0334f01ecb971e93db179e6fb320cd1466beb0c1ec6c1c6a37aa6cb02e53d5dd1a"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "unconfirmed",
                        "awaiting",
                        "confirmed",
                        "rejected"
                    ]
                },
                "updatedRange": {
                    "description": "UpdatedRange specifies the time range when a record was updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                }
            }
        },
        "filter.DestinationFilter": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "1CDUf7CKu8ocTTkhcYUbq75t14Ft168K65"
                },
                "createdRange": {
                    "description": "CreatedRange specifies the time range when a record was created.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "draftId": {
                    "type": "string",
                    "example": "b356f7fa00cd3f20cce6c21d704cd13e871d28d714a5ebd0532f5a0e0cde63f7"
                },
                "includeDeleted": {
                    "description": "IncludeDeleted is a flag whether or not to include deleted items in the search results",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "lockingScript": {
                    "type": "string",
                    "example": "76a9147b05764a97f3b4b981471492aa703b188e45979b88ac"
                },
                "updatedRange": {
                    "description": "UpdatedRange specifies the time range when a record was updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                }
            }
        },
        "filter.TimeRange": {
            "type": "object",
            "properties": {
                "from": {
                    "description": "From specifies the start time of the range. It's optional and can be nil.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28Z"
                },
                "to": {
                    "description": "To specifies the end time of the range. It's optional and can be nil.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28Z"
                }
            }
        },
        "filter.TransactionFilter": {
            "type": "object",
            "properties": {
                "blockHash": {
                    "type": "string",
                    "example": "0000000000000000031928c28075a82d7a00c2c90b489d1d66dc0afa3f8d26f8"
                },
                "blockHeight": {
                    "type": "integer",
                    "example": 839376
                },
                "createdRange": {
                    "description": "CreatedRange specifies the time range when a record was created.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "draftId": {
                    "type": "string",
                    "example": "d425432e0d10a46af1ec6d00f380e9581ebf7907f3486572b3cd561a4c326e14"
                },
                "fee": {
                    "type": "integer",
                    "example": 1
                },
                "hex": {
                    "type": "string"
                },
                "includeDeleted": {
                    "description": "IncludeDeleted is a flag whether or not to include deleted items in the search results",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "numberOfInputs": {
                    "type": "integer",
                    "example": 1
                },
                "numberOfOutputs": {
                    "type": "integer",
                    "example": 2
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "UNKNOWN",
                        "QUEUED",
                        "RECEIVED",
                        "STORED",
                        "ANNOUNCED_TO_NETWORK",
                        "REQUESTED_BY_NETWORK",
                        "SENT_TO_NETWORK",
                        "ACCEPTED_BY_NETWORK",
                        "SEEN_ON_NETWORK",
                        "MINED",
                        "SEEN_IN_ORPHAN_MEMPOOL",
                        "CONFIRMED",
                        "REJECTED"
                    ]
                },
                "totalValue": {
                    "type": "integer",
                    "example": 100000000
                },
                "updatedRange": {
                    "description": "UpdatedRange specifies the time range when a record was updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                }
            }
        },
        "filter.UtxoFilter": {
            "type": "object",
            "properties": {
                "createdRange": {
                    "description": "CreatedRange specifies the time range when a record was created.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "draftId": {
                    "type": "string",
                    "example": "89419d4c7c50810bfe5ff9df9ad5074b749959423782dc91a30f1058b9ad7ef7"
                },
                "id": {
                    "type": "string",
                    "example": "fe4cbfee0258aa589cbc79963f7c204061fd67d987e32ee5049aa90ce14658ee"
                },
                "includeDeleted": {
                    "description": "IncludeDeleted is a flag whether or not to include deleted items in the search results",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "outputIndex": {
                    "type": "integer",
                    "example": 0
                },
                "reservedRange": {
                    "description": "ReservedRange specifies the time range when a UTXO was reserved.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "satoshis": {
                    "type": "integer",
                    "example": 1
                },
                "scriptPubKey": {
                    "type": "string",
                    "example": "76a914a5f271385e75f57bcd9092592dede812f8c466d088ac"
                },
                "spendingTxId": {
                    "type": "string",
                    "example": "11a7746489a70e9c0170601c2be65558455317a984194eb2791b637f59f8cd6e"
                },
                "transactionId": {
                    "type": "string",
                    "example": "5e17858ea0ca4155827754ba82bdcfcce108d5bb5b47fbb3aa54bd14540683c6"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "pubkey",
                        "pubkeyhash",
                        "nulldata",
                        "multisig",
                        "nonstandard",
                        "scripthash",
                        "metanet",
                        "token_stas",
                        "token_sensible"
                    ]
                },
                "updatedRange": {
                    "description": "UpdatedRange specifies the time range when a record was updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                }
            }
        },
        "filter.XpubFilter": {
            "type": "object",
            "properties": {
                "createdRange": {
                    "description": "CreatedRange specifies the time range when a record was created.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                },
                "currentBalance": {
                    "type": "integer",
                    "example": 1000
                },
                "id": {
                    "type": "string",
                    "example": "00b953624f78004a4c727cd28557475d5233c15f17aef545106639f4d71b712d"
                },
                "includeDeleted": {
                    "description": "IncludeDeleted is a flag whether or not to include deleted items in the search results",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "updatedRange": {
                    "description": "UpdatedRange specifies the time range when a record was updated.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TimeRange"
                        }
                    ]
                }
            }
        },
        "models.AccessKey": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "id": {
                    "description": "ID is an hash of the compressed public key.",
                    "type": "string",
                    "example": "874b86d6fd1d6c85a857e73180164203d8d23211bfd9d04d210f9f7fde5b82d8"
                },
                "key": {
                    "description": "Key is a string representation of an access key.",
                    "type": "string",
                    "example": "3fd870d6bf1725f04084cf31209c04be5bd9bed001a390ad3bc632a55a3ee078"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "revoked_at": {
                    "description": "RevokedAt is a time when access key was revoked.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28.069911Z"
                },
                "xpub_id": {
                    "description": "XpubID is an access key's xpub related id.",
                    "type": "string",
                    "example": "bb8593f85ef8056a77026ad415f02128f3768906de53e9e8bf8749fe2d66cf50"
                }
            }
        },
        "models.AdminStats": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Balance is a total balance of all xpubs.",
                    "type": "integer"
                },
                "destinations": {
                    "description": "Destinations is a total number of destinations.",
                    "type": "integer"
                },
                "paymail_addresses": {
                    "description": "PaymailAddresses is a total number of paymail addresses.",
                    "type": "integer"
                },
                "transactions": {
                    "description": "Transactions is a total number of committed transactions.",
                    "type": "integer"
                },
                "transactions_per_day": {
                    "description": "TransactionsPerDay is a total number of committed transactions per day.",
                    "type": "object",
                    "additionalProperties": true
                },
                "utxos": {
                    "description": "Utxos is a total number of utxos.",
                    "type": "integer"
                },
                "utxos_per_type": {
                    "description": "UtxosPerType are utxos grouped by type.",
                    "type": "object",
                    "additionalProperties": true
                },
                "xpubs": {
                    "description": "Xpubs is a total number of xpubs.",
                    "type": "integer"
                }
            }
        },
        "models.Contact": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "fullName": {
                    "description": "FullName is name which could be shown instead of whole paymail address.",
                    "type": "string",
                    "example": "Test User"
                },
                "id": {
                    "description": "ID is a unique identifier of contact.",
                    "type": "string",
                    "example": "68af358bde7d8641621c7dd3de1a276c9a62cfa9e2d0740494519f1ba61e2f4a"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "paymail": {
                    "description": "Paymail is a paymail address related to contact.",
                    "type": "string",
                    "example": "test@spv-wallet.com"
                },
                "pubKey": {
                    "description": "PubKey is a public key related to contact (receiver).",
                    "type": "string",
                    "example": "xpub661MyMwAqRbcGpZVrSHU..."
                },
                "status": {
                    "description": "Status is a contact's current status.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ContactStatus"
                        }
                    ],
                    "example": "unconfirmed"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28.069911Z"
                }
            }
        },
        "models.ContactStatus": {
            "type": "string",
            "enum": [
                "unconfirmed",
                "awaiting",
                "confirmed",
                "rejected"
            ],
            "x-enum-varnames": [
                "ContactNotConfirmed",
                "ContactAwaitAccept",
                "ContactConfirmed",
                "ContactRejected"
            ]
        },
        "models.Destination": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is a destination's address.",
                    "type": "string",
                    "example": "1CDUf7CKu8ocTTkhcYUbq75t14Ft168K65"
                },
                "chain": {
                    "description": "Chain is a destination's chain representation.",
                    "type": "integer",
                    "example": 0
                },
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "draft_id": {
                    "description": "DraftID is a destination's draft id.",
                    "type": "string",
                    "example": "b356f7fa00cd3f20cce6c21d704cd13e871d28d714a5ebd0532f5a0e0cde63f7"
                },
                "id": {
                    "description": "ID is a destination id which is the hash of the LockingScript.",
                    "type": "string",
                    "example": "82a5d848f997819a478b05fb713208d7f3aa66da5ba00953b9845fb1701f9b98"
                },
                "locking_script": {
                    "description": "LockingScript is a destination's locking script.",
                    "type": "string",
                    "example": "76a9147b05764a97f3b4b981471492aa703b188e45979b88ac"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "num": {
                    "description": "Num is a destination's num representation.",
                    "type": "integer",
                    "example": 0
                },
                "paymail_external_derivation_num": {
                    "description": "PaymailExternalDerivationNum is the chain/num/(ext_derivation_num) location of the address related to the xPub.",
                    "type": "integer",
                    "example": 0
                },
                "type": {
                    "description": "Type is a destination's type.",
                    "type": "string",
                    "example": "pubkeyhash"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28.069911Z"
                },
                "xpub_id": {
                    "description": "XpubID is a destination's xpub related id used to register destination.",
                    "type": "string",
                    "example": "bb8593f85ef8056a77026ad415f02128f3768906de53e9e8bf8749fe2d66cf50"
                }
            }
        },
        "models.DraftTransaction": {
            "type": "object",
            "properties": {
                "configuration": {
                    "description": "Configuration contains draft transaction configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransactionConfig"
                        }
                    ]
                },
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "expires_at": {
                    "description": "ExpiresAt is a time when draft transaction expired.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "final_tx_id": {
                    "description": "FinalTxID is a final transaction id.",
                    "type": "string",
                    "example": "cfe30797f0b5fc098b32194e857569a7a1edd829fddf3df4567796b738de386d"
                },
                "hex": {
                    "description": "Hex is a draft transaction hex.",
                    "type": "string",
                    "example": "0100000002..."
                },
                "id": {
                    "description": "ID is a draft transaction id.",
                    "type": "string",
                    "example": "b356f7fa00cd3f20cce6c21d704cd13e871d28d714a5ebd0532f5a0e0cde63f7"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "status": {
                    "description": "Status is a draft transaction lastly monitored status.",
                    "type": "string",
                    "example": "complete"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28.069911Z"
                },
                "xpub_id": {
                    "description": "XpubID is a draft transaction's xpub used to sign transaction.",
                    "type": "string",
                    "example": "bb8593f85ef8056a77026ad415f02128f3768906de53e9e8bf8749fe2d66cf50"
                }
            }
        },
        "models.FeeUnit": {
            "type": "object",
            "properties": {
                "bytes": {
                    "description": "Bytes is a fee unit bytes representation.",
                    "type": "integer",
                    "example": 1000
                },
                "satoshis": {
                    "description": "Satoshis is a fee unit satoshis amount.",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.MapProtocol": {
            "type": "object",
            "properties": {
                "app": {
                    "description": "App is a map protocol app.",
                    "type": "string"
                },
                "keys": {
                    "description": "Keys is a map protocol keys.",
                    "type": "object",
                    "additionalProperties": true
                },
                "type": {
                    "description": "Type is a map protocol type.",
                    "type": "string"
                }
            }
        },
        "models.OpReturn": {
            "type": "object",
            "properties": {
                "hex": {
                    "description": "Hex is a full hex of op return.",
                    "type": "string"
                },
                "hex_parts": {
                    "description": "HexParts is a slice of splitted hex parts.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "map": {
                    "description": "Map is a pointer to a map protocol object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MapProtocol"
                        }
                    ]
                },
                "string_parts": {
                    "description": "StringParts is a slice of string parts.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Page": {
            "type": "object",
            "properties": {
                "number": {
                    "description": "Page number",
                    "type": "integer"
                },
                "orderByField": {
                    "description": "Field by which to order the results",
                    "type": "string"
                },
                "size": {
                    "description": "Size of the page",
                    "type": "integer"
                },
                "sortDirection": {
                    "description": "Direction in which to order the results ASC/DSC",
                    "type": "string"
                },
                "totalElements": {
                    "description": "Total count of elements",
                    "type": "integer"
                },
                "totalPages": {
                    "description": "Total number of possible pages",
                    "type": "integer"
                }
            }
        },
        "models.PaymailAddress": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Alias is a paymail address's alias (first part of paymail).",
                    "type": "string",
                    "example": "test"
                },
                "avatar": {
                    "description": "Avatar is a paymail address's avatar.",
                    "type": "string",
                    "example": "https://spvwallet.com/avatar.png"
                },
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "domain": {
                    "description": "Domain is a paymail address's domain (second part of paymail).",
                    "type": "string",
                    "example": "spvwallet.com"
                },
                "id": {
                    "description": "ID is a paymail address id.",
                    "type": "string",
                    "example": "c0ba4a52c89279268476a141be7569200cff2ca4892512b07ca75c25a95c16cd"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "public_name": {
                    "description": "PublicName is a paymail address's public name.",
                    "type": "string",
                    "example": "Test User"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28.069911Z"
                },
                "xpub_id": {
                    "description": "XpubID is a paymail address's xpub related id used to register paymail address.",
                    "type": "string",
                    "example": "bb8593f85ef8056a77026ad415f02128f3768906de53e9e8bf8749fe2d66cf50"
                }
            }
        },
        "models.PaymailP4": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Alias is a paymail p4 alias.",
                    "type": "string"
                },
                "domain": {
                    "description": "Domain is a paymail p4 domain.",
                    "type": "string"
                },
                "from_paymail": {
                    "description": "FromPaymail is a paymail p4 from paymail.",
                    "type": "string"
                },
                "note": {
                    "description": "Note is a paymail p4 note.",
                    "type": "string"
                },
                "pub_key": {
                    "description": "PubKey is a paymail p4 pub key.",
                    "type": "string"
                },
                "receive_endpoint": {
                    "description": "ReceiveEndpoint is a paymail p4 receive endpoint.",
                    "type": "string"
                },
                "reference_id": {
                    "description": "ReferenceID is a paymail p4 reference id.",
                    "type": "string"
                },
                "resolution_type": {
                    "description": "ResolutionType is a paymail p4 resolution type.",
                    "type": "string"
                }
            }
        },
        "models.ScriptOutput": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is a script output address.",
                    "type": "string"
                },
                "satoshis": {
                    "description": "Satoshis is a script output satoshis.",
                    "type": "integer"
                },
                "script": {
                    "description": "Script is a script output script.",
                    "type": "string"
                },
                "script_type": {
                    "description": "ScriptType is a script output script type.",
                    "type": "string"
                }
            }
        },
        "models.SearchContactsResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "List of records for the response",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Contact"
                    }
                },
                "page": {
                    "description": "Pagination details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Page"
                        }
                    ]
                }
            }
        },
        "models.SharedConfig": {
            "type": "object",
            "properties": {
                "experimental_features": {
                    "description": "ExperimentalFeatures is a map of experimental features handled by spv-wallet.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "example": {
                        "pike_enabled": true
                    }
                },
                "paymail_domains": {
                    "description": "PaymailDomains is a list of paymail domains handled by spv-wallet.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "spv-wallet.com"
                    ]
                }
            }
        },
        "models.SyncConfig": {
            "type": "object",
            "properties": {
                "broadcast": {
                    "description": "Broadcast is a flag that indicates whether to broadcast transaction or not.",
                    "type": "boolean"
                },
                "broadcast_instant": {
                    "description": "BroadcastInstant is a flag that indicates whether to broadcast transaction instantly or not.",
                    "type": "boolean"
                },
                "paymail_p2p": {
                    "description": "PaymailP2P is a flag that indicates whether to use paymail p2p or not.",
                    "type": "boolean"
                },
                "sync_on_chain": {
                    "description": "SyncOnChain is a flag that indicates whether to sync transaction on chain or not.",
                    "type": "boolean"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "block_hash": {
                    "description": "BlockHash is a block hash that transaction is in.",
                    "type": "string",
                    "example": "0000000000000000046e81025ca6cfbd2f45c7331f650c77edc99a14d5a1f0d0"
                },
                "block_height": {
                    "description": "BlockHeight is a block height that transaction is in.",
                    "type": "integer",
                    "example": 833505
                },
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "direction": {
                    "description": "TransactionDirection is a transaction direction (incoming/outgoing).",
                    "type": "string",
                    "example": "outgoing"
                },
                "draft_id": {
                    "description": "DraftID is a transaction related draft id.",
                    "type": "string",
                    "example": "b356f7fa00cd3f20cce6c21d704cd13e871d28d714a5ebd0532f5a0e0cde63f7"
                },
                "fee": {
                    "description": "Fee is a transaction fee.",
                    "type": "integer",
                    "example": 1
                },
                "hex": {
                    "description": "Hex is a transaction hex.",
                    "type": "string",
                    "example": "0100000002..."
                },
                "id": {
                    "description": "ID is a transaction id.",
                    "type": "string",
                    "example": "01d0d0067652f684c6acb3683763f353fce55f6496521c7d99e71e1d27e53f5c"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "number_of_inputs": {
                    "description": "NumberOfInputs is a number of transaction inputs.",
                    "type": "integer",
                    "example": 3
                },
                "number_of_outputs": {
                    "description": "NumberOfOutputs is a number of transaction outputs.",
                    "type": "integer",
                    "example": 2
                },
                "output_value": {
                    "description": "OutputValue is a total output value.",
                    "type": "integer",
                    "example": 50
                },
                "outputs": {
                    "description": "Outputs represents all spv-wallet-transaction outputs. Will be shown only for admin.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "example": {
                        "92640954841510a9d95f7737a43075f22ebf7255976549de4c52e8f3faf57470": -51,
                        "9d07977d2fc14402426288a6010b4cdf7d91b61461acfb75af050b209d2d07ba": 50
                    }
                },
                "status": {
                    "description": "Status is a transaction status.",
                    "type": "string",
                    "example": "MINED"
                },
                "total_value": {
                    "description": "TotalValue is a total input value.",
                    "type": "integer",
                    "example": 51
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28.069911Z"
                },
                "xpub_in_ids": {
                    "description": "XpubInIDs is a slice of xpub input ids.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "bb8593f85ef8056a77026ad415f02128f3768906de53e9e8bf8749fe2d66cf50"
                    ]
                },
                "xpub_out_ids": {
                    "description": "XpubOutIDs is a slice of xpub output ids.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2075eca10bf2688b38cd7fdad6c24562463a9a26ae505d66c480fd53165dbaa2"
                    ]
                }
            }
        },
        "models.TransactionConfig": {
            "type": "object",
            "properties": {
                "change_destinations": {
                    "description": "ChangeDestinations is a slice of change destinations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Destination"
                    }
                },
                "change_destinations_strategy": {
                    "description": "ChangeStrategy is a change strategy.",
                    "type": "string"
                },
                "change_minimum_satoshis": {
                    "description": "ChangeMinimumSatoshis is a minimum satoshis for change.",
                    "type": "integer",
                    "example": 0
                },
                "change_number_of_destinations": {
                    "description": "ChangeNumberOfDestinations is a number of change destinations.",
                    "type": "integer",
                    "example": 1
                },
                "change_satoshis": {
                    "description": "ChangeSatoshis is a change satoshis.",
                    "type": "integer",
                    "example": 49
                },
                "expires_in": {
                    "description": "ExpiresAt is a time when transaction expires.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ],
                    "example": 1000
                },
                "fee": {
                    "description": "Fee is a fee amount.",
                    "type": "integer",
                    "example": 1
                },
                "fee_unit": {
                    "description": "FeeUnit is a pointer to a fee unit object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.FeeUnit"
                        }
                    ]
                },
                "from_utxos": {
                    "description": "FromUtxos is a slice of from utxos used to build transaction.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UtxoPointer"
                    }
                },
                "include_utxos": {
                    "description": "IncludeUtxos is a slice of utxos to include in transaction.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UtxoPointer"
                    }
                },
                "inputs": {
                    "description": "Inputs is a slice of transaction inputs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TransactionInput"
                    }
                },
                "outputs": {
                    "description": "Outputs is a slice of transaction outputs.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TransactionOutput"
                    }
                },
                "send_all_to": {
                    "description": "SendAllTo is a pointer to a transaction output object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransactionOutput"
                        }
                    ]
                },
                "sync": {
                    "description": "Sync contains sync configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SyncConfig"
                        }
                    ]
                }
            }
        },
        "models.TransactionInput": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "destination": {
                    "description": "Destination is a pointer to a destination object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Destination"
                        }
                    ]
                },
                "draft_id": {
                    "description": "DraftID is a utxo transaction related draft id.",
                    "type": "string",
                    "example": "b356f7fa00cd3f20cce6c21d704cd13e871d28d714a5ebd0532f5a0e0cde63f7"
                },
                "id": {
                    "description": "ID is a utxo id which is a hash from transaction id and output index.",
                    "type": "string",
                    "example": "c706a448748d398d542cf4dfad797c9a4b123ebb72dbfb8b27f3d0f1dda99b58"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "output_index": {
                    "description": "OutputIndex is a output index that utxo points to.",
                    "type": "integer",
                    "example": 0
                },
                "reserved_at": {
                    "description": "ReservedAt is a time utxo was reserved at.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "satoshis": {
                    "description": "Satoshis is a utxo satoshis amount.",
                    "type": "integer",
                    "example": 100
                },
                "script_pub_key": {
                    "description": "ScriptPubKey is a utxo script pub key.",
                    "type": "string",
                    "example": "76a91433ba3607a902bc022164bcb6e993f27bd040241c88ac"
                },
                "spending_tx_id": {
                    "description": "SpendingTxID is a spending transaction id - null if not spent yet.",
                    "type": "string",
                    "example": "01d0d0067652f684c6acb3683763f353fce55f6496521c7d99e71e1d27e53f5c"
                },
                "transaction": {
                    "description": "Transaction is a transaction pointer that utxo points to.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    ]
                },
                "transaction_id": {
                    "description": "TransactionID is a transaction id that utxo points to.",
                    "type": "string",
                    "example": "01d0d0067652f684c6acb3683763f353fce55f6496521c7d99e71e1d27e53f5c"
                },
                "type": {
                    "description": "Type is a utxo type.",
                    "type": "string",
                    "example": "pubkeyhash"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28.069911Z"
                },
                "xpub_id": {
                    "description": "XpubID is a utxo related xpub id.",
                    "type": "string",
                    "example": "bb8593f85ef8056a77026ad415f02128f3768906de53e9e8bf8749fe2d66cf50"
                }
            }
        },
        "models.TransactionOutput": {
            "type": "object",
            "properties": {
                "op_return": {
                    "description": "OpReturn is a pointer to a op return object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.OpReturn"
                        }
                    ]
                },
                "paymail_p4": {
                    "description": "PaymailP4 is a pointer to a paymail p4 object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.PaymailP4"
                        }
                    ]
                },
                "satoshis": {
                    "description": "Satoshis is a satoshis amount.",
                    "type": "integer",
                    "example": 50
                },
                "script": {
                    "description": "Script is a transaction output string representation of script.",
                    "type": "string",
                    "example": "76a91433ba3607a902bc022164bcb6e993f27bd040241c88ac"
                },
                "scripts": {
                    "description": "ScriptType is a transaction output script type.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ScriptOutput"
                    }
                },
                "to": {
                    "description": "To is a transaction output destination address.",
                    "type": "string",
                    "example": "1MB8MfCyA5mGt3UBhxYr1exBfsFWgL1gCm"
                },
                "use_for_change": {
                    "description": "UseForChange is a flag that indicates if this output should be used for change.",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.Utxo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "draft_id": {
                    "description": "DraftID is a utxo transaction related draft id.",
                    "type": "string",
                    "example": "b356f7fa00cd3f20cce6c21d704cd13e871d28d714a5ebd0532f5a0e0cde63f7"
                },
                "id": {
                    "description": "ID is a utxo id which is a hash from transaction id and output index.",
                    "type": "string",
                    "example": "c706a448748d398d542cf4dfad797c9a4b123ebb72dbfb8b27f3d0f1dda99b58"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "output_index": {
                    "description": "OutputIndex is a output index that utxo points to.",
                    "type": "integer",
                    "example": 0
                },
                "reserved_at": {
                    "description": "ReservedAt is a time utxo was reserved at.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "satoshis": {
                    "description": "Satoshis is a utxo satoshis amount.",
                    "type": "integer",
                    "example": 100
                },
                "script_pub_key": {
                    "description": "ScriptPubKey is a utxo script pub key.",
                    "type": "string",
                    "example": "76a91433ba3607a902bc022164bcb6e993f27bd040241c88ac"
                },
                "spending_tx_id": {
                    "description": "SpendingTxID is a spending transaction id - null if not spent yet.",
                    "type": "string",
                    "example": "01d0d0067652f684c6acb3683763f353fce55f6496521c7d99e71e1d27e53f5c"
                },
                "transaction": {
                    "description": "Transaction is a transaction pointer that utxo points to.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    ]
                },
                "transaction_id": {
                    "description": "TransactionID is a transaction id that utxo points to.",
                    "type": "string",
                    "example": "01d0d0067652f684c6acb3683763f353fce55f6496521c7d99e71e1d27e53f5c"
                },
                "type": {
                    "description": "Type is a utxo type.",
                    "type": "string",
                    "example": "pubkeyhash"
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28.069911Z"
                },
                "xpub_id": {
                    "description": "XpubID is a utxo related xpub id.",
                    "type": "string",
                    "example": "bb8593f85ef8056a77026ad415f02128f3768906de53e9e8bf8749fe2d66cf50"
                }
            }
        },
        "models.UtxoPointer": {
            "type": "object",
            "properties": {
                "output_index": {
                    "description": "OutputIndex is a output index that utxo points to.",
                    "type": "integer",
                    "example": 0
                },
                "transaction_id": {
                    "description": "TransactionID is a transaction id that utxo points to.",
                    "type": "string",
                    "example": "01d0d0067652f684c6acb3683763f353fce55f6496521c7d99e71e1d27e53f5c"
                }
            }
        },
        "models.Xpub": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is a time when outer model was created.",
                    "type": "string",
                    "example": "2024-02-26T11:00:28.069911Z"
                },
                "current_balance": {
                    "description": "CurrentBalance is a xpub's current balance.",
                    "type": "integer",
                    "example": 1234
                },
                "deleted_at": {
                    "description": "DeletedAt is a time when outer model was deleted.",
                    "type": "string",
                    "example": "2024-02-26T11:02:28.069911Z"
                },
                "id": {
                    "description": "ID is a hash of the xpub.",
                    "type": "string",
                    "example": "bb8593f85ef8056a77026ad415f02128f3768906de53e9e8bf8749fe2d66cf50"
                },
                "metadata": {
                    "description": "Metadata is a metadata map of outer model.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "next_external_num": {
                    "description": "NextExternalNum is the index derivation number use to generate NEXT external xPub (external xPub are used for address destinations).",
                    "type": "integer",
                    "example": 0
                },
                "next_internal_num": {
                    "description": "NextInternalNum is the index derivation number use to generate NEXT internal xPub (internal xPub are used for change destinations).",
                    "type": "integer",
                    "example": 0
                },
                "updated_at": {
                    "description": "UpdatedAt is a time when outer model was updated.",
                    "type": "string",
                    "example": "2024-02-26T11:01:28.069911Z"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "transactions.CountTransactions": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TransactionFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "transactions.NewTransaction": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Configuration of the transaction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransactionConfig"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "transactions.RecordTransaction": {
            "type": "object",
            "properties": {
                "hex": {
                    "description": "Hex of the transaction",
                    "type": "string",
                    "example": "0100000002..."
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "reference_id": {
                    "description": "ReferenceID which is a ID of the draft transaction",
                    "type": "string",
                    "example": "b356f7fa00cd3f20cce6c21d704cd13e871d28d714a5ebd0532f5a0e0cde63f7"
                }
            }
        },
        "transactions.SearchTransactions": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.TransactionFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        },
        "transactions.UpdateTransaction": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of the transaction which is a hash of the transaction",
                    "type": "string",
                    "example": "01d0d0067652f684c6acb3683763f353fce55f6496521c7d99e71e1d27e53f5c"
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "utxos.CountUtxos": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.UtxoFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                }
            }
        },
        "utxos.SearchUtxos": {
            "type": "object",
            "properties": {
                "conditions": {
                    "description": "Custom conditions used for filtering the search results. Every field within the object is optional.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/filter.UtxoFilter"
                        }
                    ]
                },
                "metadata": {
                    "description": "Accepts a JSON object for embedding custom metadata, enabling arbitrary additional information to be associated with the resource",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key": "value",
                        "key2": "value2"
                    }
                },
                "params": {
                    "description": "Pagination and sorting options to streamline data exploration and analysis",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "order_by_direction": "desc",
                        "order_by_field": "created_at",
                        "page": "1",
                        "page_size": "10"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "callback-auth": {
            "type": "apiKey",
            "name": "authorization",
            "in": "header"
        },
        "x-auth-xpub": {
            "type": "apiKey",
            "name": "x-auth-xpub",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v0.12.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "SPV Wallet",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
