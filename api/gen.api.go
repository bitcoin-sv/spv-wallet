// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ApiComponentsErrorsErrUserNotFound defines model for api_components_errors_ErrUserNotFound.
type ApiComponentsErrorsErrUserNotFound struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ApiComponentsErrorsErrorSchema defines model for api_components_errors_ErrorSchema.
type ApiComponentsErrorsErrorSchema struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// ApiComponentsModelsUser defines model for api_components_models_User.
type ApiComponentsModelsUser struct {
	// Id User ID
	Id uint64 `json:"id"`

	// Name User name
	Name string `json:"name"`
}

// ApiComponentsRequestsAdminRequest defines model for api_components_requests_AdminRequest.
type ApiComponentsRequestsAdminRequest struct {
	// Id Example of admin request body
	Id uint64 `json:"id"`
}

// ApiComponentsResponsesCommonResponse Common response object
type ApiComponentsResponsesCommonResponse struct {
	Timestamp time.Time `json:"timestamp"`
}

// ApiComponentsResponsesUserExampleResponse defines model for api_components_responses_UserExampleResponse.
type ApiComponentsResponsesUserExampleResponse struct {
	// AdditionalPropertyExample The user model additional property example
	AdditionalPropertyExample *string `json:"additionalPropertyExample,omitempty"`

	// Id User ID
	Id uint64 `json:"id"`

	// Name User name
	Name      string    `json:"name"`
	Timestamp time.Time `json:"timestamp"`
}

// ApiComponentsErrorsErrorUserNotFoundResponse defines model for api_components_errors_ErrorUserNotFoundResponse.
type ApiComponentsErrorsErrorUserNotFoundResponse = ApiComponentsErrorsErrUserNotFound

// GETAdminJSONRequestBody defines body for GETAdmin for application/json ContentType.
type GETAdminJSONRequestBody = ApiComponentsRequestsAdminRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the admin settings
	// (GET /api/v1/admin)
	GETAdmin(c *gin.Context)
	// Get the policy settings
	// (GET /api/v1/policy)
	GETPolicy(c *gin.Context)
	// Get the user settings
	// (GET /api/v1/user/{txid})
	GETUser(c *gin.Context, txid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GETAdmin operation middleware
func (siw *ServerInterfaceWrapper) GETAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GETAdmin(c)
}

// GETPolicy operation middleware
func (siw *ServerInterfaceWrapper) GETPolicy(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GETPolicy(c)
}

// GETUser operation middleware
func (siw *ServerInterfaceWrapper) GETUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", c.Param("txid"), &txid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter txid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GETUser(c, txid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/admin", wrapper.GETAdmin)
	router.GET(options.BaseURL+"/api/v1/policy", wrapper.GETPolicy)
	router.GET(options.BaseURL+"/api/v1/user/:txid", wrapper.GETUser)
}
