// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get admin status
	// (GET /api/v2/admin/status)
	GetApiV2AdminStatus(c *gin.Context)
	// Get data for user
	// (GET /api/v2/data/{id})
	GetApiV2DataId(c *gin.Context, id string)
	// Get operations for user
	// (GET /api/v2/operations/search)
	GetApiV2OperationsSearch(c *gin.Context, params GetApiV2OperationsSearchParams)
	// Record transaction outline
	// (POST /api/v2/transactions)
	PostApiV2Transactions(c *gin.Context)
	// Get current user
	// (GET /api/v2/users/current)
	GetApiV2UsersCurrent(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV2AdminStatus operation middleware
func (siw *ServerInterfaceWrapper) GetApiV2AdminStatus(c *gin.Context) {

	c.Set(XPubAuthScopes, []string{"admin"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV2AdminStatus(c)
}

// GetApiV2DataId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV2DataId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(XPubAuthScopes, []string{"user"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV2DataId(c, id)
}

// GetApiV2OperationsSearch operation middleware
func (siw *ServerInterfaceWrapper) GetApiV2OperationsSearch(c *gin.Context) {

	var err error

	c.Set(XPubAuthScopes, []string{"user"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV2OperationsSearchParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV2OperationsSearch(c, params)
}

// PostApiV2Transactions operation middleware
func (siw *ServerInterfaceWrapper) PostApiV2Transactions(c *gin.Context) {

	c.Set(XPubAuthScopes, []string{"user"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV2Transactions(c)
}

// GetApiV2UsersCurrent operation middleware
func (siw *ServerInterfaceWrapper) GetApiV2UsersCurrent(c *gin.Context) {

	c.Set(XPubAuthScopes, []string{"user"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV2UsersCurrent(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v2/admin/status", wrapper.GetApiV2AdminStatus)
	router.GET(options.BaseURL+"/api/v2/data/:id", wrapper.GetApiV2DataId)
	router.GET(options.BaseURL+"/api/v2/operations/search", wrapper.GetApiV2OperationsSearch)
	router.POST(options.BaseURL+"/api/v2/transactions", wrapper.PostApiV2Transactions)
	router.GET(options.BaseURL+"/api/v2/users/current", wrapper.GetApiV2UsersCurrent)
}
