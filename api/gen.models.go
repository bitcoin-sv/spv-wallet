// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	XPubAuthScopes = "XPubAuth.Scopes"
)

// Defines values for ModelsOperationTxStatus.
const (
	BROADCASTED ModelsOperationTxStatus = "BROADCASTED"
	CREATED     ModelsOperationTxStatus = "CREATED"
	MINED       ModelsOperationTxStatus = "MINED"
	PROBLEMATIC ModelsOperationTxStatus = "PROBLEMATIC"
	REVERTED    ModelsOperationTxStatus = "REVERTED"
)

// Defines values for ModelsOperationType.
const (
	Incoming ModelsOperationType = "incoming"
	Outgoing ModelsOperationType = "outgoing"
)

// Defines values for ModelsSearchPageSort.
const (
	Asc  ModelsSearchPageSort = "asc"
	Desc ModelsSearchPageSort = "desc"
)

// ErrorsAdminAuthOnNonAdminEndpoint defines model for errors_AdminAuthOnNonAdminEndpoint.
type ErrorsAdminAuthOnNonAdminEndpoint struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsAuthorization defines model for errors_Authorization.
type ErrorsAuthorization struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsCannotBindRequest defines model for errors_CannotBindRequest.
type ErrorsCannotBindRequest struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsCreatingUser defines model for errors_CreatingUser.
type ErrorsCreatingUser struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrAnnotationIndexConversion defines model for errors_ErrAnnotationIndexConversion.
type ErrorsErrAnnotationIndexConversion struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrAnnotationIndexOutOfRange defines model for errors_ErrAnnotationIndexOutOfRange.
type ErrorsErrAnnotationIndexOutOfRange struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrDataNotFound defines model for errors_ErrDataNotFound.
type ErrorsErrDataNotFound struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrGettingOutputs defines model for errors_ErrGettingOutputs.
type ErrorsErrGettingOutputs struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrInternal defines model for errors_ErrInternal.
type ErrorsErrInternal struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrInvalidDataID defines model for errors_ErrInvalidDataID.
type ErrorsErrInvalidDataID struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrNoOperations defines model for errors_ErrNoOperations.
type ErrorsErrNoOperations struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrTxBroadcast defines model for errors_ErrTxBroadcast.
type ErrorsErrTxBroadcast struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrUTXOSpent defines model for errors_ErrUTXOSpent.
type ErrorsErrUTXOSpent struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsErrXPubAuthRequired defines model for errors_ErrXPubAuthRequired.
type ErrorsErrXPubAuthRequired struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsGettingUser defines model for errors_GettingUser.
type ErrorsGettingUser struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidDomain defines model for errors_InvalidDomain.
type ErrorsInvalidDomain struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidPaymail defines model for errors_InvalidPaymail.
type ErrorsInvalidPaymail struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidPubKey defines model for errors_InvalidPubKey.
type ErrorsInvalidPubKey struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsPaymailInconsistent defines model for errors_PaymailInconsistent.
type ErrorsPaymailInconsistent struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsSchema defines model for errors_Schema.
type ErrorsSchema struct {
	// Code Error code
	Code string `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// ErrorsUnauthorized defines model for errors_Unauthorized.
type ErrorsUnauthorized struct {
	union json.RawMessage
}

// ErrorsUserAuthOnNonUserEndpoint defines model for errors_UserAuthOnNonUserEndpoint.
type ErrorsUserAuthOnNonUserEndpoint struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ModelsAnnotations defines model for models_Annotations.
type ModelsAnnotations struct {
	// Inputs Map of input annotations
	Inputs *map[string]ModelsInputAnnotation `json:"inputs,omitempty"`

	// Outputs Map of output annotations
	Outputs *map[string]ModelsOutputAnnotation `json:"outputs,omitempty"`
}

// ModelsData defines model for models_Data.
type ModelsData struct {
	// Blob Data blob
	Blob string `json:"blob"`

	// Id User ID
	Id string `json:"id"`
}

// ModelsInputAnnotation defines model for models_InputAnnotation.
type ModelsInputAnnotation struct {
	// CustomInstructions Instructions about how to unlock this input.
	CustomInstructions string `json:"customInstructions"`
}

// ModelsOperation defines model for models_Operation.
type ModelsOperation struct {
	// Counterparty Counterparty of operation
	Counterparty *string `json:"counterparty,omitempty"`

	// CreatedAt Creation date of operation
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// TxID Transaction ID
	TxID *string `json:"txID,omitempty"`

	// TxStatus Status of transaction
	TxStatus *ModelsOperationTxStatus `json:"txStatus,omitempty"`

	// Type Type of operation
	Type *ModelsOperationType `json:"type,omitempty"`

	// Value Value of operation
	Value *int64 `json:"value,omitempty"`
}

// ModelsOperationTxStatus Status of transaction
type ModelsOperationTxStatus string

// ModelsOperationType Type of operation
type ModelsOperationType string

// ModelsOperationsSearchResult defines model for models_OperationsSearchResult.
type ModelsOperationsSearchResult struct {
	Operations *[]ModelsOperation `json:"operations,omitempty"`
	Page       *ModelsSearchPage  `json:"page,omitempty"`
}

// ModelsOutputAnnotation defines model for models_OutputAnnotation.
type ModelsOutputAnnotation struct {
	// Bucket Type of bucket where this output should be stored.
	Bucket  string                   `json:"bucket"`
	Paymail *ModelsPaymailAnnotation `json:"paymail,omitempty"`
}

// ModelsPaymail defines model for models_Paymail.
type ModelsPaymail struct {
	Alias      string `json:"alias"`
	Avatar     string `json:"avatar"`
	Domain     string `json:"domain"`
	Id         uint   `json:"id"`
	Paymail    string `json:"paymail"`
	PublicName string `json:"publicName"`
}

// ModelsPaymailAnnotation defines model for models_PaymailAnnotation.
type ModelsPaymailAnnotation struct {
	// Receiver Paymail address of the receiver
	Receiver string `json:"receiver"`

	// Reference Reference number used for paymail transaction
	Reference string `json:"reference"`

	// Sender Paymail address of the sender
	Sender string `json:"sender"`
}

// ModelsRecordedOutline defines model for models_RecordedOutline.
type ModelsRecordedOutline struct {
	// TxID ID of the transaction
	TxID string `json:"txID"`
}

// ModelsSearchPage defines model for models_SearchPage.
type ModelsSearchPage struct {
	// Number Page number for pagination
	Number *int `json:"number,omitempty"`

	// Size Number of items per page
	Size *int `json:"size,omitempty"`

	// Sort Sorting order (asc or desc)
	Sort *ModelsSearchPageSort `json:"sort,omitempty"`

	// SortBy Field to sort by
	SortBy *string `json:"sortBy,omitempty"`
}

// ModelsSearchPageSort Sorting order (asc or desc)
type ModelsSearchPageSort string

// ModelsSharedConfig Shared config
type ModelsSharedConfig struct {
	ExperimentalFeatures map[string]bool `json:"experimentalFeatures"`
	PaymailDomains       []string        `json:"paymailDomains"`
}

// ModelsUser defines model for models_User.
type ModelsUser struct {
	CreatedAt time.Time       `json:"createdAt"`
	Id        string          `json:"id"`
	Paymails  []ModelsPaymail `json:"paymails"`
	PublicKey string          `json:"publicKey"`
	UpdatedAt time.Time       `json:"updatedAt"`
}

// ModelsUserInfo defines model for models_UserInfo.
type ModelsUserInfo struct {
	// CurrentBalance Current balance of user
	CurrentBalance *string `json:"currentBalance,omitempty"`
}

// RequestsAddPaymail defines model for requests_AddPaymail.
type RequestsAddPaymail struct {
	Address    string `json:"address"`
	Alias      string `json:"alias"`
	AvatarURL  string `json:"avatarURL"`
	Domain     string `json:"domain"`
	PublicName string `json:"publicName"`
}

// RequestsAnnotatedTransaction defines model for requests_AnnotatedTransaction.
type RequestsAnnotatedTransaction struct {
	Annotations *ModelsAnnotations `json:"annotations,omitempty"`

	// Format Transaction format
	Format string `json:"format"`

	// Hex Transaction hex
	Hex string `json:"hex"`
}

// RequestsCreateUser defines model for requests_CreateUser.
type RequestsCreateUser struct {
	Paymail   *RequestsAddPaymail `json:"paymail,omitempty"`
	PublicKey string              `json:"publicKey"`
}

// RequestsPageNumber defines model for requests_PageNumber.
type RequestsPageNumber = int

// RequestsPageSize defines model for requests_PageSize.
type RequestsPageSize = int

// RequestsSort defines model for requests_Sort.
type RequestsSort = string

// RequestsSortBy defines model for requests_SortBy.
type RequestsSortBy = string

// ResponsesAdminAddPaymailSuccess defines model for responses_AdminAddPaymailSuccess.
type ResponsesAdminAddPaymailSuccess = ModelsPaymail

// ResponsesAdminCreateUserInternalServerError defines model for responses_AdminCreateUserInternalServerError.
type ResponsesAdminCreateUserInternalServerError = ErrorsCreatingUser

// ResponsesAdminCreateUserSuccess defines model for responses_AdminCreateUserSuccess.
type ResponsesAdminCreateUserSuccess = ModelsUser

// ResponsesAdminGetUser defines model for responses_AdminGetUser.
type ResponsesAdminGetUser = ModelsUser

// ResponsesAdminGetUserInternalServerError defines model for responses_AdminGetUserInternalServerError.
type ResponsesAdminGetUserInternalServerError = ErrorsGettingUser

// ResponsesAdminUserBadRequest defines model for responses_AdminUserBadRequest.
type ResponsesAdminUserBadRequest struct {
	union json.RawMessage
}

// ResponsesGetCurrentUserSuccess defines model for responses_GetCurrentUserSuccess.
type ResponsesGetCurrentUserSuccess = ModelsUserInfo

// ResponsesGetDataNotFound defines model for responses_GetDataNotFound.
type ResponsesGetDataNotFound struct {
	union json.RawMessage
}

// ResponsesGetDataSuccess defines model for responses_GetDataSuccess.
type ResponsesGetDataSuccess = ModelsData

// ResponsesInternalServerError defines model for responses_InternalServerError.
type ResponsesInternalServerError = ErrorsErrInternal

// ResponsesNotAuthorized defines model for responses_NotAuthorized.
type ResponsesNotAuthorized = ErrorsUnauthorized

// ResponsesRecordTransactionBadRequest defines model for responses_RecordTransactionBadRequest.
type ResponsesRecordTransactionBadRequest struct {
	union json.RawMessage
}

// ResponsesRecordTransactionInternalServerError defines model for responses_RecordTransactionInternalServerError.
type ResponsesRecordTransactionInternalServerError struct {
	union json.RawMessage
}

// ResponsesRecordTransactionSuccess defines model for responses_RecordTransactionSuccess.
type ResponsesRecordTransactionSuccess = ModelsRecordedOutline

// ResponsesSearchBadRequest defines model for responses_SearchBadRequest.
type ResponsesSearchBadRequest = ErrorsErrInvalidDataID

// ResponsesSearchOperationsSuccess defines model for responses_SearchOperationsSuccess.
type ResponsesSearchOperationsSuccess = ModelsOperationsSearchResult

// ResponsesSharedConfig Shared config
type ResponsesSharedConfig = ModelsSharedConfig

// ResponsesUserBadRequest defines model for responses_UserBadRequest.
type ResponsesUserBadRequest = ErrorsErrInvalidDataID

// ResponsesUserNotAuthorized defines model for responses_UserNotAuthorized.
type ResponsesUserNotAuthorized struct {
	union json.RawMessage
}

// GetApiV2OperationsSearchParams defines parameters for GetApiV2OperationsSearch.
type GetApiV2OperationsSearchParams struct {
	// Page Page number for pagination
	Page *RequestsPageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *RequestsPageSize `form:"size,omitempty" json:"size,omitempty"`

	// Sort Sorting order (asc or desc)
	Sort *RequestsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// SortBy Field to sort by
	SortBy *RequestsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = RequestsCreateUser

// AddPaymailToUserJSONRequestBody defines body for AddPaymailToUser for application/json ContentType.
type AddPaymailToUserJSONRequestBody = RequestsAddPaymail

// PostApiV2TransactionsJSONRequestBody defines body for PostApiV2Transactions for application/json ContentType.
type PostApiV2TransactionsJSONRequestBody = RequestsAnnotatedTransaction

// PostApiV2TransactionsOutlinesJSONRequestBody defines body for PostApiV2TransactionsOutlines for application/json ContentType.
type PostApiV2TransactionsOutlinesJSONRequestBody = RequestsAnnotatedTransaction

// AsErrorsAuthorization returns the union data inside the ErrorsUnauthorized as a ErrorsAuthorization
func (t ErrorsUnauthorized) AsErrorsAuthorization() (ErrorsAuthorization, error) {
	var body ErrorsAuthorization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAuthorization overwrites any union data inside the ErrorsUnauthorized as the provided ErrorsAuthorization
func (t *ErrorsUnauthorized) FromErrorsAuthorization(v ErrorsAuthorization) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAuthorization performs a merge with any union data inside the ErrorsUnauthorized, using the provided ErrorsAuthorization
func (t *ErrorsUnauthorized) MergeErrorsAuthorization(v ErrorsAuthorization) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsAdminAuthOnNonAdminEndpoint returns the union data inside the ErrorsUnauthorized as a ErrorsAdminAuthOnNonAdminEndpoint
func (t ErrorsUnauthorized) AsErrorsAdminAuthOnNonAdminEndpoint() (ErrorsAdminAuthOnNonAdminEndpoint, error) {
	var body ErrorsAdminAuthOnNonAdminEndpoint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAdminAuthOnNonAdminEndpoint overwrites any union data inside the ErrorsUnauthorized as the provided ErrorsAdminAuthOnNonAdminEndpoint
func (t *ErrorsUnauthorized) FromErrorsAdminAuthOnNonAdminEndpoint(v ErrorsAdminAuthOnNonAdminEndpoint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAdminAuthOnNonAdminEndpoint performs a merge with any union data inside the ErrorsUnauthorized, using the provided ErrorsAdminAuthOnNonAdminEndpoint
func (t *ErrorsUnauthorized) MergeErrorsAdminAuthOnNonAdminEndpoint(v ErrorsAdminAuthOnNonAdminEndpoint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsUserAuthOnNonUserEndpoint returns the union data inside the ErrorsUnauthorized as a ErrorsUserAuthOnNonUserEndpoint
func (t ErrorsUnauthorized) AsErrorsUserAuthOnNonUserEndpoint() (ErrorsUserAuthOnNonUserEndpoint, error) {
	var body ErrorsUserAuthOnNonUserEndpoint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsUserAuthOnNonUserEndpoint overwrites any union data inside the ErrorsUnauthorized as the provided ErrorsUserAuthOnNonUserEndpoint
func (t *ErrorsUnauthorized) FromErrorsUserAuthOnNonUserEndpoint(v ErrorsUserAuthOnNonUserEndpoint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsUserAuthOnNonUserEndpoint performs a merge with any union data inside the ErrorsUnauthorized, using the provided ErrorsUserAuthOnNonUserEndpoint
func (t *ErrorsUnauthorized) MergeErrorsUserAuthOnNonUserEndpoint(v ErrorsUserAuthOnNonUserEndpoint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsErrXPubAuthRequired returns the union data inside the ErrorsUnauthorized as a ErrorsErrXPubAuthRequired
func (t ErrorsUnauthorized) AsErrorsErrXPubAuthRequired() (ErrorsErrXPubAuthRequired, error) {
	var body ErrorsErrXPubAuthRequired
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrXPubAuthRequired overwrites any union data inside the ErrorsUnauthorized as the provided ErrorsErrXPubAuthRequired
func (t *ErrorsUnauthorized) FromErrorsErrXPubAuthRequired(v ErrorsErrXPubAuthRequired) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrXPubAuthRequired performs a merge with any union data inside the ErrorsUnauthorized, using the provided ErrorsErrXPubAuthRequired
func (t *ErrorsUnauthorized) MergeErrorsErrXPubAuthRequired(v ErrorsErrXPubAuthRequired) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ErrorsUnauthorized) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ErrorsUnauthorized) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsCannotBindRequest returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsCannotBindRequest
func (t ResponsesAdminUserBadRequest) AsErrorsCannotBindRequest() (ErrorsCannotBindRequest, error) {
	var body ErrorsCannotBindRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsCannotBindRequest overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsCannotBindRequest
func (t *ResponsesAdminUserBadRequest) FromErrorsCannotBindRequest(v ErrorsCannotBindRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsCannotBindRequest performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsCannotBindRequest
func (t *ResponsesAdminUserBadRequest) MergeErrorsCannotBindRequest(v ErrorsCannotBindRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsInvalidPubKey returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsInvalidPubKey
func (t ResponsesAdminUserBadRequest) AsErrorsInvalidPubKey() (ErrorsInvalidPubKey, error) {
	var body ErrorsInvalidPubKey
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidPubKey overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsInvalidPubKey
func (t *ResponsesAdminUserBadRequest) FromErrorsInvalidPubKey(v ErrorsInvalidPubKey) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidPubKey performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsInvalidPubKey
func (t *ResponsesAdminUserBadRequest) MergeErrorsInvalidPubKey(v ErrorsInvalidPubKey) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsInvalidPaymail returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsInvalidPaymail
func (t ResponsesAdminUserBadRequest) AsErrorsInvalidPaymail() (ErrorsInvalidPaymail, error) {
	var body ErrorsInvalidPaymail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidPaymail overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsInvalidPaymail
func (t *ResponsesAdminUserBadRequest) FromErrorsInvalidPaymail(v ErrorsInvalidPaymail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidPaymail performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsInvalidPaymail
func (t *ResponsesAdminUserBadRequest) MergeErrorsInvalidPaymail(v ErrorsInvalidPaymail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsPaymailInconsistent returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsPaymailInconsistent
func (t ResponsesAdminUserBadRequest) AsErrorsPaymailInconsistent() (ErrorsPaymailInconsistent, error) {
	var body ErrorsPaymailInconsistent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsPaymailInconsistent overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsPaymailInconsistent
func (t *ResponsesAdminUserBadRequest) FromErrorsPaymailInconsistent(v ErrorsPaymailInconsistent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsPaymailInconsistent performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsPaymailInconsistent
func (t *ResponsesAdminUserBadRequest) MergeErrorsPaymailInconsistent(v ErrorsPaymailInconsistent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsInvalidDomain returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsInvalidDomain
func (t ResponsesAdminUserBadRequest) AsErrorsInvalidDomain() (ErrorsInvalidDomain, error) {
	var body ErrorsInvalidDomain
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidDomain overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsInvalidDomain
func (t *ResponsesAdminUserBadRequest) FromErrorsInvalidDomain(v ErrorsInvalidDomain) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidDomain performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsInvalidDomain
func (t *ResponsesAdminUserBadRequest) MergeErrorsInvalidDomain(v ErrorsInvalidDomain) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesAdminUserBadRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesAdminUserBadRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsErrDataNotFound returns the union data inside the ResponsesGetDataNotFound as a ErrorsErrDataNotFound
func (t ResponsesGetDataNotFound) AsErrorsErrDataNotFound() (ErrorsErrDataNotFound, error) {
	var body ErrorsErrDataNotFound
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrDataNotFound overwrites any union data inside the ResponsesGetDataNotFound as the provided ErrorsErrDataNotFound
func (t *ResponsesGetDataNotFound) FromErrorsErrDataNotFound(v ErrorsErrDataNotFound) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrDataNotFound performs a merge with any union data inside the ResponsesGetDataNotFound, using the provided ErrorsErrDataNotFound
func (t *ResponsesGetDataNotFound) MergeErrorsErrDataNotFound(v ErrorsErrDataNotFound) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesGetDataNotFound) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesGetDataNotFound) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsErrInvalidDataID returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsErrInvalidDataID
func (t ResponsesRecordTransactionBadRequest) AsErrorsErrInvalidDataID() (ErrorsErrInvalidDataID, error) {
	var body ErrorsErrInvalidDataID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrInvalidDataID overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsErrInvalidDataID
func (t *ResponsesRecordTransactionBadRequest) FromErrorsErrInvalidDataID(v ErrorsErrInvalidDataID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrInvalidDataID performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsErrInvalidDataID
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsErrInvalidDataID(v ErrorsErrInvalidDataID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsErrAnnotationIndexOutOfRange returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsErrAnnotationIndexOutOfRange
func (t ResponsesRecordTransactionBadRequest) AsErrorsErrAnnotationIndexOutOfRange() (ErrorsErrAnnotationIndexOutOfRange, error) {
	var body ErrorsErrAnnotationIndexOutOfRange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrAnnotationIndexOutOfRange overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsErrAnnotationIndexOutOfRange
func (t *ResponsesRecordTransactionBadRequest) FromErrorsErrAnnotationIndexOutOfRange(v ErrorsErrAnnotationIndexOutOfRange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrAnnotationIndexOutOfRange performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsErrAnnotationIndexOutOfRange
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsErrAnnotationIndexOutOfRange(v ErrorsErrAnnotationIndexOutOfRange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsErrUTXOSpent returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsErrUTXOSpent
func (t ResponsesRecordTransactionBadRequest) AsErrorsErrUTXOSpent() (ErrorsErrUTXOSpent, error) {
	var body ErrorsErrUTXOSpent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrUTXOSpent overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsErrUTXOSpent
func (t *ResponsesRecordTransactionBadRequest) FromErrorsErrUTXOSpent(v ErrorsErrUTXOSpent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrUTXOSpent performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsErrUTXOSpent
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsErrUTXOSpent(v ErrorsErrUTXOSpent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsErrAnnotationIndexConversion returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsErrAnnotationIndexConversion
func (t ResponsesRecordTransactionBadRequest) AsErrorsErrAnnotationIndexConversion() (ErrorsErrAnnotationIndexConversion, error) {
	var body ErrorsErrAnnotationIndexConversion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrAnnotationIndexConversion overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsErrAnnotationIndexConversion
func (t *ResponsesRecordTransactionBadRequest) FromErrorsErrAnnotationIndexConversion(v ErrorsErrAnnotationIndexConversion) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrAnnotationIndexConversion performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsErrAnnotationIndexConversion
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsErrAnnotationIndexConversion(v ErrorsErrAnnotationIndexConversion) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsErrNoOperations returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsErrNoOperations
func (t ResponsesRecordTransactionBadRequest) AsErrorsErrNoOperations() (ErrorsErrNoOperations, error) {
	var body ErrorsErrNoOperations
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrNoOperations overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsErrNoOperations
func (t *ResponsesRecordTransactionBadRequest) FromErrorsErrNoOperations(v ErrorsErrNoOperations) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrNoOperations performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsErrNoOperations
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsErrNoOperations(v ErrorsErrNoOperations) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesRecordTransactionBadRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesRecordTransactionBadRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsErrInternal returns the union data inside the ResponsesRecordTransactionInternalServerError as a ErrorsErrInternal
func (t ResponsesRecordTransactionInternalServerError) AsErrorsErrInternal() (ErrorsErrInternal, error) {
	var body ErrorsErrInternal
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrInternal overwrites any union data inside the ResponsesRecordTransactionInternalServerError as the provided ErrorsErrInternal
func (t *ResponsesRecordTransactionInternalServerError) FromErrorsErrInternal(v ErrorsErrInternal) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrInternal performs a merge with any union data inside the ResponsesRecordTransactionInternalServerError, using the provided ErrorsErrInternal
func (t *ResponsesRecordTransactionInternalServerError) MergeErrorsErrInternal(v ErrorsErrInternal) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsErrGettingOutputs returns the union data inside the ResponsesRecordTransactionInternalServerError as a ErrorsErrGettingOutputs
func (t ResponsesRecordTransactionInternalServerError) AsErrorsErrGettingOutputs() (ErrorsErrGettingOutputs, error) {
	var body ErrorsErrGettingOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrGettingOutputs overwrites any union data inside the ResponsesRecordTransactionInternalServerError as the provided ErrorsErrGettingOutputs
func (t *ResponsesRecordTransactionInternalServerError) FromErrorsErrGettingOutputs(v ErrorsErrGettingOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrGettingOutputs performs a merge with any union data inside the ResponsesRecordTransactionInternalServerError, using the provided ErrorsErrGettingOutputs
func (t *ResponsesRecordTransactionInternalServerError) MergeErrorsErrGettingOutputs(v ErrorsErrGettingOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsErrTxBroadcast returns the union data inside the ResponsesRecordTransactionInternalServerError as a ErrorsErrTxBroadcast
func (t ResponsesRecordTransactionInternalServerError) AsErrorsErrTxBroadcast() (ErrorsErrTxBroadcast, error) {
	var body ErrorsErrTxBroadcast
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrTxBroadcast overwrites any union data inside the ResponsesRecordTransactionInternalServerError as the provided ErrorsErrTxBroadcast
func (t *ResponsesRecordTransactionInternalServerError) FromErrorsErrTxBroadcast(v ErrorsErrTxBroadcast) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrTxBroadcast performs a merge with any union data inside the ResponsesRecordTransactionInternalServerError, using the provided ErrorsErrTxBroadcast
func (t *ResponsesRecordTransactionInternalServerError) MergeErrorsErrTxBroadcast(v ErrorsErrTxBroadcast) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesRecordTransactionInternalServerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesRecordTransactionInternalServerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsUnauthorized returns the union data inside the ResponsesUserNotAuthorized as a ErrorsUnauthorized
func (t ResponsesUserNotAuthorized) AsErrorsUnauthorized() (ErrorsUnauthorized, error) {
	var body ErrorsUnauthorized
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsUnauthorized overwrites any union data inside the ResponsesUserNotAuthorized as the provided ErrorsUnauthorized
func (t *ResponsesUserNotAuthorized) FromErrorsUnauthorized(v ErrorsUnauthorized) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsUnauthorized performs a merge with any union data inside the ResponsesUserNotAuthorized, using the provided ErrorsUnauthorized
func (t *ResponsesUserNotAuthorized) MergeErrorsUnauthorized(v ErrorsUnauthorized) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsErrXPubAuthRequired returns the union data inside the ResponsesUserNotAuthorized as a ErrorsErrXPubAuthRequired
func (t ResponsesUserNotAuthorized) AsErrorsErrXPubAuthRequired() (ErrorsErrXPubAuthRequired, error) {
	var body ErrorsErrXPubAuthRequired
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsErrXPubAuthRequired overwrites any union data inside the ResponsesUserNotAuthorized as the provided ErrorsErrXPubAuthRequired
func (t *ResponsesUserNotAuthorized) FromErrorsErrXPubAuthRequired(v ErrorsErrXPubAuthRequired) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsErrXPubAuthRequired performs a merge with any union data inside the ResponsesUserNotAuthorized, using the provided ErrorsErrXPubAuthRequired
func (t *ResponsesUserNotAuthorized) MergeErrorsErrXPubAuthRequired(v ErrorsErrXPubAuthRequired) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesUserNotAuthorized) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesUserNotAuthorized) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
