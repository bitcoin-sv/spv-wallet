// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	XPubAuthScopes = "XPubAuth.Scopes"
)

// Defines values for ModelsOperationTxStatus.
const (
	BROADCASTED ModelsOperationTxStatus = "BROADCASTED"
	CREATED     ModelsOperationTxStatus = "CREATED"
	MINED       ModelsOperationTxStatus = "MINED"
	PROBLEMATIC ModelsOperationTxStatus = "PROBLEMATIC"
	REVERTED    ModelsOperationTxStatus = "REVERTED"
)

// Defines values for ModelsOperationType.
const (
	Incoming ModelsOperationType = "incoming"
	Outgoing ModelsOperationType = "outgoing"
)

// Defines values for ModelsSearchPageSort.
const (
	Asc  ModelsSearchPageSort = "asc"
	Desc ModelsSearchPageSort = "desc"
)

// ErrorsAdminAuthOnNonAdminEndpoint defines model for errors_AdminAuthOnNonAdminEndpoint.
type ErrorsAdminAuthOnNonAdminEndpoint struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsAnnotationIndexConversion defines model for errors_AnnotationIndexConversion.
type ErrorsAnnotationIndexConversion struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsAnnotationIndexOutOfRange defines model for errors_AnnotationIndexOutOfRange.
type ErrorsAnnotationIndexOutOfRange struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsAuthXPubRequired defines model for errors_AuthXPubRequired.
type ErrorsAuthXPubRequired struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsAuthorization defines model for errors_Authorization.
type ErrorsAuthorization struct {
	union json.RawMessage
}

// ErrorsCannotBindRequest defines model for errors_CannotBindRequest.
type ErrorsCannotBindRequest struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsCreatingUser defines model for errors_CreatingUser.
type ErrorsCreatingUser struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsDataNotFound defines model for errors_DataNotFound.
type ErrorsDataNotFound struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsGettingOutputs defines model for errors_GettingOutputs.
type ErrorsGettingOutputs struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsGettingUser defines model for errors_GettingUser.
type ErrorsGettingUser struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInternal defines model for errors_Internal.
type ErrorsInternal struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidDataID defines model for errors_InvalidDataID.
type ErrorsInvalidDataID struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidDomain defines model for errors_InvalidDomain.
type ErrorsInvalidDomain struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidPaymail defines model for errors_InvalidPaymail.
type ErrorsInvalidPaymail struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidPubKey defines model for errors_InvalidPubKey.
type ErrorsInvalidPubKey struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsNoOperations defines model for errors_NoOperations.
type ErrorsNoOperations struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsPaymailInconsistent defines model for errors_PaymailInconsistent.
type ErrorsPaymailInconsistent struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsSchema defines model for errors_Schema.
type ErrorsSchema struct {
	// Code Error code
	Code string `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// ErrorsTxBroadcast defines model for errors_TxBroadcast.
type ErrorsTxBroadcast struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsUTXOSpent defines model for errors_UTXOSpent.
type ErrorsUTXOSpent struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsUnauthorized defines model for errors_Unauthorized.
type ErrorsUnauthorized struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsUserAuthOnNonUserEndpoint defines model for errors_UserAuthOnNonUserEndpoint.
type ErrorsUserAuthOnNonUserEndpoint struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ModelsAnnotations defines model for models_Annotations.
type ModelsAnnotations struct {
	// Inputs Map of input annotations
	Inputs *map[string]ModelsInputAnnotation `json:"inputs,omitempty"`

	// Outputs Map of output annotations
	Outputs *map[string]ModelsOutputAnnotation `json:"outputs,omitempty"`
}

// ModelsData defines model for models_Data.
type ModelsData struct {
	// Blob Data blob
	Blob string `json:"blob"`

	// Id User ID
	Id string `json:"id"`
}

// ModelsInputAnnotation defines model for models_InputAnnotation.
type ModelsInputAnnotation struct {
	// CustomInstructions Instructions about how to unlock this input.
	CustomInstructions string `json:"customInstructions"`
}

// ModelsOperation defines model for models_Operation.
type ModelsOperation struct {
	// Counterparty Counterparty of operation
	Counterparty *string `json:"counterparty,omitempty"`

	// CreatedAt Creation date of operation
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// TxID Transaction ID
	TxID *string `json:"txID,omitempty"`

	// TxStatus Status of transaction
	TxStatus *ModelsOperationTxStatus `json:"txStatus,omitempty"`

	// Type Type of operation
	Type *ModelsOperationType `json:"type,omitempty"`

	// Value Value of operation
	Value *int64 `json:"value,omitempty"`
}

// ModelsOperationTxStatus Status of transaction
type ModelsOperationTxStatus string

// ModelsOperationType Type of operation
type ModelsOperationType string

// ModelsOperationsSearchResult defines model for models_OperationsSearchResult.
type ModelsOperationsSearchResult struct {
	Operations *[]ModelsOperation `json:"operations,omitempty"`
	Page       *ModelsSearchPage  `json:"page,omitempty"`
}

// ModelsOutputAnnotation defines model for models_OutputAnnotation.
type ModelsOutputAnnotation struct {
	// Bucket Type of bucket where this output should be stored.
	Bucket  string                   `json:"bucket"`
	Paymail *ModelsPaymailAnnotation `json:"paymail,omitempty"`
}

// ModelsPaymail defines model for models_Paymail.
type ModelsPaymail struct {
	Alias      string `json:"alias"`
	Avatar     string `json:"avatar"`
	Domain     string `json:"domain"`
	Id         uint   `json:"id"`
	Paymail    string `json:"paymail"`
	PublicName string `json:"publicName"`
}

// ModelsPaymailAnnotation defines model for models_PaymailAnnotation.
type ModelsPaymailAnnotation struct {
	// Receiver Paymail address of the receiver
	Receiver string `json:"receiver"`

	// Reference Reference number used for paymail transaction
	Reference string `json:"reference"`

	// Sender Paymail address of the sender
	Sender string `json:"sender"`
}

// ModelsRecordedOutline defines model for models_RecordedOutline.
type ModelsRecordedOutline struct {
	// TxID ID of the transaction
	TxID string `json:"txID"`
}

// ModelsSearchPage defines model for models_SearchPage.
type ModelsSearchPage struct {
	// Number Page number for pagination
	Number *int `json:"number,omitempty"`

	// Size Number of items per page
	Size *int `json:"size,omitempty"`

	// Sort Sorting order (asc or desc)
	Sort *ModelsSearchPageSort `json:"sort,omitempty"`

	// SortBy Field to sort by
	SortBy *string `json:"sortBy,omitempty"`
}

// ModelsSearchPageSort Sorting order (asc or desc)
type ModelsSearchPageSort string

// ModelsSharedConfig Shared config
type ModelsSharedConfig struct {
	ExperimentalFeatures map[string]bool `json:"experimentalFeatures"`
	PaymailDomains       []string        `json:"paymailDomains"`
}

// ModelsUser defines model for models_User.
type ModelsUser struct {
	CreatedAt time.Time       `json:"createdAt"`
	Id        string          `json:"id"`
	Paymails  []ModelsPaymail `json:"paymails"`
	PublicKey string          `json:"publicKey"`
	UpdatedAt time.Time       `json:"updatedAt"`
}

// ModelsUserInfo defines model for models_UserInfo.
type ModelsUserInfo struct {
	// CurrentBalance Current balance of user
	CurrentBalance *string `json:"currentBalance,omitempty"`
}

// RequestsAddPaymail defines model for requests_AddPaymail.
type RequestsAddPaymail struct {
	Address    string `json:"address"`
	Alias      string `json:"alias"`
	AvatarURL  string `json:"avatarURL"`
	Domain     string `json:"domain"`
	PublicName string `json:"publicName"`
}

// RequestsAnnotatedTransaction defines model for requests_AnnotatedTransaction.
type RequestsAnnotatedTransaction struct {
	Annotations *ModelsAnnotations `json:"annotations,omitempty"`

	// Format Transaction format
	Format string `json:"format"`

	// Hex Transaction hex
	Hex string `json:"hex"`
}

// RequestsCreateUser defines model for requests_CreateUser.
type RequestsCreateUser struct {
	Paymail   *RequestsAddPaymail `json:"paymail,omitempty"`
	PublicKey string              `json:"publicKey"`
}

// RequestsPageNumber defines model for requests_PageNumber.
type RequestsPageNumber = int

// RequestsPageSize defines model for requests_PageSize.
type RequestsPageSize = int

// RequestsSort defines model for requests_Sort.
type RequestsSort = string

// RequestsSortBy defines model for requests_SortBy.
type RequestsSortBy = string

// ResponsesAdminAddPaymailSuccess defines model for responses_AdminAddPaymailSuccess.
type ResponsesAdminAddPaymailSuccess = ModelsPaymail

// ResponsesAdminCreateUserInternalServerError defines model for responses_AdminCreateUserInternalServerError.
type ResponsesAdminCreateUserInternalServerError = ErrorsCreatingUser

// ResponsesAdminCreateUserSuccess defines model for responses_AdminCreateUserSuccess.
type ResponsesAdminCreateUserSuccess = ModelsUser

// ResponsesAdminGetUser defines model for responses_AdminGetUser.
type ResponsesAdminGetUser = ModelsUser

// ResponsesAdminGetUserInternalServerError defines model for responses_AdminGetUserInternalServerError.
type ResponsesAdminGetUserInternalServerError = ErrorsGettingUser

// ResponsesAdminUserBadRequest defines model for responses_AdminUserBadRequest.
type ResponsesAdminUserBadRequest struct {
	union json.RawMessage
}

// ResponsesGetCurrentUserSuccess defines model for responses_GetCurrentUserSuccess.
type ResponsesGetCurrentUserSuccess = ModelsUserInfo

// ResponsesGetDataNotFound defines model for responses_GetDataNotFound.
type ResponsesGetDataNotFound struct {
	union json.RawMessage
}

// ResponsesGetDataSuccess defines model for responses_GetDataSuccess.
type ResponsesGetDataSuccess = ModelsData

// ResponsesInternalServerError defines model for responses_InternalServerError.
type ResponsesInternalServerError = ErrorsInternal

// ResponsesNotAuthorized defines model for responses_NotAuthorized.
type ResponsesNotAuthorized = ErrorsAuthorization

// ResponsesRecordTransactionBadRequest defines model for responses_RecordTransactionBadRequest.
type ResponsesRecordTransactionBadRequest struct {
	union json.RawMessage
}

// ResponsesRecordTransactionInternalServerError defines model for responses_RecordTransactionInternalServerError.
type ResponsesRecordTransactionInternalServerError struct {
	union json.RawMessage
}

// ResponsesRecordTransactionSuccess defines model for responses_RecordTransactionSuccess.
type ResponsesRecordTransactionSuccess = ModelsRecordedOutline

// ResponsesSearchBadRequest defines model for responses_SearchBadRequest.
type ResponsesSearchBadRequest = ErrorsInvalidDataID

// ResponsesSearchOperationsSuccess defines model for responses_SearchOperationsSuccess.
type ResponsesSearchOperationsSuccess = ModelsOperationsSearchResult

// ResponsesSharedConfig Shared config
type ResponsesSharedConfig = ModelsSharedConfig

// ResponsesUserBadRequest defines model for responses_UserBadRequest.
type ResponsesUserBadRequest = ErrorsInvalidDataID

// ResponsesUserNotAuthorized defines model for responses_UserNotAuthorized.
type ResponsesUserNotAuthorized struct {
	union json.RawMessage
}

// SearchOperationsParams defines parameters for SearchOperations.
type SearchOperationsParams struct {
	// Page Page number for pagination
	Page *RequestsPageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *RequestsPageSize `form:"size,omitempty" json:"size,omitempty"`

	// Sort Sorting order (asc or desc)
	Sort *RequestsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// SortBy Field to sort by
	SortBy *RequestsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = RequestsCreateUser

// AddPaymailToUserJSONRequestBody defines body for AddPaymailToUser for application/json ContentType.
type AddPaymailToUserJSONRequestBody = RequestsAddPaymail

// RecordTransactionOutlineJSONRequestBody defines body for RecordTransactionOutline for application/json ContentType.
type RecordTransactionOutlineJSONRequestBody = RequestsAnnotatedTransaction

// CreateTransactionOutlineJSONRequestBody defines body for CreateTransactionOutline for application/json ContentType.
type CreateTransactionOutlineJSONRequestBody = RequestsAnnotatedTransaction

// AsErrorsUnauthorized returns the union data inside the ErrorsAuthorization as a ErrorsUnauthorized
func (t ErrorsAuthorization) AsErrorsUnauthorized() (ErrorsUnauthorized, error) {
	var body ErrorsUnauthorized
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsUnauthorized overwrites any union data inside the ErrorsAuthorization as the provided ErrorsUnauthorized
func (t *ErrorsAuthorization) FromErrorsUnauthorized(v ErrorsUnauthorized) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsUnauthorized performs a merge with any union data inside the ErrorsAuthorization, using the provided ErrorsUnauthorized
func (t *ErrorsAuthorization) MergeErrorsUnauthorized(v ErrorsUnauthorized) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsAdminAuthOnNonAdminEndpoint returns the union data inside the ErrorsAuthorization as a ErrorsAdminAuthOnNonAdminEndpoint
func (t ErrorsAuthorization) AsErrorsAdminAuthOnNonAdminEndpoint() (ErrorsAdminAuthOnNonAdminEndpoint, error) {
	var body ErrorsAdminAuthOnNonAdminEndpoint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAdminAuthOnNonAdminEndpoint overwrites any union data inside the ErrorsAuthorization as the provided ErrorsAdminAuthOnNonAdminEndpoint
func (t *ErrorsAuthorization) FromErrorsAdminAuthOnNonAdminEndpoint(v ErrorsAdminAuthOnNonAdminEndpoint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAdminAuthOnNonAdminEndpoint performs a merge with any union data inside the ErrorsAuthorization, using the provided ErrorsAdminAuthOnNonAdminEndpoint
func (t *ErrorsAuthorization) MergeErrorsAdminAuthOnNonAdminEndpoint(v ErrorsAdminAuthOnNonAdminEndpoint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsUserAuthOnNonUserEndpoint returns the union data inside the ErrorsAuthorization as a ErrorsUserAuthOnNonUserEndpoint
func (t ErrorsAuthorization) AsErrorsUserAuthOnNonUserEndpoint() (ErrorsUserAuthOnNonUserEndpoint, error) {
	var body ErrorsUserAuthOnNonUserEndpoint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsUserAuthOnNonUserEndpoint overwrites any union data inside the ErrorsAuthorization as the provided ErrorsUserAuthOnNonUserEndpoint
func (t *ErrorsAuthorization) FromErrorsUserAuthOnNonUserEndpoint(v ErrorsUserAuthOnNonUserEndpoint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsUserAuthOnNonUserEndpoint performs a merge with any union data inside the ErrorsAuthorization, using the provided ErrorsUserAuthOnNonUserEndpoint
func (t *ErrorsAuthorization) MergeErrorsUserAuthOnNonUserEndpoint(v ErrorsUserAuthOnNonUserEndpoint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsAuthXPubRequired returns the union data inside the ErrorsAuthorization as a ErrorsAuthXPubRequired
func (t ErrorsAuthorization) AsErrorsAuthXPubRequired() (ErrorsAuthXPubRequired, error) {
	var body ErrorsAuthXPubRequired
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAuthXPubRequired overwrites any union data inside the ErrorsAuthorization as the provided ErrorsAuthXPubRequired
func (t *ErrorsAuthorization) FromErrorsAuthXPubRequired(v ErrorsAuthXPubRequired) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAuthXPubRequired performs a merge with any union data inside the ErrorsAuthorization, using the provided ErrorsAuthXPubRequired
func (t *ErrorsAuthorization) MergeErrorsAuthXPubRequired(v ErrorsAuthXPubRequired) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ErrorsAuthorization) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ErrorsAuthorization) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsCannotBindRequest returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsCannotBindRequest
func (t ResponsesAdminUserBadRequest) AsErrorsCannotBindRequest() (ErrorsCannotBindRequest, error) {
	var body ErrorsCannotBindRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsCannotBindRequest overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsCannotBindRequest
func (t *ResponsesAdminUserBadRequest) FromErrorsCannotBindRequest(v ErrorsCannotBindRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsCannotBindRequest performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsCannotBindRequest
func (t *ResponsesAdminUserBadRequest) MergeErrorsCannotBindRequest(v ErrorsCannotBindRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsInvalidPubKey returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsInvalidPubKey
func (t ResponsesAdminUserBadRequest) AsErrorsInvalidPubKey() (ErrorsInvalidPubKey, error) {
	var body ErrorsInvalidPubKey
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidPubKey overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsInvalidPubKey
func (t *ResponsesAdminUserBadRequest) FromErrorsInvalidPubKey(v ErrorsInvalidPubKey) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidPubKey performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsInvalidPubKey
func (t *ResponsesAdminUserBadRequest) MergeErrorsInvalidPubKey(v ErrorsInvalidPubKey) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsInvalidPaymail returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsInvalidPaymail
func (t ResponsesAdminUserBadRequest) AsErrorsInvalidPaymail() (ErrorsInvalidPaymail, error) {
	var body ErrorsInvalidPaymail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidPaymail overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsInvalidPaymail
func (t *ResponsesAdminUserBadRequest) FromErrorsInvalidPaymail(v ErrorsInvalidPaymail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidPaymail performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsInvalidPaymail
func (t *ResponsesAdminUserBadRequest) MergeErrorsInvalidPaymail(v ErrorsInvalidPaymail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsPaymailInconsistent returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsPaymailInconsistent
func (t ResponsesAdminUserBadRequest) AsErrorsPaymailInconsistent() (ErrorsPaymailInconsistent, error) {
	var body ErrorsPaymailInconsistent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsPaymailInconsistent overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsPaymailInconsistent
func (t *ResponsesAdminUserBadRequest) FromErrorsPaymailInconsistent(v ErrorsPaymailInconsistent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsPaymailInconsistent performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsPaymailInconsistent
func (t *ResponsesAdminUserBadRequest) MergeErrorsPaymailInconsistent(v ErrorsPaymailInconsistent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsInvalidDomain returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsInvalidDomain
func (t ResponsesAdminUserBadRequest) AsErrorsInvalidDomain() (ErrorsInvalidDomain, error) {
	var body ErrorsInvalidDomain
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidDomain overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsInvalidDomain
func (t *ResponsesAdminUserBadRequest) FromErrorsInvalidDomain(v ErrorsInvalidDomain) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidDomain performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsInvalidDomain
func (t *ResponsesAdminUserBadRequest) MergeErrorsInvalidDomain(v ErrorsInvalidDomain) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesAdminUserBadRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesAdminUserBadRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsDataNotFound returns the union data inside the ResponsesGetDataNotFound as a ErrorsDataNotFound
func (t ResponsesGetDataNotFound) AsErrorsDataNotFound() (ErrorsDataNotFound, error) {
	var body ErrorsDataNotFound
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsDataNotFound overwrites any union data inside the ResponsesGetDataNotFound as the provided ErrorsDataNotFound
func (t *ResponsesGetDataNotFound) FromErrorsDataNotFound(v ErrorsDataNotFound) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsDataNotFound performs a merge with any union data inside the ResponsesGetDataNotFound, using the provided ErrorsDataNotFound
func (t *ResponsesGetDataNotFound) MergeErrorsDataNotFound(v ErrorsDataNotFound) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesGetDataNotFound) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesGetDataNotFound) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsInvalidDataID returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsInvalidDataID
func (t ResponsesRecordTransactionBadRequest) AsErrorsInvalidDataID() (ErrorsInvalidDataID, error) {
	var body ErrorsInvalidDataID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidDataID overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsInvalidDataID
func (t *ResponsesRecordTransactionBadRequest) FromErrorsInvalidDataID(v ErrorsInvalidDataID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidDataID performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsInvalidDataID
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsInvalidDataID(v ErrorsInvalidDataID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsAnnotationIndexOutOfRange returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsAnnotationIndexOutOfRange
func (t ResponsesRecordTransactionBadRequest) AsErrorsAnnotationIndexOutOfRange() (ErrorsAnnotationIndexOutOfRange, error) {
	var body ErrorsAnnotationIndexOutOfRange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAnnotationIndexOutOfRange overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsAnnotationIndexOutOfRange
func (t *ResponsesRecordTransactionBadRequest) FromErrorsAnnotationIndexOutOfRange(v ErrorsAnnotationIndexOutOfRange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAnnotationIndexOutOfRange performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsAnnotationIndexOutOfRange
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsAnnotationIndexOutOfRange(v ErrorsAnnotationIndexOutOfRange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsUTXOSpent returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsUTXOSpent
func (t ResponsesRecordTransactionBadRequest) AsErrorsUTXOSpent() (ErrorsUTXOSpent, error) {
	var body ErrorsUTXOSpent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsUTXOSpent overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsUTXOSpent
func (t *ResponsesRecordTransactionBadRequest) FromErrorsUTXOSpent(v ErrorsUTXOSpent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsUTXOSpent performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsUTXOSpent
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsUTXOSpent(v ErrorsUTXOSpent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsAnnotationIndexConversion returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsAnnotationIndexConversion
func (t ResponsesRecordTransactionBadRequest) AsErrorsAnnotationIndexConversion() (ErrorsAnnotationIndexConversion, error) {
	var body ErrorsAnnotationIndexConversion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAnnotationIndexConversion overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsAnnotationIndexConversion
func (t *ResponsesRecordTransactionBadRequest) FromErrorsAnnotationIndexConversion(v ErrorsAnnotationIndexConversion) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAnnotationIndexConversion performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsAnnotationIndexConversion
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsAnnotationIndexConversion(v ErrorsAnnotationIndexConversion) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsNoOperations returns the union data inside the ResponsesRecordTransactionBadRequest as a ErrorsNoOperations
func (t ResponsesRecordTransactionBadRequest) AsErrorsNoOperations() (ErrorsNoOperations, error) {
	var body ErrorsNoOperations
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsNoOperations overwrites any union data inside the ResponsesRecordTransactionBadRequest as the provided ErrorsNoOperations
func (t *ResponsesRecordTransactionBadRequest) FromErrorsNoOperations(v ErrorsNoOperations) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsNoOperations performs a merge with any union data inside the ResponsesRecordTransactionBadRequest, using the provided ErrorsNoOperations
func (t *ResponsesRecordTransactionBadRequest) MergeErrorsNoOperations(v ErrorsNoOperations) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesRecordTransactionBadRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesRecordTransactionBadRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsInternal returns the union data inside the ResponsesRecordTransactionInternalServerError as a ErrorsInternal
func (t ResponsesRecordTransactionInternalServerError) AsErrorsInternal() (ErrorsInternal, error) {
	var body ErrorsInternal
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInternal overwrites any union data inside the ResponsesRecordTransactionInternalServerError as the provided ErrorsInternal
func (t *ResponsesRecordTransactionInternalServerError) FromErrorsInternal(v ErrorsInternal) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInternal performs a merge with any union data inside the ResponsesRecordTransactionInternalServerError, using the provided ErrorsInternal
func (t *ResponsesRecordTransactionInternalServerError) MergeErrorsInternal(v ErrorsInternal) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsGettingOutputs returns the union data inside the ResponsesRecordTransactionInternalServerError as a ErrorsGettingOutputs
func (t ResponsesRecordTransactionInternalServerError) AsErrorsGettingOutputs() (ErrorsGettingOutputs, error) {
	var body ErrorsGettingOutputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsGettingOutputs overwrites any union data inside the ResponsesRecordTransactionInternalServerError as the provided ErrorsGettingOutputs
func (t *ResponsesRecordTransactionInternalServerError) FromErrorsGettingOutputs(v ErrorsGettingOutputs) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsGettingOutputs performs a merge with any union data inside the ResponsesRecordTransactionInternalServerError, using the provided ErrorsGettingOutputs
func (t *ResponsesRecordTransactionInternalServerError) MergeErrorsGettingOutputs(v ErrorsGettingOutputs) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsTxBroadcast returns the union data inside the ResponsesRecordTransactionInternalServerError as a ErrorsTxBroadcast
func (t ResponsesRecordTransactionInternalServerError) AsErrorsTxBroadcast() (ErrorsTxBroadcast, error) {
	var body ErrorsTxBroadcast
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsTxBroadcast overwrites any union data inside the ResponsesRecordTransactionInternalServerError as the provided ErrorsTxBroadcast
func (t *ResponsesRecordTransactionInternalServerError) FromErrorsTxBroadcast(v ErrorsTxBroadcast) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsTxBroadcast performs a merge with any union data inside the ResponsesRecordTransactionInternalServerError, using the provided ErrorsTxBroadcast
func (t *ResponsesRecordTransactionInternalServerError) MergeErrorsTxBroadcast(v ErrorsTxBroadcast) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesRecordTransactionInternalServerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesRecordTransactionInternalServerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsAuthorization returns the union data inside the ResponsesUserNotAuthorized as a ErrorsAuthorization
func (t ResponsesUserNotAuthorized) AsErrorsAuthorization() (ErrorsAuthorization, error) {
	var body ErrorsAuthorization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAuthorization overwrites any union data inside the ResponsesUserNotAuthorized as the provided ErrorsAuthorization
func (t *ResponsesUserNotAuthorized) FromErrorsAuthorization(v ErrorsAuthorization) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAuthorization performs a merge with any union data inside the ResponsesUserNotAuthorized, using the provided ErrorsAuthorization
func (t *ResponsesUserNotAuthorized) MergeErrorsAuthorization(v ErrorsAuthorization) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsAuthXPubRequired returns the union data inside the ResponsesUserNotAuthorized as a ErrorsAuthXPubRequired
func (t ResponsesUserNotAuthorized) AsErrorsAuthXPubRequired() (ErrorsAuthXPubRequired, error) {
	var body ErrorsAuthXPubRequired
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAuthXPubRequired overwrites any union data inside the ResponsesUserNotAuthorized as the provided ErrorsAuthXPubRequired
func (t *ResponsesUserNotAuthorized) FromErrorsAuthXPubRequired(v ErrorsAuthXPubRequired) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAuthXPubRequired performs a merge with any union data inside the ResponsesUserNotAuthorized, using the provided ErrorsAuthXPubRequired
func (t *ResponsesUserNotAuthorized) MergeErrorsAuthXPubRequired(v ErrorsAuthXPubRequired) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesUserNotAuthorized) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesUserNotAuthorized) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
