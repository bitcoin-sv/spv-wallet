// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	XPubAuthScopes = "XPubAuth.Scopes"
)

// ErrorsAdminAuthOnNonAdminEndpoint defines model for errors_AdminAuthOnNonAdminEndpoint.
type ErrorsAdminAuthOnNonAdminEndpoint struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsAuthorization defines model for errors_Authorization.
type ErrorsAuthorization struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsCannotBindRequest defines model for errors_CannotBindRequest.
type ErrorsCannotBindRequest struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsCreatingUser defines model for errors_CreatingUser.
type ErrorsCreatingUser struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsGettingUser defines model for errors_GettingUser.
type ErrorsGettingUser struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidDomain defines model for errors_InvalidDomain.
type ErrorsInvalidDomain struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidPaymail defines model for errors_InvalidPaymail.
type ErrorsInvalidPaymail struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsInvalidPubKey defines model for errors_InvalidPubKey.
type ErrorsInvalidPubKey struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsPaymailInconsistent defines model for errors_PaymailInconsistent.
type ErrorsPaymailInconsistent struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsSchema defines model for errors_Schema.
type ErrorsSchema struct {
	// Code Error code
	Code string `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// ErrorsUnauthorized defines model for errors_Unauthorized.
type ErrorsUnauthorized struct {
	union json.RawMessage
}

// ErrorsUserAuthOnNonUserEndpoint defines model for errors_UserAuthOnNonUserEndpoint.
type ErrorsUserAuthOnNonUserEndpoint struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ErrorsWrongAuthScopeFormat defines model for errors_WrongAuthScopeFormat.
type ErrorsWrongAuthScopeFormat struct {
	Code    interface{} `json:"code"`
	Message interface{} `json:"message"`
}

// ModelsPaymail defines model for models_Paymail.
type ModelsPaymail struct {
	Alias      string `json:"alias"`
	Avatar     string `json:"avatar"`
	Domain     string `json:"domain"`
	Id         uint   `json:"id"`
	Paymail    string `json:"paymail"`
	PublicName string `json:"publicName"`
}

// ModelsSharedConfig Shared config
type ModelsSharedConfig struct {
	ExperimentalFeatures map[string]bool `json:"experimentalFeatures"`
	PaymailDomains       []string        `json:"paymailDomains"`
}

// ModelsUser defines model for models_User.
type ModelsUser struct {
	CreatedAt time.Time       `json:"createdAt"`
	Id        string          `json:"id"`
	Paymails  []ModelsPaymail `json:"paymails"`
	PublicKey string          `json:"publicKey"`
	UpdatedAt time.Time       `json:"updatedAt"`
}

// RequestsAddPaymail defines model for requests_AddPaymail.
type RequestsAddPaymail struct {
	Address    string `json:"address"`
	Alias      string `json:"alias"`
	AvatarURL  string `json:"avatarURL"`
	Domain     string `json:"domain"`
	PublicName string `json:"publicName"`
}

// RequestsCreateUser defines model for requests_CreateUser.
type RequestsCreateUser struct {
	Paymail   *RequestsAddPaymail `json:"paymail,omitempty"`
	PublicKey string              `json:"publicKey"`
}

// ResponsesAdminAddPaymailSuccess defines model for responses_AdminAddPaymailSuccess.
type ResponsesAdminAddPaymailSuccess = ModelsPaymail

// ResponsesAdminCreateUserInternalServerError defines model for responses_AdminCreateUserInternalServerError.
type ResponsesAdminCreateUserInternalServerError = ErrorsCreatingUser

// ResponsesAdminCreateUserSuccess defines model for responses_AdminCreateUserSuccess.
type ResponsesAdminCreateUserSuccess = ModelsUser

// ResponsesAdminGetUser defines model for responses_AdminGetUser.
type ResponsesAdminGetUser = ModelsUser

// ResponsesAdminGetUserInternalServerError defines model for responses_AdminGetUserInternalServerError.
type ResponsesAdminGetUserInternalServerError = ErrorsGettingUser

// ResponsesAdminUserBadRequest defines model for responses_AdminUserBadRequest.
type ResponsesAdminUserBadRequest struct {
	union json.RawMessage
}

// ResponsesNotAuthorized defines model for responses_NotAuthorized.
type ResponsesNotAuthorized = ErrorsUnauthorized

// ResponsesSharedConfig Shared config
type ResponsesSharedConfig = ModelsSharedConfig

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = RequestsCreateUser

// AddPaymailToUserJSONRequestBody defines body for AddPaymailToUser for application/json ContentType.
type AddPaymailToUserJSONRequestBody = RequestsAddPaymail

// AsErrorsAuthorization returns the union data inside the ErrorsUnauthorized as a ErrorsAuthorization
func (t ErrorsUnauthorized) AsErrorsAuthorization() (ErrorsAuthorization, error) {
	var body ErrorsAuthorization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAuthorization overwrites any union data inside the ErrorsUnauthorized as the provided ErrorsAuthorization
func (t *ErrorsUnauthorized) FromErrorsAuthorization(v ErrorsAuthorization) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAuthorization performs a merge with any union data inside the ErrorsUnauthorized, using the provided ErrorsAuthorization
func (t *ErrorsUnauthorized) MergeErrorsAuthorization(v ErrorsAuthorization) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsWrongAuthScopeFormat returns the union data inside the ErrorsUnauthorized as a ErrorsWrongAuthScopeFormat
func (t ErrorsUnauthorized) AsErrorsWrongAuthScopeFormat() (ErrorsWrongAuthScopeFormat, error) {
	var body ErrorsWrongAuthScopeFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsWrongAuthScopeFormat overwrites any union data inside the ErrorsUnauthorized as the provided ErrorsWrongAuthScopeFormat
func (t *ErrorsUnauthorized) FromErrorsWrongAuthScopeFormat(v ErrorsWrongAuthScopeFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsWrongAuthScopeFormat performs a merge with any union data inside the ErrorsUnauthorized, using the provided ErrorsWrongAuthScopeFormat
func (t *ErrorsUnauthorized) MergeErrorsWrongAuthScopeFormat(v ErrorsWrongAuthScopeFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsAdminAuthOnNonAdminEndpoint returns the union data inside the ErrorsUnauthorized as a ErrorsAdminAuthOnNonAdminEndpoint
func (t ErrorsUnauthorized) AsErrorsAdminAuthOnNonAdminEndpoint() (ErrorsAdminAuthOnNonAdminEndpoint, error) {
	var body ErrorsAdminAuthOnNonAdminEndpoint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsAdminAuthOnNonAdminEndpoint overwrites any union data inside the ErrorsUnauthorized as the provided ErrorsAdminAuthOnNonAdminEndpoint
func (t *ErrorsUnauthorized) FromErrorsAdminAuthOnNonAdminEndpoint(v ErrorsAdminAuthOnNonAdminEndpoint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsAdminAuthOnNonAdminEndpoint performs a merge with any union data inside the ErrorsUnauthorized, using the provided ErrorsAdminAuthOnNonAdminEndpoint
func (t *ErrorsUnauthorized) MergeErrorsAdminAuthOnNonAdminEndpoint(v ErrorsAdminAuthOnNonAdminEndpoint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsUserAuthOnNonUserEndpoint returns the union data inside the ErrorsUnauthorized as a ErrorsUserAuthOnNonUserEndpoint
func (t ErrorsUnauthorized) AsErrorsUserAuthOnNonUserEndpoint() (ErrorsUserAuthOnNonUserEndpoint, error) {
	var body ErrorsUserAuthOnNonUserEndpoint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsUserAuthOnNonUserEndpoint overwrites any union data inside the ErrorsUnauthorized as the provided ErrorsUserAuthOnNonUserEndpoint
func (t *ErrorsUnauthorized) FromErrorsUserAuthOnNonUserEndpoint(v ErrorsUserAuthOnNonUserEndpoint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsUserAuthOnNonUserEndpoint performs a merge with any union data inside the ErrorsUnauthorized, using the provided ErrorsUserAuthOnNonUserEndpoint
func (t *ErrorsUnauthorized) MergeErrorsUserAuthOnNonUserEndpoint(v ErrorsUserAuthOnNonUserEndpoint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ErrorsUnauthorized) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ErrorsUnauthorized) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorsCannotBindRequest returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsCannotBindRequest
func (t ResponsesAdminUserBadRequest) AsErrorsCannotBindRequest() (ErrorsCannotBindRequest, error) {
	var body ErrorsCannotBindRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsCannotBindRequest overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsCannotBindRequest
func (t *ResponsesAdminUserBadRequest) FromErrorsCannotBindRequest(v ErrorsCannotBindRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsCannotBindRequest performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsCannotBindRequest
func (t *ResponsesAdminUserBadRequest) MergeErrorsCannotBindRequest(v ErrorsCannotBindRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsInvalidPubKey returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsInvalidPubKey
func (t ResponsesAdminUserBadRequest) AsErrorsInvalidPubKey() (ErrorsInvalidPubKey, error) {
	var body ErrorsInvalidPubKey
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidPubKey overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsInvalidPubKey
func (t *ResponsesAdminUserBadRequest) FromErrorsInvalidPubKey(v ErrorsInvalidPubKey) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidPubKey performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsInvalidPubKey
func (t *ResponsesAdminUserBadRequest) MergeErrorsInvalidPubKey(v ErrorsInvalidPubKey) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsInvalidPaymail returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsInvalidPaymail
func (t ResponsesAdminUserBadRequest) AsErrorsInvalidPaymail() (ErrorsInvalidPaymail, error) {
	var body ErrorsInvalidPaymail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidPaymail overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsInvalidPaymail
func (t *ResponsesAdminUserBadRequest) FromErrorsInvalidPaymail(v ErrorsInvalidPaymail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidPaymail performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsInvalidPaymail
func (t *ResponsesAdminUserBadRequest) MergeErrorsInvalidPaymail(v ErrorsInvalidPaymail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsPaymailInconsistent returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsPaymailInconsistent
func (t ResponsesAdminUserBadRequest) AsErrorsPaymailInconsistent() (ErrorsPaymailInconsistent, error) {
	var body ErrorsPaymailInconsistent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsPaymailInconsistent overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsPaymailInconsistent
func (t *ResponsesAdminUserBadRequest) FromErrorsPaymailInconsistent(v ErrorsPaymailInconsistent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsPaymailInconsistent performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsPaymailInconsistent
func (t *ResponsesAdminUserBadRequest) MergeErrorsPaymailInconsistent(v ErrorsPaymailInconsistent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorsInvalidDomain returns the union data inside the ResponsesAdminUserBadRequest as a ErrorsInvalidDomain
func (t ResponsesAdminUserBadRequest) AsErrorsInvalidDomain() (ErrorsInvalidDomain, error) {
	var body ErrorsInvalidDomain
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorsInvalidDomain overwrites any union data inside the ResponsesAdminUserBadRequest as the provided ErrorsInvalidDomain
func (t *ResponsesAdminUserBadRequest) FromErrorsInvalidDomain(v ErrorsInvalidDomain) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorsInvalidDomain performs a merge with any union data inside the ResponsesAdminUserBadRequest, using the provided ErrorsInvalidDomain
func (t *ResponsesAdminUserBadRequest) MergeErrorsInvalidDomain(v ErrorsInvalidDomain) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponsesAdminUserBadRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponsesAdminUserBadRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
